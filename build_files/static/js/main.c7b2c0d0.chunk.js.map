{"version":3,"sources":["dependencies/js/knt.js","components/core/configuration/config.js","dependencies/button/Button.tsx","dependencies/tileSelect/TileSelect.js","dependencies/InputFIeld/InputField.tsx","dependencies/form/Form.tsx","dependencies/js/Jpc.js","components/contestant/ContestForm.tsx","dependencies/SimpleText/SimpleText.js","dependencies/table/TableService.js","dependencies/table/Table.js","dependencies/views/Views.js","dependencies/label/LabelView.tsx","components/activities/election/vote/Vote.tsx","components/contestant/ContestantList.tsx","components/activities/election/CreateElectionLevel.js","components/activities/election/CreatePosts.tsx","components/activities/profile/ProfileUpdate.jsx","components/activities/profile/Profile.tsx","components/activities/election/CreatElection.tsx","dependencies/chart/bar/BarChart.js","dependencies/chart/pie/PieChart.js","dependencies/views/TitleLabel.tsx","components/activities/election/vote/VotingList.js","components/admin/RoleList.tsx","components/admin/CreateRole.js","components/admin/AssignRole.js","components/service/ConstantData.js","components/user/User.tsx","dependencies/tabPane/TabPane.tsx","components/core/auth/Register.tsx","components/windows/SubLinks/SubLinks.tsx","components/service/Constant.tsx","components/windows/landingPage/LandingPage.tsx","components/core/auth/Login.tsx","dependencies/switcher/Switcher.tsx","components/core/auth/Logout.tsx","components/service/Reducers.ts","components/windows/landingPage/SkinPage.tsx","App.tsx","index.tsx"],"names":["getArrayObjectKeys","data","dataKey","key","push","whitespace","KNT","array","getValuesArrayByKey","keyName","res","str","toString","arr","forEach","el","arrayToString","separator","join","getValueByKeyName","specifiedKey","keyVal","valueKey","type","parseInt","k","getValueByKeysName","keys","len","ks","length","getValuesArrayByKeys","find","getBoolean","getDistinctValuesArrayByKey","re","include","convertArrayToArrayOfObject","keyToLabel","valueLabel","getObjectValueByKey","obj","objKey","val","toLowerCase","filterByValue","value","val1","val2","string","equalsIgnoreCase","removeObjByKeyValue","removeByKeyValue","shuffle","randomIndex","i","Math","floor","random","filterByValueGetDistinct","makeMultipleStyle","range","minRange","maxRange","num","makeNumbers","min","max","reverse","unshift","search","includes","searchAny","marge","Array","isArray","console","warn","addAll","parseFloat","arrayOfData","equalsInclude","anySearch","includeKeyInObject","keyObj","strKey","element","findObjectKey","status","findByKeyValInArray","object","getKeyByValue","strVal","objects","replaceValue","prevValue","temp","newData","replaceMultipleValue","params","previousValue","newValue","p","remove","filter","e","removeMultiple","toRemove","maxNumInArr","minNumInArr","reduce","a","b","getDistinct","customList","label","total","startFrom","cent","item","toFixed","percent","this","percentWithTotal","getKeys","func","buildObjToNameAndValue","args","name","buildObjToSpecifyKeys","newKeyLabel","newValLabel","newAppendLabel","newAppendVal","nwAP","nwAPVal","nwKey","nwVal","extractByKeyValue","keySpecify","error","extractByKeyValues","removeByKeyValues","extractAndCompareByKeyValue","conKey1","conKey2","extractByKeys","list","masterKey","removeByKeys","extractArrayInArrayObject","arrayKeys","isObject","arrayValues","groupArrayObjectByKey","keySort","groupTitleLabel","groupContentLabel","group","undefined","Object","compareTwoObject","obj1","obj2","JSON","stringify","any","validateField","validate","field","emptyKey","checkNumber","param","isNaN","digitRestriction","maxValue","extractNum","replace","action","copyToClipboard","TextToCopy","al","TempText","document","createElement","body","appendChild","select","execCommand","removeChild","alert","mainString","searchStr","equal","value1","value2","titleCase","txt","charAt","toUpperCase","substr","stringCommaToArray","split","ar","string1","string2","extract","start","end","hasWhiteSpace","test","getAcronyms","arrString","acronym","firstLetter","filterCamelCase","toSet","caseSentence","stringArray","fixPoint","kntCase","lowerCase","upperCase","makeId","prevData","character","previous","result","charactersLength","j","replaceWord","word","newWord","removeWhitespace","date","isExpired","expireDate","Date","isWithin","dateOne","dateTwo","d1","d2","getPeriod","curYear","getFullYear","years","getCurrentYear","getPreviousYear","getNextYear","getCustomYear","period","Number","String","debug","getTodayDate","current","full","day","getUTCDate","month","getMonth","year","time","toLocaleTimeString","getGreetingTime","m","moment","isValid","split_afternoon","split_evening","currentHour","format","dateFormats","dateAndCountryDateFormat","short","long","formatDate","divider","d","getDate","dateFormatter","map","mm","MM","dd","DD","yy","slice","yyyy","YYYY","newDate","matched","log","getDay","dateStr","exportCsv","heading","output","csvRow","content","builder","csvString","href","target","outputName","download","concat","click","getBase64Image","img","canvas","width","height","getContext","drawImage","toDataURL","makeGrading","fromVal","toVal","letterGrade","point","attained","wordGrade","oLevelGradeToWeight","grade","oLevelWeightToGrade","weight","intValue","gradeScoreOverHundred","credit","limit","promotion","classes","hierarchy","stage","pass","toggle","highest","curStage","newStage","passed","aim","score","convert","numberToWord","afterDecimal","th","dg","tn","tw","x","indexOf","n","sk","y","cal","roundUpNum","round","EPSILON","html","appendClassNameNUM_Content","tagName","className","getElementsByTagName","innerHTML","cName","classArr","appendClassNameToTagByTagName","attrName","getElementsByName","country","basic","appName","appLogo","admin","username","password","firstName","lastName","email","phone","gender","developer","company","yearOfProduction","basicJSX","footer","poweredBy","Button","props","handleClick","loading","active","onClick","tag","disable","disabled","style","loadingIcon","loadingAnim","children","icon","display","marginRight","TileSelect","count","onSelect","renderKey","all","countFunc","inactive","useState","setSelect","allItem","setAllItem","baseData","setBaseData","markAll","useEffect","checked","valueChecker","key1","key2","activeStyle","InputField","typeRender","id","placeholder","values","onChange","readOnly","typeV","setTypeV","currentValue","setCurrentValue","tInputField","tRadioSelect","htmlFor","tileSelect","tSelect","handleOptions","Form","schema","onSubmit","userButton","onUpdate","state","setState","handleChange","preventDefault","pr","handleSelect","control","JHttp","require","getAddress","dataRetrieved","dataNotRetrieve","axios","get","then","catch","postAddress","formData","processSucceed","processFail","post","ca","ContestForm","user","useSelector","userData","posts","setPosts","levels","setLevels","election","setElection","baseUrl","err","userId","descriptions","title","text","window","confirm","MSG","confirmMSG","main","SimpleText","styleSimpleText","spaceFeedback","fontSize","fontWeight","textAlign","color","fontStyle","TABLE_ATOMIC_ID_UNIQUE_KNT","Table","handleAutoPopulate","http","handleURL","handleSuccess","handleFailure","handleData","rawData","handleAtomicId","dataGet","unRenderColumns","unRenderKeys","unRenderData","idLabel","url","onSuccess","onFailure","renderThead","thead","theadJSX","thActionColumn","tdActionColum","renderThBodySerialNumber","sn","align","renderBodyTd","tbodyJSX","rowIndex","valStore","valKeyIndex","onCostumeRendering","handleAtomicIdItems","actionColumBody","realData","rowRealData","rowData","handleActionOptionClick","onActionOptionClick","actionSelected","index","onActionOptions","actionColum","tdData","noDataRetrieve","onCompBeforeTable","Component","UIWindow","onClosed","onShow","bind","LabelView","Vote","candidateInfo","objective","msg","candidateId","postId","electionName","vote","fieldRequiredMSG","src","alt","ContestantList","show","setShow","candidateIfo","setCandidateInfo","CreateElectionLevel","response","CreatePosts","level","setLevel","setData","makeInputSchema","ProfileUpdate","Profile","CreatElection","options","subTitle","chart","subtitle","BarChart","chartType","is3D","PieChart","TitleLabel","iconRight","VotingList","electionData","setElectionData","constructData","contents","store","co","each","RoleList","CreateRole","float","defaultRoles","AssignRole","setUsers","roles","setRoles","userTypes","setUserTypes","handleSubmit","pro","paddingTop","submitButton","User","AddUserType","TabPane","tabCount","setTabCount","tab","pane","Register","onSwitch","inApp","dispatcher","useDispatch","navigate","useNavigate","switchLogin","handleStatusConnection","connectionStatus","connected","sessionStorage","setItem","blocked","failed","message","incorrect","not_exist","submitButtonRender","handleRegisterNow","SubLinks","justifyContent","alignItems","adminKey","adminBasic","parse","localStorage","getItem","confirmLogoutMSG","LandingPage","UserData","page","Login","currentTitle","setCurrent","setUsername","setPassword","setMsg","errorAlert","setErrorAlert","authLogin","passkey","switchReg","onkeydown","ev","userName","Switcher","subLinks","onPageChange","subLink","setSubLink","currentView","Logout","clear","initialState","image","dateOfBirth","rolesId","connect","header","setHeader","setView","subLi","App","path","rootElement","getElementById","createStore","render"],"mappings":"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","file":"static/js/main.c7b2c0d0.chunk.js","sourcesContent":["// import React from 'react';\r\nimport moment from 'moment';\r\n\r\n/**\r\n *\r\n * @param {*} name\r\n * @param {*} data\r\n */\r\nexport const biKeyObjectBuilder = (name = '', data) => {\r\n  var temp = {\r\n    name: name,\r\n    data: data,\r\n  };\r\n  return temp;\r\n};\r\n\r\n/**\r\n * @param {reportUrl} url\r\n * @param {reportsSubLinks} reportSubUrl\r\n * @param {id} key\r\n */\r\n\r\nexport const handleTriUrl = (url, subUrl, key) => {\r\n  let id = key;\r\n  return `${url}${subUrl}` + id;\r\n};\r\n\r\n/**\r\n * supply linked url branched\r\n * @param {baseUrl} url\r\n * @param {subLink} subUrl\r\n */\r\nexport const handleBiUrl = (url, subUrl) => {\r\n  return `${url}${subUrl}`;\r\n};\r\n/**\r\n * supply any single url\r\n * @param {url} url\r\n */\r\nexport const handleUrl = (url) => {\r\n  return `${url}`;\r\n};\r\n\r\n\r\nexport const internetCheck = () => {\r\n  const checkStatusOnline = async () => {\r\n    try {\r\n      const online = await fetch(\"/1pixel.png\");\r\n      return online.status >= 200 && online.status < 300; // either true or false\r\n    } catch (err) {\r\n      return false; // definitely offline reload\r\n    }\r\n  };\r\n  return checkStatusOnline();\r\n}\r\n\r\n// export const EmptyText = (props) => {\r\n//     return (\r\n//         <div>\r\n//         {\r\n//             (props.data !== \"\" || props.data !== null || props.data !== undefined)?\r\n//             props.children\r\n//             :\r\n//             \"\"\r\n//         }\r\n//         </div>\r\n//     )\r\n// }\r\n\r\nexport const exportCsv = (data = [], heading = [], output = '') => {\r\n  var csvRow = [];\r\n  var content = [heading];\r\n  if (heading === undefined || heading === [] || heading === null) {\r\n    content = [getArrayObjectKeys(data)];\r\n  }\r\n\r\n  for (let item = 0; item < data.length; item++) {\r\n    let builder = [];\r\n    getArrayObjectKeys(data).forEach((element) => {\r\n      builder.push(data[item][element]);\r\n    });\r\n    content.push(builder);\r\n  }\r\n\r\n  for (let i = 0; i < content.length; i++) {\r\n    csvRow.push(content[i].join(','));\r\n  }\r\n  var csvString = csvRow.join('%0A');\r\n\r\n  var a = document.createElement('a');\r\n  a.href = 'data:attachment/csv,' + csvString;\r\n  a.target = '_Blank';\r\n  let outputName = output === '' || output === undefined ? 'document' : output;\r\n  a.download = outputName.concat('.csv');\r\n  document.body.appendChild(a);\r\n  a.click();\r\n};\r\n\r\nexport const getArrayObjectKeys = (data) => {\r\n  var dataKey = [];\r\n  for (const key in data[0]) {\r\n    dataKey.push(key);\r\n  }\r\n  return dataKey;\r\n};\r\n\r\n/**\r\n * string value expected\r\n * @param {string} item\r\n */\r\n\r\nexport const joinCovertToLowerCase = (string = '') => {\r\n  if (string !== null && string !== '') {\r\n    return string.replace(/ /g, '').toLowerCase();\r\n  }\r\n};\r\n\r\nexport const KNTArray = {\r\n  /**\r\n   *\r\n   * @param {add up items in an array} data\r\n   */\r\n  addAll: function (data = []) {\r\n    var res = 0;\r\n\r\n    for (let k = 0; k < data.length; k++) {\r\n      res += parseFloat(data[k]);\r\n    }\r\n    return res;\r\n  },\r\n  /**\r\n   *\r\n   * @param {total sum} total\r\n   * @param {number} item\r\n   * it will return percentage of number from total sum\r\n   */\r\n  cent: function (total, item) {\r\n    let cal = (item / total) * 100;\r\n    return cal.toFixed(1);\r\n  },\r\n  /**\r\n   *\r\n   * @param {array of Numbers} data\r\n   * ite will return array of percent\r\n   * adding all as total\r\n   */\r\n  percent: function (data) {\r\n    var res = [];\r\n    let total = this.addAll(data);\r\n    for (let i = 0; i < data.length; i++) {\r\n      res.push(this.cent(total, parseFloat(data[i])));\r\n    }\r\n    return res;\r\n  },\r\n  /**\r\n   *\r\n   * @param {total sum expected} total\r\n   * @param {array of numbers} data\r\n   * it will return array of percentage\r\n   */\r\n  percentWithTotal: function (total, data = []) {\r\n    let res = [];\r\n    for (let k = 0; k < data.length; k++) {\r\n      res.push(this.cent(total, parseFloat(data[k])));\r\n    }\r\n    return res;\r\n  },\r\n};\r\n\r\n// export const KNTObject = {\r\n//     optionList:function(data = []){\r\n//         return Object.entries(data).map(([x, v], y) => (\r\n//             <option key={y} name={v} value={x}>{v}</option>\r\n//         ));\r\n//     }\r\n// };\r\n\r\nexport const roundArray = (data) => {\r\n  data = [];\r\n  let res = [];\r\n  for (let i = 0; i <= data.length; i++) {\r\n    res = Math.round(data[i]);\r\n  }\r\n  return res;\r\n};\r\n\r\nexport const KNTGraph = {\r\n  /**\r\n   * bar Chart data of two series type\r\n   */\r\n  bar: function (data1, data2, label) {\r\n    return {\r\n      type: 'bar',\r\n      label: label,\r\n      series: [\r\n        {\r\n          data: Object.entries(data1).map(([key, v], i) => v),\r\n          name: 'male',\r\n        },\r\n        {\r\n          data: Object.entries(data2).map(([key, v], i) => v),\r\n          name: 'Female',\r\n        },\r\n      ],\r\n      categories: Object.entries(data1).map(([key], i) => key),\r\n    };\r\n  },\r\n  /**\r\n   * line Chart data of two series type\r\n   */\r\n  line: function (data1, data2, label) {\r\n    return {\r\n      type: 'line',\r\n      label: label,\r\n      series: [\r\n        {\r\n          data: Object.entries(data1).map(([key, v], i) => v),\r\n          name: 'Male',\r\n        },\r\n        {\r\n          data: Object.entries(data2).map(([key, v], i) => v),\r\n          name: 'Female',\r\n        },\r\n      ],\r\n      categories: Object.entries(data1).map(([key], i) => key),\r\n    };\r\n  },\r\n  donut: function (data, subject) {\r\n    var res = data;\r\n    return {\r\n      type: 'donut',\r\n      labels: Object.entries(res).map(([k, v], i) => k),\r\n      data: Object.entries(res).map(([k, v], i) => v),\r\n      subject: subject,\r\n    };\r\n  },\r\n  radial: function (data, subject) {\r\n    var res = data;\r\n    return {\r\n      type: 'radial',\r\n      labels: Object.entries(res).map(([k, v], i) => k),\r\n      data: Object.entries(res).map(([k, v], i) => v),\r\n      subject: subject,\r\n    };\r\n  },\r\n};\r\n\r\nexport const KNTDate = {\r\n  getCurrentYear: function getYear() {\r\n    return new Date().getFullYear();\r\n  },\r\n  getPreviousYear: function getYear() {\r\n    return new Date().getFullYear() - 1;\r\n  },\r\n  getNextYear: function getYear() {\r\n    return new Date().getFullYear() + 1;\r\n  },\r\n  getCustomYear: function (period = Number) {\r\n    // period.toString()\r\n    if (period !== String || '' || NaN) {\r\n      return new Date().getFullYear() + period;\r\n    } else {\r\n      return console.debug(\r\n        'Sorry Kindly Supply an Number At KNTDate.getCustomYear() e.g KNTDate.getCustomYear(5)'\r\n      );\r\n    }\r\n  },\r\n  getTodayDate: {\r\n    full: function () {\r\n      var day = new Date().getUTCDate();\r\n      var month = new Date().getMonth() + 1;\r\n      var year = new Date().getFullYear();\r\n      let date = `${day}/${month}/${year}`;\r\n      return date;\r\n    },\r\n    day: function () {\r\n      return new Date().getUTCDate();\r\n    },\r\n    time: function () {\r\n      return new Date().toLocaleTimeString();\r\n    },\r\n  },\r\n};\r\n\r\nexport const getPercentage = () => {\r\n  // var data = []\r\n  // convert back to 100%\r\n  // let data = [50,120,70,67,150]\r\n  // let sum = [data.reduce((i, e)=>{\r\n  //     return i + e;\r\n  // })];\r\n  // let cent = 100;\r\n  // let cal = cent / sum\r\n  // var result = data.map((data) => data * cal  );\r\n  // console.log(result)\r\n};\r\n\r\n// export progressDiv = (undoneTask, doneTask, initialTask) =>{\r\n//     return (\r\n//         <div className=\"knt-d-progress-fill knt-d-width-change\" style={{\"--w\": `${100/initialTask*doneTask}%`}} >\r\n//              {Math.trunc(100/initialTask*doneTask)}%\r\n//         </div>\r\n//     )\r\n//  }\r\n\r\n/**\r\n * KNT VERSION 2.0\r\n * start\r\n */\r\nconst whitespace = /\\s+/g;\r\nexport const KNT = {\r\n  /**Array */\r\n  array: {\r\n      /**\r\n       * \r\n       * @param {arrayOfObjects} data \r\n       * @param {keySearch*} keyVal \r\n       * @returns it's return distinct array of value sorted by key supplied []\r\n       */\r\n      getValuesArrayByKey: function(data = [], keyName){\r\n          let res = [];\r\n          let str = keyName.toString();          \r\n          var arr = data;\r\n          // let type = typeof value;\r\n          // if(type === \"number\"){\r\n          // }\r\n          arr.forEach(el => {\r\n              for (const key in el) {\r\n                  if (key ===  str) {\r\n                      res.push(el[key]);               \r\n                  }\r\n              }\r\n          })\r\n          return res;\r\n      },\r\n      arrayToString:function(arr, separator = \"\"){\r\n          // let res = ``;\r\n          // arr.forEach((ar, i) => {\r\n          //   if(i > 0  && i < arr.length){\r\n          //     res += (separator + ar);\r\n          //   } else {\r\n          //     res += ar;\r\n          //   }\r\n          // })\r\n          return arr.join(separator);\r\n      },\r\n      getValueByKeyName: function (data = [], specifiedKey = \"\",  keyVal = \"\", valueKey = \"\") {\r\n          let res;\r\n          let type = typeof keyVal;\r\n\r\n          if (type === \"number\") {\r\n              keyVal = parseInt(keyVal);\r\n          }\r\n          if (type === \"string\") {\r\n              keyVal = keyVal.toString();\r\n          }\r\n\r\n          data.forEach(el => {\r\n              if (specifiedKey !== \"\") {\r\n                  if (el[specifiedKey] === keyVal) {\r\n                      return res = el[valueKey];\r\n                  }\r\n              }\r\n              else {\r\n                  for (const k in el) {\r\n                      if (el[k] === keyVal) {\r\n                          return res = el[valueKey];\r\n                      }\r\n                  }\r\n              }\r\n          });\r\n\r\n          return res;\r\n      },\r\n      getValueByKeysName: function (data = [], keys = [{keyName: \"\",  keyVal: \"\"}], valueKey = \"\") {\r\n          let res;\r\n          let type = typeof keyVal;\r\n\r\n          // if (type === \"number\") {\r\n          //     keyVal = parseInt(keyVal);\r\n          // }\r\n          // if (type === \"string\") {\r\n          //     keyVal = keyVal.toString();\r\n          // }\r\n\r\n          data.forEach(el => {\r\n            let len = 0;\r\n            keys.forEach(ks => {\r\n              if (ks.keyName !== \"\") {\r\n                  if (el[ks.keyName] === ks.keyVal) {\r\n                    len += 1;\r\n                      // return res = el[valueKey];\r\n                  }\r\n              }\r\n              else {\r\n                  for (const k in el) {\r\n                      if (el[k] === ks.keyVal) {\r\n                        len += 1;\r\n                          // return res = el[valueKey];\r\n                      }\r\n                  }\r\n              }\r\n            });\r\n            if(len == keys.length){\r\n                if (keys[0].keyName !== \"\") {\r\n                  if (el[keys[0].keyName] === keys[0].keyVal) {\r\n                    len += 1;\r\n                      return res = el[valueKey];\r\n                  }\r\n              }\r\n              else {\r\n                  for (const k in el) {\r\n                      if (el[k] === keys[0].keyVal) {\r\n                        len += 1;\r\n                          return res = el[valueKey];\r\n                      }\r\n                  }\r\n              }\r\n            }\r\n          });\r\n\r\n          return res;\r\n      },\r\n      getValuesArrayByKeys: function(data = [], keyVal = []){\r\n          let res = [];\r\n          var arr = data;\r\n          // let type = typeof value;\r\n          // if(type === \"number\"){\r\n          // }\r\n          arr.forEach(el => {\r\n              for (const key in el) {\r\n                if(KNT.array.find.getBoolean(keyVal, key)){\r\n                  res.push(el[key])\r\n                }\r\n              }\r\n          })\r\n          return res;\r\n      },\r\n      getDistinctValuesArrayByKey: function(data = [], keyVal){\r\n          let res = [];\r\n          let str = keyVal.toString();          \r\n          var arr = data;\r\n          // let type = typeof value;\r\n          // if(type === \"number\"){\r\n          // }\r\n          arr.forEach(el => {\r\n              for (const key in el) {\r\n                  if (key ===  str) {\r\n                      let re = el[key].toString();\r\n                        if(!KNT.array.include(re, res)){\r\n                            res.push(re);\r\n                        }                \r\n                  }\r\n              }\r\n          })\r\n          return res;\r\n      },\r\n      convertArrayToArrayOfObject: function(data, keyToLabel, valueLabel){\r\n        let res = [];\r\n        data.forEach(el => {\r\n          res.push({[keyToLabel? keyToLabel: 'name']:el, [valueLabel? valueLabel: \"value\"]: el})\r\n        });\r\n        return res;\r\n      },\r\n      // buildArrayObjectOfSpecifyKeysAsArrayObject: function name(data =[], keys = []) {\r\n      //   let res = [];\r\n      //   data.forEach(el => {\r\n      //     let temp = {};\r\n      //     keys.forEach(k => {\r\n      //       for(const key in el){\r\n      //         if(key.toLowerCase() === k.toLowerCase()){\r\n      //           temp[key] = el[key];\r\n      //         }\r\n      //       }\r\n      //     })\r\n      //     res.push(temp)\r\n      //   });\r\n      //   return res;\r\n      // },\r\n      getObjectValueByKey: function(obj, objKey){\r\n        let val = \"\";\r\n        for (const key in obj) {\r\n          if(key.toString().toLowerCase() === objKey.toLowerCase()){\r\n            val = obj[key]\r\n          }\r\n        }\r\n        return val;\r\n      },\r\n      filterByValue: function (data = [], keys = { key: '', value: '' }) {\r\n        let res = [];\r\n\r\n        data.forEach((el) => {\r\n          let val1 = el[keys.key].toString(), val2 = keys.value.toString();\r\n          if (KNT.string.equalsIgnoreCase(val1, val2)) {\r\n            // if(!this.find.getBoolean(res, el))\r\n            res.push(el);\r\n          }\r\n        });\r\n\r\n        return res;\r\n      },\r\n      removeObjByKeyValue: function (data = [],  keyVal ='', value = '' ) {\r\n        let res = [];\r\n\r\n        data.forEach(el => {\r\n          for(const key in el){\r\n            if(!((key.toString().toLowerCase() === keyVal.toString().toLowerCase()) && (el[key].toString().toLowerCase() === value.toString().toLowerCase()))){\r\n                res.push(el)\r\n            }\r\n          }\r\n        });\r\n\r\n        return res;\r\n      },\r\n      removeByKeyValue: function (data = [], keys = { key: '', value: '' }) {\r\n        let res = [];\r\n\r\n        data.forEach((el) => {\r\n          const val1 = el[keys.key], val2 = keys.value;\r\n          if (val1 !== val2) {\r\n            res.push(el);\r\n          }\r\n        });\r\n\r\n        return res;\r\n      },\r\n    shuffle: function(array) {\r\n        let i = array.length,  randomIndex;\r\n      \r\n        while (0 !== i) {\r\n      \r\n          randomIndex = Math.floor(Math.random() * i);\r\n          i--;\r\n      \r\n          [array[i], array[randomIndex]] = [\r\n            array[randomIndex], array[i]];\r\n        }\r\n      \r\n        return array;\r\n      },\r\n      // filterByMultipleValues: function(data = [], keys =[{ key: '', value: '' }]){\r\n        // let res = [];\r\n        // console.log(keys)\r\n        //loop each data\r\n        // data.forEach(el => {\r\n          //loop keys\r\n          // keys.forEach(k => {\r\n            // console.log(k)\r\n            // let newKeys = KNT.array.getValuesArrayByKey([k], \"key\")\r\n            // console.log(newKeys)\r\n            //assign each key values\r\n            // let val1 = el[k.key].toString(), val2 = k.value.toString();\r\n            // compare values\r\n            // if(KNT.string.equalsIgnoreCase(val1, val2)){\r\n            //   res.push(el)\r\n            // }\r\n        //   });\r\n        // });\r\n        // return res;\r\n      // },\r\n      filterByValueGetDistinct: function ( data = [], keys = { key: '', value: '' } ) {\r\n        let res = [];\r\n\r\n        data.forEach((el) => {\r\n          if (KNT.string.equalsIgnoreCase(el[keys.key], keys.value)) {\r\n            if (!res.length > 0) res.push(el); //need to be review\r\n          }\r\n        });\r\n\r\n        return res;\r\n      },\r\n      /**\r\n       *\r\n       * @param {*} str\r\n       * @param {*} range\r\n       * @returns\r\n       */\r\n      makeMultipleStyle: function (str, range = []) {\r\n        let minRange = range[0];\r\n        let maxRange = range[1];\r\n        let res = [];\r\n        let num = KNT.array.makeNumbers(minRange, maxRange);\r\n\r\n        num.forEach((num) => {\r\n          res.push(\r\n            `.${str}${num} {\r\n                              ${str}: ${num};\r\n                          }`\r\n          );\r\n        });\r\n\r\n        return res;\r\n      },\r\n      makeNumbers: function (min, max, reverse = false) {\r\n        let res = [];\r\n        for (var i = min; i <= max; i++ ) {\r\n          if(reverse){\r\n            res.unshift(i)\r\n          } else res.push(i);\r\n        }\r\n        return res;\r\n      },\r\n      search: function (array = [], string) {\r\n        let search = string.toLowerCase();\r\n        let res = [];\r\n        array.forEach((el, i) => {\r\n          if (el.toLowerCase().includes(search)) {\r\n            res.push(el);\r\n          }\r\n        });\r\n        return res;\r\n      },\r\n      searchAny: function (array = [], string) {\r\n        let search = string.toLowerCase();\r\n        let res = [];\r\n        array.forEach((el, i) => {\r\n          for(const key in el){\r\n            const k = key.toLowerCase();\r\n            const v = el[key]\r\n            if(v.includes(search) || k.includes(search)){\r\n              if(!res.includes(el)){\r\n                res.push(el);\r\n              }\r\n            }\r\n          }\r\n        });\r\n        return res;\r\n      },\r\n      marge: function (data = []) {\r\n        // let data = [arr1, arr2]\r\n        var res = [];\r\n        for (let k = 0; k < data.length; k++) {\r\n          if (Array.isArray(data[k])) {\r\n            data[k].forEach((el) => {\r\n              res.push(el);\r\n            });\r\n          } else {\r\n            console.warn('Invalid Data Supplied');\r\n          }\r\n        }\r\n        // arr1.forEach(el => {\r\n        //     res.push(el);\r\n        // });\r\n        // arr2.forEach(el => {\r\n        //     res.push(el);\r\n        // });\r\n        return res;\r\n      },\r\n      /**\r\n       *\r\n       * @param {add up items in an array} data\r\n       */\r\n      addAll: function (data = []) {\r\n        var res = 0;\r\n\r\n        for (let k = 0; k < data.length; k++) {\r\n          res += parseFloat(data[k]);\r\n        }\r\n        return res;\r\n      },\r\n      /**\r\n       * It return Boolean True/False\r\n       * @param {string to search} string\r\n       * @param {array of data} arrayOfData\r\n       */\r\n      include: function (string = '', arrayOfData = []) {\r\n        var res = false;\r\n        arrayOfData.forEach(data => {\r\n          if(KNT.string.equalsIgnoreCase(data.toString(), string)){\r\n            res = true;\r\n          }\r\n        })\r\n        // return arrayOfData.indexOf(string) > 0;\r\n        return res;\r\n      },\r\n      equalsInclude: function (arr = [], anySearch) {\r\n        for(let i = 0; i < arr.length; i++){\r\n          if(arr[i] === anySearch) {\r\n            return true;\r\n          }\r\n        }\r\n        return false;\r\n      },\r\n      includeKeyInObject: function (keyObj, strKey) {\r\n        var res = false;\r\n        for(const key in keyObj){\r\n          if(key === strKey){\r\n            res = true;\r\n          }\r\n        }\r\n        return res;\r\n      },\r\n      find: {\r\n        getBoolean: function (data = [], value) {\r\n          let res = false;\r\n          let type = typeof value;\r\n          if (type === 'number') {\r\n            value = parseInt(value);\r\n          } else if (type === 'string') {\r\n            value = value.toString();\r\n          }\r\n\r\n          data.forEach((element) => {\r\n            if (element === value) {\r\n              return (res = true);\r\n            }\r\n          });\r\n          return res;\r\n        },\r\n        findObjectKey: function(data = [], str){\r\n          let res = [];\r\n          let status = false;\r\n\r\n          data.forEach(element => {\r\n            for (const key in element) {\r\n              if(KNT.string.equalsIgnoreCase(key, str)){\r\n                status = true;\r\n                res.push(element);\r\n                return;\r\n              }\r\n            }          \r\n          });\r\n          return {status: status, data: res};\r\n        },\r\n        findByKeyValInArray: function(data = [], keyName, keyVal){\r\n          let res = false;\r\n          data.forEach(el => {\r\n            for(const key in el){\r\n              if(key === keyName){\r\n                if(keyVal === el[keyVal]){\r\n                  res = true;\r\n                }\r\n              }         \r\n            }\r\n          });\r\n          return res;\r\n        }\r\n      },\r\n      object: {\r\n        getKeyByValue: function(obj = {}, strVal) {\r\n          let objects = obj;\r\n          var keys = [];\r\n          let res = \"\";\r\n          for (const key in objects) {\r\n            if(!KNT.array.include(key, keys)){\r\n              keys.push(key);\r\n            }\r\n          } \r\n          keys.forEach(el => {\r\n            if(objects[el] == strVal){\r\n              res = el;\r\n            }\r\n          });\r\n          return res;      \r\n        },\r\n        replaceValue: function(data = [], key = \"\", prevValue= \"\", value = \"\"){\r\n          let temp = [];\r\n\r\n          let newData = data;\r\n            newData.forEach(el => {\r\n              if(el[key] === prevValue){\r\n                el[key] = value;\r\n              } \r\n              temp.push(el);\r\n            });\r\n            return temp;\r\n        },\r\n        replaceMultipleValue: function(data = [], key =\"\", params = [{previousValue:\"\", newValue: \"\"}]){\r\n          let temp = [];\r\n\r\n          let newData = data;\r\n            newData.forEach(el => {\r\n              params.forEach(p => {\r\n                if(el[key] == p.previousValue){\r\n                  el[key] = p.newValue\r\n                }\r\n              })\r\n              temp.push(el);\r\n            });\r\n            return temp;\r\n        },\r\n        // changeKeyName: function(data, key, newKey){\r\n        //   let temp = [];\r\n        //   data.forEach(element => {\r\n        //     if(element == key){\r\n        //       element = newKey\r\n        //       temp.push(element);\r\n        //     }\r\n        //   });\r\n        //   return temp;\r\n        // }\r\n      },\r\n      remove: function (string = \"\", data = []) {\r\n        return data.filter((e) => e !== string);\r\n      },\r\n      /**\r\n       * \r\n       * @param {Array} toRemove \r\n       * @param {Array<object>} data \r\n       * @returns return data excluding items key found in toRemove\r\n       */\r\n      removeMultiple: function (toRemove = [], data = []) {\r\n        let res = [];\r\n        data.forEach((el) => {\r\n          if (!this.find.getBoolean(toRemove, el)) {\r\n            res.push(el);\r\n          }\r\n        });\r\n        return res;\r\n      },\r\n      maxNumInArr: function (arr = []) {\r\n        return Math.max(...arr);\r\n      },\r\n      minNumInArr: function (arr = []) {\r\n        return arr.length > 0 && arr.reduce((a, b) => Math.min(a, b));\r\n      },\r\n      getDistinct: function (arr) {\r\n        let temp = [];\r\n\r\n        arr.forEach((element) => {\r\n          if (!this.find.getBoolean(temp, element)) {\r\n            temp.push(element);\r\n          }\r\n        });\r\n        return temp;\r\n      },\r\n      // getDistinctByKeyValue: function(arr = [], key = \"\"){\r\n\r\n      //     let temp = [];\r\n\r\n      //     arr.forEach(element => {\r\n      //       if(temp[element[key]]){\r\n\r\n      //         temp.push(element);\r\n      //       }\r\n\r\n      //     });\r\n\r\n      //     return temp\r\n      // },\r\n      customList: function (label, total = 0, startFrom = 0) {\r\n        let res = [];\r\n        for (\r\n          var i = startFrom !== 0 || null || undefined ? startFrom : 0;\r\n          i <= total;\r\n          i++\r\n        ) {\r\n          res.push(label + i);\r\n        }\r\n        return res;\r\n      },\r\n      /**\r\n       *\r\n       * @param {total sum} total\r\n       * @param {number} item\r\n       * it will return percentage of number from total sum\r\n       */\r\n      cent: function (total, item) {\r\n        let cal = (item / total) * 100;\r\n        return cal.toFixed(1);\r\n      },\r\n      /**\r\n       *\r\n       * @param {array of Numbers} data\r\n       * ite will return array of percent\r\n       * adding all as total [2%, 40%, n%]\r\n       */\r\n      percent: function (data) {\r\n        var res = [];\r\n        let total = this.addAll(data);\r\n        for (let i = 0; i < data.length; i++) {\r\n          res.push(this.cent(total, parseFloat(data[i])));\r\n        }\r\n        return res;\r\n      },\r\n      /**\r\n       *\r\n       * @param {total sum expected} total\r\n       * @param {array of numbers} data\r\n       * it will return array of percentage\r\n       */\r\n      percentWithTotal: function (total, data = []) {\r\n        let res = [];\r\n        for (let k = 0; k < data.length; k++) {\r\n          res.push(this.cent(total, parseFloat(data[k])));\r\n        }\r\n        return res;\r\n      },\r\n      getKeys: function (data, func) {\r\n        var dataKey = [];\r\n        for (const key in data[0]) {\r\n          dataKey.push(key);\r\n\r\n          if (func) {\r\n            func(key);\r\n          }\r\n        }\r\n        return dataKey;\r\n      },\r\n      /**\r\n       * \r\n       * @param {any array of object} data \r\n       * @returns array of object with key name and values\r\n       */\r\n      buildObjToNameAndValue : function(data = [], args){\r\n          var temp = [];\r\n          let arr = data;\r\n          arr.forEach(el => {\r\n              for (const key in el) {\r\n                if(args){\r\n                  temp.push(\r\n                      {name: key, value: el[key], ...args}\r\n                  )                \r\n                } else {\r\n                  temp.push(\r\n                      {name: key, value: el[key]}\r\n                  )               \r\n                }\r\n              }\r\n          })\r\n          return temp;\r\n      },\r\n      /** */\r\n      buildObjToSpecifyKeys : function(data = [], newKeyLabel, newValLabel, newAppendLabel, newAppendVal, obj= {}){\r\n\r\n          var temp = [];\r\n          let arr = data;\r\n          let nwAP = newAppendLabel? newAppendLabel: \"other\", nwAPVal = newAppendVal? newAppendVal: \"\"; \r\n          let nwKey = newKeyLabel? newKeyLabel: \"name\", nwVal = newValLabel? newValLabel: \"value\"; \r\n          arr.forEach(el => {\r\n              for (const key in el) {\r\n                  temp.push(\r\n                      {[nwKey]: key, [nwVal]: el[key], [nwAP]: nwAPVal, ...obj}\r\n                  )                \r\n              }\r\n          })\r\n          return temp;\r\n      },\r\n      extractByKeyValue: function(data = [], keySpecify = \"\", value = \"\"){\r\n        let res = [];\r\n        data.forEach(el => {\r\n          for(const key in el){\r\n            if(KNT.string.equalsIgnoreCase(key, keySpecify)){\r\n              try {\r\n                if(KNT.string.equalsIgnoreCase(el[key], value)){\r\n                  res.push(el);\r\n                }\r\n                } catch (error) {\r\n                  if(el[key] === value){\r\n                    res.push(el);\r\n                  }          \r\n                }\r\n            }            \r\n          }\r\n        })\r\n        return res;\r\n      },\r\n      extractByKeyValues: function(data = [], keySpecify = \"\", value = []){\r\n        let res = [];\r\n        data.forEach(el => {\r\n          for(const key in el){\r\n            if(KNT.string.equalsIgnoreCase(key, keySpecify)){\r\n              try {\r\n                  if(value.includes(el[key])){\r\n                    res.push(el);\r\n                  }\r\n                } catch (error) {\r\n                  if(el[key] === value){\r\n                    res.push(el);\r\n                  }          \r\n                }\r\n            }            \r\n          }\r\n        })\r\n        return res;\r\n      },\r\n      removeByKeyValues: function(data = [], keySpecify = \"\", value = []){\r\n        let res = [];\r\n        data.forEach(el => {\r\n          for(const key in el){\r\n            if(KNT.string.equalsIgnoreCase(key, keySpecify)){\r\n              try {\r\n                  if(!value.includes(el[key])){\r\n                    res.push(el);\r\n                  }\r\n                } catch (error) {\r\n                  if(el[key] !== value){\r\n                    res.push(el);\r\n                  }          \r\n                }\r\n            }            \r\n          }\r\n        })\r\n        return res;\r\n      },\r\n      extractAndCompareByKeyValue: function(data = [], keySpecify = \"\", value = \"\", conKey1 = \"\", conKey2 = \"\"){\r\n        if(conKey1 < conKey2){\r\n          console.error(\"Consider Key Value two must be greater than or equal to Consider Key Value Two\")\r\n        }\r\n        let res = [];\r\n        data.forEach(el => {\r\n          for(const key in el){\r\n            if(KNT.string.equalsIgnoreCase(key, keySpecify)){\r\n              try {\r\n                if(KNT.string.equalsIgnoreCase(el[key], value)){\r\n                  if(parseInt(el[conKey1]) > parseInt(el[conKey2])){\r\n                    res.push(el);\r\n                  }\r\n                }\r\n                } catch (error) {\r\n                  if(el[key] === value){\r\n                    if(parseInt(el[conKey1]) >= parseInt(el[conKey2])){\r\n                      res.push(el);\r\n                    }\r\n                  }          \r\n                }\r\n            }            \r\n          }\r\n        })\r\n        return res;\r\n      },\r\n      extractByKeys: function (data = [], keys = []) {\r\n      if (data === []) {\r\n          console.error(\"Data to extract from cannot be empty\");\r\n      }\r\n      let list = [];\r\n      data.forEach(element => {\r\n          let temp = {};\r\n          for (const key in element) {\r\n              let masterKey = false;\r\n              keys.forEach(item => {\r\n                  if (KNT.string.equalsIgnoreCase(item, key)) {\r\n                      return masterKey = true;\r\n                  }\r\n              });\r\n\r\n              if (masterKey) {\r\n                  temp[key] = element[key];\r\n              }\r\n          }\r\n          list.push(temp);\r\n      });\r\n      return list;\r\n      },\r\n      removeByKeys: function (data = [], keys = []) {\r\n      if (data === []) {\r\n          console.error(\"Data to extract from cannot be empty\");\r\n      }\r\n\r\n      let list = [];\r\n      data.forEach(element => {\r\n          let temp = {};\r\n          for (const key in element) {\r\n              let masterKey = true;\r\n              keys.forEach(item => {\r\n                  if (KNT.string.equalsIgnoreCase(item, key)) {\r\n                      return masterKey = false;\r\n                  }\r\n              });\r\n\r\n              if (masterKey) {\r\n                  temp[key] = element[key];\r\n              }\r\n          }\r\n          list.push(temp);\r\n      });\r\n\r\n      return list;\r\n     },\r\n  /**\r\n   * \r\n   * @param {ArrayObject} arr \r\n   * @returns it return an object, res as finale response,  arrayKeys of leftover and leftover value\r\n   */\r\n  extractArrayInArrayObject: function(arr){\r\n      let arrayKeys = [];\r\n      arr.forEach((el, i) => {\r\n          for(const k in el){\r\n              if(Array.isArray(el[k]) || KNT.object.isObject(el[k])){\r\n                  arrayKeys.push(k)\r\n              }\r\n          }\r\n      })\r\n      let res = KNT.array.removeByKeys(arr, arrayKeys);\r\n      let arrayValues = KNT.array.extractByKeys(arr, arrayKeys);\r\n      return {res: res, arrayKeys: arrayKeys, array: arrayValues};\r\n  },\r\n\r\n  /**\r\n   * \r\n   * @param {array of object} data \r\n   * @param {targeted key} keySort \r\n   * @param {new key title} groupTitleLabel \r\n   * @param {new key valueLabel} groupContentLabel \r\n   * @returns array of object grouped by key value e.g [{title: \"\", content: []}]\r\n   */\r\n   groupArrayObjectByKey: function(data, keySort, groupTitleLabel = \"\", groupContentLabel = \"\"){\r\n    let res  = [];\r\n    KNT.array.getDistinctValuesArrayByKey(data, keySort).forEach((el, i) => {\r\n        let group = {};\r\n        if(groupTitleLabel !== \"\" && groupTitleLabel !== undefined && groupTitleLabel !== null){\r\n            group[groupTitleLabel] = el;\r\n        } else {\r\n            group[\"title\"] = el;\r\n        }\r\n        if(groupTitleLabel !== \"\" && groupTitleLabel !== undefined && groupTitleLabel !== null){\r\n            group[groupContentLabel] = KNT.array.extractByKeyValue(data, keySort, el);\r\n        } else {\r\n            group[\"content\"] = KNT.array.extractByKeyValue(data, keySort, el);\r\n        }\r\n        res.push(group);\r\n        \r\n    })\r\n    return res;\r\n  }\r\n    // arr: function(mainArray = [], subArray = []){\r\n    //     let arr = [];\r\n    //     subArray.forEach(el => {\r\n    //         mainArray.forEach(mr => {\r\n    //             mr.search(el)? arr.push(el): arr.push(\"\")\r\n    //         })\r\n    //     });\r\n    //     return arr;\r\n    // }\r\n    // arrayToString: function(data = []){\r\n    //     let res = '';\r\n    //     let temp = [];\r\n    //     data.forEach(el => {\r\n    //         ree += el;\r\n    //     });\r\n    //     return res;\r\n    // }\r\n  },\r\n  object: {\r\n    /**\r\n     * \r\n     * @param {single Object} obj \r\n     * @param {value} value \r\n     * @returns  key of value\r\n     */\r\n    getKeyByValue: function (obj, value) {\r\n      return Object.keys(obj).find(key => obj[key] === value);\r\n    },\r\n    compareTwoObject: function (obj1, obj2){\r\n      return JSON.stringify(obj1) === JSON.stringify(obj2);\r\n    },\r\n    /**\r\n     * \r\n     * @param {any} any \r\n     * @returns true if is an object else it return false\r\n     */\r\n    isObject: function(any){\r\n      return any instanceof Object;\r\n    }\r\n  },\r\n    validateField: {\r\n      /**\r\n       * \r\n       * @param {[{}]} field \r\n       * @returns false if and only key value equal to \"\" or null or undefine, else it return true\r\n       */\r\n      validate: function (field = [], emptyKey, func){\r\n        // let fieldCheck = Array.isArray(field) && field.length > 0? field: KNT.object.isObject(field) && Object.keys(field).length > 0? [field]: err = true;\r\n        let res = true;\r\n          if(Array.isArray(field)){\r\n            field.forEach(el => {\r\n                  for(const key in el){\r\n                      if(el[key] === \"\" || el[key] === null || el[key] === undefined){\r\n                        if(emptyKey !== undefined){\r\n                          emptyKey(key)\r\n                        };\r\n                        return res = false;\r\n                      }\r\n                  }\r\n              });            \r\n            } \r\n            \r\n          if(res && func !== undefined){\r\n            func()\r\n          }\r\n          return res;\r\n      },\r\n      checkNumber: function (param) {\r\n        let res = isNaN(param);\r\n        return !res;\r\n      },\r\n      digitRestriction: function (value, maxValue, length = 0) {\r\n        value = parseInt(value);\r\n        if(typeof(value) !== \"number\"){\r\n            return 0;\r\n        }\r\n        if (value <= maxValue && value.toString().length <= length) {\r\n          return value;\r\n        } else return 0;\r\n      },\r\n      extractNum: function(value){\r\n        // value = isNaN(value)? 0: value\r\n        // let num = parseFloat(value.replace(/^D|,+/g, ''));\r\n        var num = value.replace(/[^0-9]/g, \"\");\r\n        return num;\r\n      }\r\n    },\r\n  /**Action */\r\n  action: {\r\n    copyToClipboard: function(TextToCopy, func = () => {}, al = false){\r\n      var TempText = document.createElement(\"input\");\r\n      TempText.value = TextToCopy;\r\n      document.body.appendChild(TempText);\r\n      TempText.select();\r\n      \r\n      document.execCommand(\"copy\");\r\n      document.body.removeChild(TempText);\r\n      if(al) alert(\"Copied!\");\r\n      if(func !== (undefined || null)){\r\n          func()\r\n      }\r\n      return true;\r\n    },\r\n  },\r\n  /**Strings */\r\n  string: {\r\n    includes: function(mainString, searchStr){\r\n\r\n      // var store = [];\r\n      // var str = \"\"\r\n      // str.indexOf(searchStr,0) > -1\r\n\r\n      // searchStr.split('').forEach(s = store.push(s));\r\n\r\n      return mainString.includes(searchStr);\r\n    },\r\n    equal: function (value1, value2) {\r\n      let res = false;\r\n      // let type1 = typeof value1;\r\n      // let  type2 = typeof value2;\r\n\r\n      if (value1 === value2) {\r\n        return (res = true);\r\n      }\r\n      return res;\r\n    },\r\n    titleCase: function (string) {\r\n      let str  = string.toString()+\"\"\r\n      return str.replace(/(\\w*\\W*|\\w*)\\s*/g, function (txt) {\r\n        return txt.charAt(0).toUpperCase() + txt.substr(1).toLowerCase();\r\n      });\r\n    },\r\n    toUpperCase: function (string = '') {\r\n      return string.toUpperCase();\r\n    },\r\n    toLowerCase: function (string = '') {\r\n      return string.toLowerCase();\r\n    },\r\n    stringCommaToArray: function (string, separator) {\r\n      var str = string.toString();\r\n      return str.split(`${separator? separator: \",\"}`);\r\n    },\r\n    arrayToString: function (arr = []) {\r\n      let res = '';\r\n      arr.forEach(ar => res += ar);\r\n      return res;\r\n    },\r\n    /**\r\n     * \r\n     * @param {param} string1 \r\n     * @param {param} string2 \r\n     * @returns  boolean\r\n     */\r\n    equalsIgnoreCase: function (string1 = \"\", string2 = \"\") {\r\n      string1 = string1.toLowerCase();\r\n      string2 = string2.toLowerCase();\r\n      if (string1 === string2) {\r\n        return true;\r\n      }\r\n      return false;\r\n    },\r\n    /**\r\n     * It return String Base on Range Specify\r\n     * @param {Supply String} str\r\n     * @param {Define Start} start\r\n     * @param {Define End} end\r\n     */\r\n    extract: function (str = '', start = 0, end = 0) {\r\n      let res = '';\r\n      for (let i = start; i <= end; i++) {\r\n        res += str[i];\r\n      }\r\n      return res;\r\n    },\r\n    /**\r\n     * it return true if text has space\r\n     * @param {Word to check} string\r\n     */\r\n    hasWhiteSpace: function (string) {\r\n      return /\\s/g.test(string);\r\n    },\r\n    /**\r\n     * it will get acronyms by first letter and capital letters in the string supplied\r\n     * and Return it in Upper Case\r\n     * string expected should be identify by space or camel case all through\r\n     * @param {String} string e.g emmanuelSmith will return ES\r\n     */\r\n    getAcronyms: function (str) {\r\n      // const string = str.indexOf(by? by : ' ') >= 0? this.titleCase(str): str;\r\n      const string = this.hasWhiteSpace(str) ? this.titleCase(str) : str;\r\n\r\n      var arrString = string.split('');\r\n\r\n      // console.log(string)\r\n      var acronym = '';\r\n      var firstLetter = '';\r\n\r\n      if (arrString[0].toLowerCase() === arrString[0]) {\r\n        firstLetter += arrString[0].toUpperCase();\r\n      }\r\n      for (var i in arrString) {\r\n        if (arrString[i].toUpperCase() === arrString[i]) {\r\n          acronym += '' + arrString[i].toUpperCase();\r\n        }\r\n        // if(acronym.length > 1 && this.hasWhiteSpace(str)){\r\n        //     return this.titleCase()\r\n        // }\r\n      }\r\n      return firstLetter ? firstLetter + acronym : acronym;\r\n    },\r\n    /**\r\n     * it will return supplied string with space or specified character before each capital letter in string supplied\r\n     * @param {*} string \r\n     * @param {*} toSet \r\n     * @param {*} caseSentence \r\n     * @returns \r\n     */\r\n    filterCamelCase: function (string, toSet, caseSentence) {\r\n      var str = string.toString();\r\n      var stringArray = str.split('');\r\n      var res = '';\r\n      let fixPoint = (toSet && toSet !== null)? toSet : ' ';\r\n\r\n      for (var i in stringArray) {\r\n        if (stringArray[i].toUpperCase() === stringArray[i]) {\r\n          res += fixPoint + stringArray[i].toLowerCase();\r\n        } else {\r\n          res += stringArray[i];\r\n        }\r\n      }\r\n      switch (caseSentence) {\r\n        case kntCase.lowerCase:\r\n          return this.toLowerCase(res);\r\n        case kntCase.upperCase:\r\n          return this.toUpperCase(res);\r\n        case kntCase.titleCase:\r\n          return this.titleCase(res);\r\n        default:\r\n          return res;\r\n      }\r\n    },\r\n    makeId: function (prevData, length, character= \"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789\") {\r\n      let previous = prevData;\r\n      var result = '';\r\n      // var character =\r\n      //   'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789';\r\n      let charactersLength = character.length;\r\n      for (let i = 0; i < length; i++) {\r\n        result += character.charAt(\r\n          Math.floor(Math.random() * charactersLength)\r\n        );\r\n      }\r\n      if (KNT.array.include(result, previous)) {\r\n        for (let j = 0; j < length; j++) {\r\n          result += character.charAt(\r\n            Math.floor(Math.random() * charactersLength)\r\n          );\r\n        }\r\n      } else {\r\n        return result;\r\n      }\r\n    },\r\n    replaceWord: function(str, word, newWord){\r\n        let newStr = str.replace(word, newWord);\r\n        return newStr;\r\n    },\r\n    removeWhitespace: function(str){\r\n        let newStr = str.replace(/\\s+/g, '');\r\n        return newStr;\r\n    }\r\n  },\r\n  /**Date And Moments */\r\n  date: {\r\n    /**\r\n     * \r\n     * @param {date} expireDate \r\n     * @returns \r\n     * it copmrae with current date\r\n     */\r\n    isExpired: function(expireDate){\r\n      let result = false;\r\n      var d1 = new Date(expireDate);\r\n      var d2 = new Date();\r\n      if(d1 >= d2){\r\n        result = true;\r\n      }\r\n      return result;\r\n    },\r\n    /**\r\n     * \r\n     * @param {smallerDate} dateOne \r\n     * @param {biggerDate} dateTwo \r\n     * @returns if current date is within date one and date two it return true\r\n     * dateTwo must be bigger than dateOne\r\n     */\r\n    isWithin: function(dateOne, dateTwo){\r\n      let result = false;\r\n      var d1 = new Date(dateOne);\r\n      var d2 = new Date(dateTwo);\r\n      let date = new Date();\r\n      if(d1 <= date & date <= d2){\r\n        result = true;\r\n      }\r\n      return result;\r\n    },\r\n    /**\r\n     * it will return arrays of years from current\r\n     * @param {Number Expected} num\r\n     * @param {symbol (+ or -)} type // Year Back as - and year ahead as +\r\n     */\r\n    getPeriod: function (num, type) {\r\n      let curYear = new Date().getFullYear();\r\n      let range = KNT.validateField.checkNumber(num) ? num : 5;\r\n      let years = [];\r\n      for (let i = 0; i < range; i++) {\r\n        if (type === '-') {\r\n          years.push(curYear - i);\r\n        } else if (type === '+') {\r\n          years.push(curYear + i);\r\n        } else {\r\n          years.push(curYear - i);\r\n        }\r\n      }\r\n      return years;\r\n    },\r\n    getCurrentYear: function getYear() {\r\n      return new Date().getFullYear();\r\n    },\r\n    getPreviousYear: function getYear() {\r\n      return new Date().getFullYear() - 1;\r\n    },\r\n    getNextYear: function getYear() {\r\n      return new Date().getFullYear() + 1;\r\n    },\r\n    getCustomYear: function (period = Number) {\r\n      // period.toString()\r\n      if (period !== String || '' || NaN) {\r\n        return new Date().getFullYear() + period;\r\n      } else {\r\n        return console.debug(\r\n          'Sorry Kindly Supply an Number At KNTDate.getCustomYear() e.g KNTDate.getCustomYear(5)'\r\n        );\r\n      }\r\n    },\r\n    getTodayDate: {\r\n      current: new Date(),\r\n      /**\r\n       * \r\n       * @returns dd/MM/yyyy\r\n       */\r\n      full: function () {\r\n        var day = new Date().getUTCDate();\r\n        var month = new Date().getMonth() + 1;\r\n        var year = new Date().getFullYear();\r\n        let date = `${day}/${month}/${year}`;\r\n        return date;\r\n      },\r\n      day: function () {\r\n        return new Date().getUTCDate();\r\n      },\r\n      time: function () {\r\n        return new Date().toLocaleTimeString();\r\n      },\r\n    },\r\n    /**\r\n     * Supply the current moment\r\n     * it return Morning, Afternoon Or Evening\r\n     * @param {moment()} m Optional\r\n     */\r\n    getGreetingTime: function (m = moment()) {\r\n      var g = null;\r\n\r\n      if (!m || !m.isValid()) {\r\n        return;\r\n      }\r\n\r\n      var split_afternoon = 12;\r\n      var split_evening = 16;\r\n      var currentHour = parseFloat(m.format('HH'));\r\n\r\n      if (currentHour >= split_afternoon && currentHour <= split_evening) {\r\n        g = 'Afternoon';\r\n      } else if (currentHour >= split_evening) {\r\n        g = 'Evening';\r\n      } else {\r\n        g = 'Morning';\r\n      }\r\n      return g;\r\n    },\r\n    dateFormats: function () {\r\n      let temp = [];\r\n\r\n      dateAndCountryDateFormat.forEach((el) => {\r\n        if (!KNT.array.include(el.data.short, temp)) {\r\n          temp.push(el.data.short);\r\n        }\r\n        if (!KNT.array.include(el.data.long, temp)) {\r\n          temp.push(el.data.long);\r\n        }\r\n      });\r\n\r\n      return temp;\r\n    },\r\n\r\n    /**\r\n     *\r\n     * @param {mainDate} date\r\n     * @param {} divider\r\n     * @returns \"yyyy/MM/dd\" or yyyy-MM-dd\r\n     */\r\n    formatDate: function (date, divider) {\r\n      var d = new Date(date),\r\n        month = '' + (d.getMonth() + 1),\r\n        day = '' + d.getDate(),\r\n        year = d.getFullYear();\r\n\r\n      if (month.length < 2) month = '0' + month;\r\n      if (day.length < 2) day = '0' + day;\r\n\r\n      return [year, month, day].join(!divider ? '-' : divider);\r\n    },\r\n    dateFormatter: function (date, format) {\r\n      var month = '' + (date.getMonth() + 1);\r\n      var day = '' + date.getDate();\r\n      if (month.length < 2) month = '0' + month;\r\n      if (day.length < 2) day = '0' + day;\r\n      const map = {\r\n        mm: month,\r\n        MM: month,\r\n        dd: day,\r\n        DD: day,\r\n        yy: date.getFullYear().toString().slice(-2),\r\n        yyyy: date.getFullYear(),\r\n        YYYY: date.getFullYear(),\r\n      };\r\n      var newDate = format.replace(\r\n        /mm|dd|yyyy|MM|DD|YYYY/gi,\r\n        (matched) => map[matched]\r\n      );\r\n      console.log(newDate, month, day);\r\n      return newDate;\r\n    },\r\n    /**\r\n     * Returns Day e.g Monday\r\n     */\r\n    getDay:{\r\n        short: function (dateStr){\r\n            let days = [\"Sun\", \"Mon\", \"Tue\", \"Wed\", \"Thu\", \"Fri\", \"Sat\"]\r\n            let date = new Date(dateStr);\r\n            let day  = date.getDay()\r\n            return days[day];\r\n        },\r\n        long: function (dateStr){\r\n            let days = [\"Sunday\", \"Monday\", \"Tuesday\", \"Wednesday\", \"Thursday\", \"Friday\", \"Saturday\"]\r\n            let date = new Date(dateStr);\r\n            let day  = date.getDay()\r\n            return days[day];\r\n        },\r\n    },\r\n  },\r\n  /**Files */\r\n  exportCsv: function(data = [], heading = [], output = ''){\r\n    var csvRow = [];\r\n    var content = [heading];\r\n    if (heading === undefined || heading === [] || heading === null) {\r\n      content = [getArrayObjectKeys(data)];\r\n    }\r\n  \r\n    for (let item = 0; item < data.length; item++) {\r\n      let builder = [];\r\n      getArrayObjectKeys(data).forEach((element) => {\r\n        builder.push(data[item][element]);\r\n      });\r\n      content.push(builder);\r\n    }\r\n  \r\n    for (let i = 0; i < content.length; i++) {\r\n      csvRow.push(content[i].join(','));\r\n    }\r\n    var csvString = csvRow.join('%0A');\r\n  \r\n    var a = document.createElement('a');\r\n    a.href = 'data:attachment/csv,' + csvString;\r\n    a.target = '_Blank';\r\n    let outputName = output === '' || output === undefined ? 'document' : output;\r\n    a.download = outputName.concat('.csv');\r\n    document.body.appendChild(a);\r\n    a.click();\r\n  },\r\n  /**\r\n   * supply url to convert\r\n   * @param {imageUrl} base64\r\n   */\r\n  // image: function(base64 = \"\", className =\"\"){\r\n  //     return <img src={base64}  className={className} alt=\"\"/>\r\n  // },\r\n  getBase64Image: function (img) {\r\n    var canvas = document.createElement('canvas');\r\n    canvas.width = img.width;\r\n    canvas.height = img.height;\r\n    var ctx = canvas.getContext('2d');\r\n    ctx.drawImage(img, 0, 0);\r\n    var dataURL = canvas.toDataURL('image/png');\r\n    return dataURL.replace(/^data:image\\/(png|jpg);base64,/, '');\r\n  },\r\n  /**\r\n   * \r\n   * private int id;\r\n    private int fromVal, toVal;\r\n    private double gradePoint;\r\n    private String letterGrade;\r\n   */\r\n  makeGrading: function(data= [{fromVal: 0, toVal: 0, letterGrade: \"\", point: 0}], attained){\r\n    let res = {letterGrade: \"\", wordGrade: \"\"};\r\n    data.forEach(el => {\r\n      console.log(el)\r\n      if(attained >= el.fromVal && attained <= el.toVal){\r\n        console.log(\"YESSS\")\r\n        res = el;\r\n      }\r\n    })\r\n    return res;\r\n  },  \r\n    oLevelGradeToWeight: function (grade){\r\n      switch (grade.toLowerCase()) {\r\n          case \"a1\": return 8;\r\n          case \"b2\": return 7;\r\n          case \"b3\": return 6;\r\n          case \"c4\": return 5;\r\n          case \"c5\": return 4;\r\n          case \"c6\": return 3;\r\n          case \"d7\": return 2;\r\n          case \"e8\": return 1;\r\n          case \"f9\": return 0;\r\n          default: return 0;\r\n      }\r\n    },\r\n    oLevelWeightToGrade: function(weight){\r\n      switch (weight.intValue()) {\r\n          case 8: return \"a1\";\r\n          case 7: return \"b2\";\r\n          case 6: return \"b3\";\r\n          case 5: return \"c4\";\r\n          case 4: return \"c5\";\r\n          case 3: return \"c6\";\r\n          case 2: return \"d7\";\r\n          case 1: return \"e8\";\r\n          case 0: return \"f9\";\r\n          default: return \"\";\r\n      }\r\n    },\r\n\r\n  grade: function (gradeScoreOverHundred) {\r\n    if (gradeScoreOverHundred >= 95 && gradeScoreOverHundred <= 100) {\r\n      return 'A+';\r\n    } else if (gradeScoreOverHundred >= 90 && gradeScoreOverHundred <= 94) {\r\n      return 'A';\r\n    } else if (gradeScoreOverHundred >= 85 && gradeScoreOverHundred <= 89) {\r\n      return 'B+';\r\n    } else if (gradeScoreOverHundred >= 80 && gradeScoreOverHundred <= 84) {\r\n      return 'B';\r\n    } else if (gradeScoreOverHundred >= 75 && gradeScoreOverHundred <= 79) {\r\n      return 'C+';\r\n    } else if (gradeScoreOverHundred >= 70 && gradeScoreOverHundred <= 74) {\r\n      return 'C';\r\n    } else if (gradeScoreOverHundred >= 65 && gradeScoreOverHundred <= 69) {\r\n      return 'D+';\r\n    } else if (gradeScoreOverHundred >= 60 && gradeScoreOverHundred <= 64) {\r\n      return 'D';\r\n    } else if (gradeScoreOverHundred >= 0 && gradeScoreOverHundred <= 59) {\r\n      return 'F';\r\n    } else return 'Failed';\r\n  },\r\n  credit: function (gradeScoreOverHundred = Number, limit) {\r\n    // console.log(\"YUP\",gradeScoreOverHundred)\r\n    // let ninetyCent = 0.9;\r\n    // let seventyFiveCent = 0.75;\r\n    // let fiftyCent = 0.5;\r\n    // let fourtyCent = 0.04;\r\n    // var gradeScoreOverHundred = this.array.cent(expected, score);\r\n    if (\r\n      gradeScoreOverHundred >= 95 &&\r\n      gradeScoreOverHundred <= (limit ? limit : 100)\r\n    ) {\r\n      return 'Excellent';\r\n    } else if (gradeScoreOverHundred >= 75 && gradeScoreOverHundred <= 94) {\r\n      return 'Credit';\r\n    } else if (gradeScoreOverHundred >= 41 && gradeScoreOverHundred <= 74) {\r\n      return 'Pass';\r\n    } else if (gradeScoreOverHundred >= 0 && gradeScoreOverHundred <= 40) {\r\n      return 'Fair';\r\n    } else return '';\r\n  },\r\n  promotion: function (\r\n    classes = [],\r\n    hierarchy = [],\r\n    stage = 0,\r\n    pass = false,\r\n    toggle = false\r\n  ) {\r\n    // let toggle = true;\r\n    // let pass = true;\r\n    let highest = KNT.array.maxNumInArr(hierarchy);\r\n    let curStage = stage;\r\n    let newStage = 0;\r\n    for (let i = 0; i <= highest; i++) {\r\n      if (pass) {\r\n        if (classes[i] === classes[curStage]) {\r\n          return toggle\r\n            ? (newStage = i + 1 > highest ? 'FINISHED!!!' : i + 1)\r\n            : false;\r\n        }\r\n      } else return curStage;\r\n    }\r\n    return newStage;\r\n  },\r\n  passed: function (aim = 0, score = 0) {\r\n    if (score + 1 >= aim + 1) {\r\n      return true;\r\n    } else return false;\r\n  },\r\n  convert: {\r\n    numberToWord: function (num, afterDecimal = '') {\r\n      var th = ['', 'thousand', 'million', 'billion', 'trillion'];\r\n      var dg = [\r\n        'zero',\r\n        'one',\r\n        'two',\r\n        'three',\r\n        'four',\r\n        'five',\r\n        'six',\r\n        'seven',\r\n        'eight',\r\n        'nine',\r\n      ];\r\n      var tn = [\r\n        'ten',\r\n        'eleven',\r\n        'twelve',\r\n        'thirteen',\r\n        'fourteen',\r\n        'fifteen',\r\n        'sixteen',\r\n        'seventeen',\r\n        'eighteen',\r\n        'nineteen',\r\n      ];\r\n      var tw = [\r\n        'twenty',\r\n        'thirty',\r\n        'forty',\r\n        'fifty',\r\n        'sixty',\r\n        'seventy',\r\n        'eighty',\r\n        'ninety',\r\n      ];\r\n\r\n      num = num.toString();\r\n      num = num.replace(/[\\, ]/g, '');\r\n      if (num != parseFloat(num)) return 'not a number';\r\n      var x = num.indexOf('.');\r\n      if (x == -1) x = num.length;\r\n      if (x > 15) return 'too big';\r\n      var n = num.split('');\r\n      var str = '';\r\n      var sk = 0;\r\n      for (var i = 0; i < x; i++) {\r\n        if ((x - i) % 3 == 2) {\r\n          if (n[i] == '1') {\r\n            str += tn[Number(n[i + 1])] + ' ';\r\n            i++;\r\n            sk = 1;\r\n          } else if (n[i] != 0) {\r\n            str += tw[n[i] - 2] + ' ';\r\n            sk = 1;\r\n          }\r\n        } else if (n[i] != 0) {\r\n          // 0235\r\n          str += dg[n[i]] + ' ';\r\n          if ((x - i) % 3 == 0) str += 'hundred, ';\r\n          sk = 1;\r\n        }\r\n        if ((x - i) % 3 == 1) {\r\n          if (sk) str += th[(x - i - 1) / 3] + ' ';\r\n          sk = 0;\r\n        }\r\n      }\r\n\r\n      if (x != num.length) {\r\n        var y = num.length;\r\n        str += afterDecimal + ' ';\r\n        for (var i = x + 1; i < y; i++) str += dg[n[i]] + ' ';\r\n      }\r\n      return str.replace(/\\s+/g, ' ');\r\n    },\r\n  },\r\n  cal: {\r\n    roundUpNum: function(num){\r\n      var n = num;\r\n      return Math.round((n + Number.EPSILON) * 100 ) / 100;\r\n    },\r\n  },\r\n  /**Table */\r\n  html: {\r\n    /**\r\n     * @param {HTML_TAG_NAME} tagName e.g td supply valid html tag only\r\n     * @param {String} className checked if content of td is numeric then append className\r\n     * @returns void\r\n     */\r\n    appendClassNameNUM_Content: function(tagName = \"\", className = \"\") {\r\n      let el = document.getElementsByTagName(tagName);\r\n      for(let i = 0; i < el.length; i++){\r\n        if(KNT.validateField.checkNumber(el[i].innerHTML)){\r\n          let cName = KNT.string.replaceWord(el[i].className, whitespace, \",\")\r\n          let classArr = KNT.string.stringCommaToArray(cName, \",\")\r\n          if(!classArr.includes(className)){\r\n            el[i].className +=  \" \" + className;\r\n          }\r\n        }\r\n      }\r\n    },\r\n    appendClassNameToTagByTagName: function(attrName, className){\r\n      let el = document.getElementsByName(attrName);\r\n      for(let i = 0; i < el.length; i++){\r\n        let cName = KNT.string.replaceWord(el[i].className, whitespace, \",\")\r\n        let classArr = KNT.string.stringCommaToArray(cName, \",\")\r\n        if(!classArr.includes(className)){\r\n          el[i].className +=  \" \" + className;\r\n        }\r\n      }      \r\n    },\r\n    // appendClassNameToTagByTag: function(attrName, className){\r\n    //   let el = document.getElementsByTa(attrName);\r\n    //   for(let i = 0; i < el.length; i++){\r\n    //     let cName = KNT.string.replaceWord(el[i].className, whitespace, \",\")\r\n    //     let classArr = KNT.string.stringCommaToArray(cName, \",\")\r\n    //     if(!classArr.includes(className)){\r\n    //       el[i].className +=  \" \" + className;\r\n    //     }\r\n    //   }      \r\n    // } \r\n  }\r\n};\r\n\r\n\r\n\r\n\r\n\r\n\r\n/**\r\n * KNT VERSION 2.0\r\n * end\r\n */\r\n\r\nexport const kntCase = {\r\n  lowerCase: 'lowerCase',\r\n  upperCase: 'upperCase',\r\n  titleCase: 'titleCase',\r\n};\r\n\r\n//   export const formatDate = (date, format) => {\r\n//     const map = {\r\n//         mm: date.getMonth() + 1,\r\n//         MM: date.getMonth() + 1,\r\n//         dd: date.getDate(),\r\n//         DD: date.getDate(),\r\n//         yy: date.getFullYear().toString(),\r\n//         yyyy: date.getFullYear(),\r\n//         YYYY: date.getFullYear()\r\n//     }\r\n\r\n//     return format.replace(/mm|dd|yyyy|MM|DD|YYYY/gi, matched => map[matched])\r\n// }\r\n\r\nconst dateAndCountryDateFormat = [\r\n  {\r\n    country: 'Albania',\r\n    data: { short: 'yyyy-MM-dd', long: 'yyyy-MMMM-dd' },\r\n  },\r\n  {\r\n    country: 'United Arab Emirates',\r\n    data: { short: 'dd/MM/yyyy', long: 'dd/MMMM/yyyy' },\r\n  },\r\n  {\r\n    country: 'Argentina',\r\n    data: { short: 'dd/MM/yyyy', long: 'dd/MMMM/yyyy' },\r\n  },\r\n  {\r\n    country: 'Australia',\r\n    data: { short: 'd/MM/yyyy', long: 'dd/MMMM/yyyy' },\r\n  },\r\n  {\r\n    country: 'Austria',\r\n    data: { short: 'd.MM.yyyy', long: 'dd.MMMM.yyyy' },\r\n  },\r\n  {\r\n    country: 'Belgium',\r\n    data: { short: 'd/MM/yyyy', long: 'dd/MMMM/yyyy' },\r\n  },\r\n  {\r\n    country: 'Bulgaria',\r\n    data: { short: 'yyyy-MM-d', long: 'yyyy-MMMM-dd' },\r\n  },\r\n  {\r\n    country: 'Bahrain',\r\n    data: { short: 'dd/MM/yyyy', long: 'dd/MMMM/yyyy' },\r\n  },\r\n  {\r\n    country: 'Bosnia and Herzegovina',\r\n    data: { short: 'yyyy-MM-dd', long: 'yyyy-MMMM-dd' },\r\n  },\r\n  {\r\n    country: 'Belarus',\r\n    data: { short: 'd.M.yyyy', long: 'dd.MMMM.yyyy' },\r\n  },\r\n  {\r\n    country: 'Bolivia',\r\n    data: { short: 'd-MM-yyyy', long: 'dd-MMMM-yyyy' },\r\n  },\r\n  {\r\n    country: 'Brazil',\r\n    data: { short: 'dd/MM/yyyy', long: 'dd/MMMM/yyyy' },\r\n  },\r\n  {\r\n    country: 'Canada',\r\n    data: { short: 'yyyy-MM-dd', long: 'yyyy-MMMM-dd' },\r\n  },\r\n  {\r\n    country: 'Canada',\r\n    data: { short: 'dd/MM/yyyy', long: 'dd/MMMM/yyyy' },\r\n  },\r\n  {\r\n    country: 'Switzerland',\r\n    data: { short: 'dd.MM.yyyy', long: 'dd.MMMM.yyyy' },\r\n  },\r\n  {\r\n    country: 'Chile',\r\n    data: { short: 'dd-MM-yyyy', long: 'dd-MMMM-yyyy' },\r\n  },\r\n  {\r\n    country: 'China',\r\n    data: { short: 'yyyy-M-d', long: 'yyyy-MMMM-dd' },\r\n  },\r\n  {\r\n    country: 'Colombia',\r\n    data: { short: 'd/MM/yyyy', long: 'dd/MMMM/yyyy' },\r\n  },\r\n  {\r\n    country: 'Costa Rica',\r\n    data: { short: 'dd/MM/yyyy', long: 'dd/MMMM/yyyy' },\r\n  },\r\n  {\r\n    country: 'Cyprus',\r\n    data: { short: 'dd/MM/yyyy', long: 'dd/MMMM/yyyy' },\r\n  },\r\n  {\r\n    country: 'Czech Republic',\r\n    data: { short: 'd.M.yyyy', long: 'dd.MMMM.yyyy' },\r\n  },\r\n  {\r\n    country: 'Germany',\r\n    data: { short: 'dd.MM.yyyy', long: 'dd.MMMM.yyyy' },\r\n  },\r\n  {\r\n    country: 'Denmark',\r\n    data: { short: 'dd-MM-yyyy', long: 'dd-MMMM-yyyy' },\r\n  },\r\n  {\r\n    country: 'Dominican Republic',\r\n    data: { short: 'MM/dd/yyyy', long: 'MMMM/dd/yyyy' },\r\n  },\r\n  {\r\n    country: 'Algeria',\r\n    data: { short: 'dd/MM/yyyy', long: 'dd/MMMM/yyyy' },\r\n  },\r\n  {\r\n    country: 'Ecuador',\r\n    data: { short: 'dd/MM/yyyy', long: 'dd/MMMM/yyyy' },\r\n  },\r\n  {\r\n    country: 'Egypt',\r\n    data: { short: 'dd/MM/yyyy', long: 'dd/MMMM/yyyy' },\r\n  },\r\n  {\r\n    country: 'Spain',\r\n    data: { short: 'd/MM/yyyy', long: 'dd/MMMM/yyyy' },\r\n  },\r\n  {\r\n    country: 'Spain',\r\n    data: { short: 'dd/MM/yyyy', long: 'dd/MMMM/yyyy' },\r\n  },\r\n  {\r\n    country: 'Estonia',\r\n    data: { short: 'd.MM.yyyy', long: 'dd.MMMM.yyyy' },\r\n  },\r\n  {\r\n    country: 'Finland',\r\n    data: { short: 'd.M.yyyy', long: 'dd.MMMM.yyyy' },\r\n  },\r\n  {\r\n    country: 'France',\r\n    data: { short: 'dd/MM/yyyy', long: 'dd/MMMM/yyyy' },\r\n  },\r\n  {\r\n    country: 'United Kingdom',\r\n    data: { short: 'dd/MM/yyyy', long: 'dd/MMMM/yyyy' },\r\n  },\r\n  {\r\n    country: 'Greece',\r\n    data: { short: 'd/M/yyyy', long: 'dd/MMMM/yyyy' },\r\n  },\r\n  {\r\n    country: 'Guatemala',\r\n    data: { short: 'd/MM/yyyy', long: 'dd/MMMM/yyyy' },\r\n  },\r\n  {\r\n    country: 'Hong Kong',\r\n    data: { short: 'yyyy年M月d日', long: 'yyyy年M月d日' },\r\n  },\r\n  {\r\n    country: 'Honduras',\r\n    data: { short: 'MM-dd-yyyy', long: 'MMMM-dd-yyyy' },\r\n  },\r\n  {\r\n    country: 'Croatia',\r\n    data: { short: 'dd.MM.yyyy', long: 'dd.MMMM.yyyy' },\r\n  },\r\n  {\r\n    country: 'Hungary',\r\n    data: { short: 'yyyy.MM.dd', long: 'yyyy.MMMM.dd' },\r\n  },\r\n  {\r\n    country: 'Indonesia',\r\n    data: { short: 'dd/MM/yyyy', long: 'dd/MMMM/yyyy' },\r\n  },\r\n  {\r\n    country: 'India',\r\n    data: { short: '३/६/१२', long: '३/६/१२' },\r\n  },\r\n  {\r\n    country: 'India',\r\n    data: { short: 'd/M/yyyy', long: 'dd/MMMM/yyyy' },\r\n  },\r\n  {\r\n    country: 'Ireland',\r\n    data: { short: 'dd/MM/yyyy', long: 'dd/MMMM/yyyy' },\r\n  },\r\n  {\r\n    country: 'Ireland',\r\n    data: { short: 'dd/MM/yyyy', long: 'dd/MMMM/yyyy' },\r\n  },\r\n  {\r\n    country: 'Iraq',\r\n    data: { short: 'dd/MM/yyyy', long: 'dd/MMMM/yyyy' },\r\n  },\r\n  {\r\n    country: 'Iceland',\r\n    data: { short: 'd.M.yyyy', long: 'dd.MMMM.yyyy' },\r\n  },\r\n  {\r\n    country: 'Israel',\r\n    data: { short: 'dd/MM/yyyy', long: 'dd/MMMM/yyyy' },\r\n  },\r\n  {\r\n    country: 'Italy',\r\n    data: { short: 'dd/MM/yyyy', long: 'dd/MMMM/yyyy' },\r\n  },\r\n  {\r\n    country: 'Jordan',\r\n    data: { short: 'dd/MM/yyyy', long: 'dd/MMMM/yyyy' },\r\n  },\r\n  {\r\n    country: 'Japan',\r\n    data: { short: 'yyyy/MM/dd', long: 'yyyy/MMMM/dd' },\r\n  },\r\n  {\r\n    country: 'Japan',\r\n    data: { short: 'H24.MM.dd', long: 'H24.MM.dd' },\r\n  },\r\n  {\r\n    country: 'South Korea',\r\n    data: { short: 'yyyy.M.d', long: 'yyyy.MMMM.d' },\r\n  },\r\n  {\r\n    country: 'Kuwait',\r\n    data: { short: 'dd/MM/yyyy', long: 'dd/MMMM/yyyy' },\r\n  },\r\n  {\r\n    country: 'Lebanon',\r\n    data: { short: 'dd/MM/yyyy', long: 'dd/MMMM/yyyy' },\r\n  },\r\n  {\r\n    country: 'Libya',\r\n    data: { short: 'dd/MM/yyyy', long: 'dd/MMMM/yyyy' },\r\n  },\r\n  {\r\n    country: 'Lithuania',\r\n    data: { short: 'yyyy.M.d', long: 'yyyy.MMMM.dd' },\r\n  },\r\n  {\r\n    country: 'Luxembourg',\r\n    data: { short: 'dd.MM.yyyy', long: 'dd.MMMM.yyyy' },\r\n  },\r\n  {\r\n    country: 'Latvia',\r\n    data: { short: 'yyyy.d.M', long: 'yyyy.dd.MMMM' },\r\n  },\r\n  {\r\n    country: 'Morocco',\r\n    data: { short: 'dd/MM/yyyy', long: 'dd/MMMM/yyyy' },\r\n  },\r\n  {\r\n    country: 'Mexico',\r\n    data: { short: 'd/MM/yyyy', long: 'dd/MMMM/yyyy' },\r\n  },\r\n  {\r\n    country: 'Macedonia',\r\n    data: { short: 'd.M.yyyy', long: 'dd.MMMM.yyyy' },\r\n  },\r\n  {\r\n    country: 'Malta',\r\n    data: { short: 'dd/MM/yyyy', long: 'dd/MMMM/yyyy' },\r\n  },\r\n  {\r\n    country: 'Malta',\r\n    data: { short: 'dd/MM/yyyy', long: 'dd/MMMM/yyyy' },\r\n  },\r\n  {\r\n    country: 'Montenegro',\r\n    data: { short: 'd.M.yyyy', long: 'dd.MMMM.yyyy' },\r\n  },\r\n  {\r\n    country: 'Malaysia',\r\n    data: { short: 'dd/MM/yyyy', long: 'dd/MMMM/yyyy' },\r\n  },\r\n  {\r\n    country: 'Nicaragua',\r\n    data: { short: 'MM-dd-yyyy', long: 'MMMM-dd-yyyy' },\r\n  },\r\n  {\r\n    country: 'Netherlands',\r\n    data: { short: 'd-M-yyyy', long: 'dd-MMMM-yyyy' },\r\n  },\r\n  {\r\n    country: 'Norway',\r\n    data: { short: 'dd.MM.yyyy', long: 'dd.MMMM.yyyy' },\r\n  },\r\n  {\r\n    country: 'Norway',\r\n    data: { short: 'dd.MM.yyyy', long: 'dd.MMMM.yyyy' },\r\n  },\r\n  {\r\n    country: 'New Zealand',\r\n    data: { short: 'd/MM/yyyy', long: 'dd/MMMM/yyyy' },\r\n  },\r\n  {\r\n    country: 'Oman',\r\n    data: { short: 'dd/MM/yyyy', long: 'dd/MMMM/yyyy' },\r\n  },\r\n  {\r\n    country: 'Panama',\r\n    data: { short: 'MM/dd/yyyy', long: 'MMMM/dd/yyyy' },\r\n  },\r\n  {\r\n    country: 'Peru',\r\n    data: { short: 'dd/MM/yyyy', long: 'dd/MMMM/yyyy' },\r\n  },\r\n  {\r\n    country: 'Philippines',\r\n    data: { short: 'M/d/yyyy', long: 'MMMM/dd/yyyy' },\r\n  },\r\n  {\r\n    country: 'Poland',\r\n    data: { short: 'dd.MM.yyyy', long: 'dd.MMMM.yyyy' },\r\n  },\r\n  {\r\n    country: 'Puerto Rico',\r\n    data: { short: 'MM-dd-yyyy', long: 'MMMM-dd-yyyy' },\r\n  },\r\n  {\r\n    country: 'Portugal',\r\n    data: { short: 'dd-MM-yyyy', long: 'dd-MMMM-yyyy' },\r\n  },\r\n  {\r\n    country: 'Paraguay',\r\n    data: { short: 'dd/MM/yyyy', long: 'dd/MMMM/yyyy' },\r\n  },\r\n  {\r\n    country: 'Qatar',\r\n    data: { short: 'dd/MM/yyyy', long: 'dd/MMMM/yyyy' },\r\n  },\r\n  {\r\n    country: 'Romania',\r\n    data: { short: 'dd.MM.yyyy', long: 'dd.MMMM.yyyy' },\r\n  },\r\n  {\r\n    country: 'Russia',\r\n    data: { short: 'dd.MM.yyyy', long: 'dd.MMMM.yyyy' },\r\n  },\r\n  {\r\n    country: 'Saudi Arabia',\r\n    data: { short: 'dd/MM/yyyy', long: 'dd/MMMM/yyyy' },\r\n  },\r\n  {\r\n    country: 'Serbia and Montenegro',\r\n    data: { short: 'd.M.yyyy', long: 'dd.MMMM.yyyy' },\r\n  },\r\n  {\r\n    country: 'Sudan',\r\n    data: { short: 'dd/MM/yyyy', long: 'dd/MMMM/yyyy' },\r\n  },\r\n  {\r\n    country: 'Singapore',\r\n    data: { short: 'dd/MM/yyyy', long: 'dd/MMMM/yyyy' },\r\n  },\r\n  {\r\n    country: 'Singapore',\r\n    data: { short: 'M/d/yyyy', long: 'MMMM/dd/yyyy' },\r\n  },\r\n  {\r\n    country: 'El Salvador',\r\n    data: { short: 'MM-dd-yyyy', long: 'MMMM-dd-yyyy' },\r\n  },\r\n  {\r\n    country: 'Serbia',\r\n    data: { short: 'd.M.yyyy', long: 'dd.MMMM.yyyy' },\r\n  },\r\n  {\r\n    country: 'Slovakia',\r\n    data: { short: 'd.M.yyyy', long: 'dd.MMMM.yyyy' },\r\n  },\r\n  {\r\n    country: 'Slovenia',\r\n    data: { short: 'd.M.yyyy', long: 'dd.MMMM.yyyy' },\r\n  },\r\n  {\r\n    country: 'Sweden',\r\n    data: { short: 'yyyy/MM/dd', long: 'yyyy/MMMM/dd' },\r\n  },\r\n  {\r\n    country: 'Syria',\r\n    data: { short: 'dd/MM/yyyy', long: 'dd/MMMM/yyyy' },\r\n  },\r\n  {\r\n    country: 'Thailand',\r\n    data: { short: 'd/M/2555', long: 'dd/MMMM/2555' },\r\n  },\r\n  {\r\n    country: 'Thailand',\r\n    data: { short: '๓/๖/๒๕๕๕', long: '๓/๖/๒๕๕๕' },\r\n  },\r\n  {\r\n    country: 'Tunisia',\r\n    data: { short: 'dd/MM/yyyy', long: 'dd/MMMM/yyyy' },\r\n  },\r\n  {\r\n    country: 'Turkey',\r\n    data: { short: 'dd.MM.yyyy', long: 'dd.MMMM.yyyy' },\r\n  },\r\n  {\r\n    country: 'Taiwan',\r\n    data: { short: 'yyyy/M/d', long: 'yyyy/MMMM/dd' },\r\n  },\r\n  {\r\n    country: 'Ukraine',\r\n    data: { short: 'dd.MM.yyyy', long: 'dd.MMMM.yyyy' },\r\n  },\r\n  {\r\n    country: 'Uruguay',\r\n    data: { short: 'dd/MM/yyyy', long: 'dd/MMMM/yyyy' },\r\n  },\r\n  {\r\n    country: 'United States',\r\n    data: { short: 'M/d/yyyy', long: 'MMMM/dd/yyyy' },\r\n  },\r\n  {\r\n    country: 'United States',\r\n    data: { short: 'M/d/yyyy', long: 'MMMM/dd/yyyy' },\r\n  },\r\n  {\r\n    country: 'Venezuela',\r\n    data: { short: 'dd/MM/yyyy', long: 'dd/MMMM/yyyy' },\r\n  },\r\n  {\r\n    country: 'Vietnam',\r\n    data: { short: 'dd/MM/yyyy', long: 'dd/MMMM/yyyy' },\r\n  },\r\n  {\r\n    country: 'Yemen',\r\n    data: { short: 'dd/MM/yyyy', long: 'dd/MMMM/yyyy' },\r\n  },\r\n  {\r\n    country: 'South Africa',\r\n    data: { short: 'yyyy/MM/dd', long: 'yyyy/MMMM/dd' },\r\n  },\r\n];\r\n","import { KNT } from \"../../../dependencies/js/knt\"\r\n\r\n\r\nexport const basic = {\r\n    appName: \"Voting System\",\r\n    appLogo: <h1>E-VOTING</h1>,\r\n    admin: {\r\n        username: \"KNT\",\r\n        password: \"pass\",\r\n        firstName: \"\",\r\n        lastName: \"\",\r\n        email: \"\",\r\n        phone: \"\",\r\n        gender: \"\"\r\n    },\r\n    developer: \"\",\r\n    company: \"Olomola Isaac adeyemi\",\r\n    yearOfProduction: 2021\r\n}\r\n\r\nexport const basicJSX = {\r\n    footer:  <div className=\"footer\"><i>(c) 2021. All Right Reserved.  {KNT.string.titleCase(basic.company)} <small> {basic.developer}</small> </i></div> ,\r\n    poweredBy: <div className='powered-div'>Powered By JPC Web Stack</div> \r\n}","import React, { CSSProperties, MouseEvent } from 'react'\r\nimport './Button.css'\r\n\r\n\r\nexport interface ButtonProps {\r\n\tchildren?: React.ReactNode;\r\n\tonClick?: (e: MouseEvent<HTMLButtonElement>) => void;\r\n    label?: string;\r\n    loading?: boolean;\r\n    loadingIcon?: React.ReactNode;\r\n    active?: boolean;\r\n    disabled?: boolean;\r\n    type?: string | undefined;\r\n    // field: Array<any>\r\n    icon?: React.ReactNode;\r\n    className?: string;\r\n    style?: CSSProperties;\r\n    tag?: string;\r\n}\r\n\r\n\r\nexport const Button: React.FC<ButtonProps> = props => {\r\n\r\n    const handleClick = (e: MouseEvent<HTMLButtonElement>) => {\r\n        if(!props.loading && props.active){\r\n            props.onClick && props.onClick(e);\r\n        } else if(props.active === undefined) {\r\n            props.onClick && props.onClick(e);\r\n        }\r\n    }\r\n    \r\n\r\n    const tag = props.tag !== undefined? ((props.tag === \"c\" || props.tag === \"cancel\")? \"cancel-btn\": \"\"): \"\";\r\n\r\n    // type TButtonType = \"button\" | \"reset\" | \"submit\";\r\n    // const btnType: TButtonType = props.type !== undefined? props.type: 'button';\r\n\r\n    const disable = props.active !== undefined? (!props.active) : (props.disabled !== undefined? props.disabled: false);\r\n\r\n\r\n    return (\r\n        tag === \"cancel-btn\"?\r\n        <button style={props.style} type=\"button\" onClick={handleClick} disabled={disable}  className={[\r\n            props.loading?\" button-load\": \"cancel-btn\",\r\n             \" button \",\r\n            props.className\r\n        ].join(\" \")}>\r\n            {props.loading? (props.loadingIcon? props.loadingIcon: loadingAnim()) : null}\r\n            {props.label? props.label : (props.children? props.children: null)}\r\n            <span>{props.icon}</span>\r\n        </button>\r\n        :\r\n        <button style={props.style}  onClick={handleClick} disabled={disable}  className={[\r\n            (props.active !== undefined? props.active: true)? \" button-active\": props.loading?\" button-load\": \" button-inactive\", \r\n            \" button \",\r\n            props.className\r\n        ].join(\" \")}>\r\n            {props.loading? (props.loadingIcon? props.loadingIcon: loadingAnim()) : null}\r\n            {props.label? props.label : (props.children? props.children: null)}\r\n            <span>{props.icon}</span>\r\n        </button>\r\n    )\r\n}\r\n\r\n\r\nexport default Button;\r\n\r\n\r\nconst loadingAnim = () => {\r\n    const loading = true;\r\n    return (\r\n        <span style={{display: \"inline\", marginRight: \"20px\"}}>\r\n            <span \r\n                className={[\r\n                    \"loadingio-spinner-ripple-nh4uy9grwwb\",\r\n                    loading ? \"button-loading\" : \"\",\r\n                ].join(\" \")}\r\n            >\r\n                <div className=\"ldio-37yklr482oa\">\r\n                    <div></div>\r\n                    <div></div>\r\n                </div>\r\n            </span>\r\n        </span>\r\n    )\r\n}","import React, { useEffect, useState } from \"react\";\r\nimport { KNT } from \"../js/knt\";\r\nimport \"./TileSelect.css\";\r\n\r\nfunction TileSelect({onSelect, data = [], name, prevData = [], renderKey=\"\", valueKey=\"\", all = false, count = 0, countFunc = () => {}}) {\r\n  const active = \"tile-select-active\";\r\n  const inactive = \"tile-select-inactive\";\r\n\r\n  count = data.length;\r\n\r\n  const [select, setSelect] = useState([]);\r\n  const [allItem, setAllItem] = useState(false);\r\n\r\n  const [baseData, setBaseData] = useState([]);\r\n\r\n  const onClick = (e) => {\r\n    const { value, name } = e.target;\r\n    console.log(\"ROL\", name, value, valueKey, renderKey, count, select)\r\n    if(name === \"all\"){\r\n      if(count !== undefined && !isNaN(count)){\r\n        \r\n        let temp = KNT.array.getValuesArrayByKey(baseData, \"value\");\r\n        if(temp.length < count){\r\n          setAllItem(!allItem)\r\n          markAll(!allItem, valueKey);\r\n        } else {\r\n          if(countFunc){countFunc()}\r\n        }\r\n\r\n      } else {\r\n        setAllItem(!allItem)\r\n        markAll(!allItem, valueKey);\r\n      }\r\n    }else if(select.includes(value)){\r\n        const newData = KNT.array.remove(value, select)\r\n        setSelect(newData);\r\n    } else {\r\n      if(count !== undefined && !isNaN(count)){\r\n        if(select.length < count){\r\n          setSelect(select.concat(value));\r\n        } else {\r\n          if(countFunc){countFunc()}\r\n        }\r\n      } else { \r\n        setSelect(select.concat(value));\r\n      }\r\n    }\r\n  };\r\n\r\n\r\n  useEffect(() => {\r\n     if(onSelect !== undefined) {onSelect({target: {name: name? name: \"name\", value: select}})};\r\n  }, [select]);\r\n  \r\n\r\n  useEffect(() => {\r\n      setBaseData(data)\r\n\r\n      if(select.length < data.length){\r\n          setAllItem(false);\r\n        } else {\r\n          setAllItem(true);\r\n      }\r\n    }, [data, select]);\r\n    \r\n\r\n  \r\n  useEffect(() => {\r\n    if(prevData !== undefined){\r\n        console.log(prevData)\r\n        setSelect([...prevData])\r\n    } else {\r\n        setSelect([])\r\n    }\r\n  }, [])\r\n\r\n\r\n\r\n\r\n    const markAll = (checked, valueKey) => {\r\n        let temp = KNT.array.getValuesArrayByKey(baseData, valueKey);\r\n        if(checked){\r\n            setSelect(temp);\r\n        } else {\r\n            setSelect([]);\r\n        }\r\n    }\r\n\r\n    const valueChecker = (val, key1 = \"value\", key2 = \"name\") => {\r\n      if(typeof val === \"string\") {\r\n        return val;\r\n      } else if(typeof val === \"object\") {\r\n        return val[key1]? val[key1]: val[key2];\r\n      } else return \"ok\"\r\n    };\r\n\r\n\r\n    const activeStyle = (item) =>  {\r\n      const val = valueChecker(item, valueKey, renderKey)+\"\";\r\n      if(select.includes(val)){\r\n        return active;\r\n      } else return inactive\r\n    }\r\n\r\n  return (\r\n    <div className=\"title-select-parent\">\r\n        {\r\n            all? \r\n            <button\r\n            type=\"button\"\r\n            onClick={onClick}\r\n            name=\"all\"\r\n            value={all}\r\n            className={`${allItem? active : inactive}  ${\" tile-select\"}`}\r\n            >\r\n            all\r\n            </button>\r\n            : null\r\n        }\r\n      {baseData.map((x, i) => (\r\n        <button\r\n          type=\"button\"\r\n          onClick={onClick}\r\n          name={valueChecker(x, valueKey, renderKey)}\r\n          key={i}\r\n          value={valueChecker(x, valueKey, renderKey)}\r\n          className={`${activeStyle(x)}  ${\" tile-select\"}`}\r\n        >\r\n          {valueChecker(x, renderKey)}\r\n        </button>\r\n      ))}\r\n      \r\n    </div>\r\n  );\r\n}\r\n\r\nexport default TileSelect;\r\n\r\n\r\n","import { ReactElement, useState } from 'react';\r\nimport './InputField.css';\r\nimport {BsFillEyeFill, BsFillEyeSlashFill} from 'react-icons/bs';\r\nimport TileSelect from '../tileSelect/TileSelect';\r\n\r\n\r\ninterface Props {\r\n  label?: string;\r\n  name: string;\r\n  value?: string;\r\n  values?: string[];\r\n  placeholder?: string;\r\n  type?: string;\r\n  typeRender?: string;\r\n  renderKey?: string;\r\n  valueKey?: string;\r\n  id?: any;\r\n  readOnly?: boolean;\r\n  count?: number;\r\n  onChange: (e: any) => void;\r\n}\r\n\r\n\r\nexport const InputField = ({label, name, value, typeRender = \"renderInput\", id, placeholder, values, renderKey, valueKey, onChange, type, readOnly = false, count = 0}: Props) => {\r\n\r\n\r\n  const [typeV, setTypeV] = useState(type);\r\n\r\n  const [currentValue, setCurrentValue] = useState(value)\r\n\r\n\r\n  const handleChange = (e: any) => {\r\n    const {value} = e.target;\r\n    \r\n    setCurrentValue(value);\r\n    onChange && onChange(e)\r\n    \r\n    \r\n  }\r\n\r\n\r\n  const handleSelect = (res: any) => {    \r\n    setCurrentValue(res.name);\r\n    onChange && onChange(res)\r\n  }\r\n  \r\n  const tInputField =  (\r\n    <div className=\"input-field\">\r\n        <span className=\"input-label\" >{label}: </span>\r\n      <input\r\n        name={name}\r\n        id={id}\r\n        type={typeV}\r\n        value={currentValue}\r\n        readOnly={readOnly}\r\n        placeholder={placeholder}\r\n        onChange={handleChange}\r\n      ></input>\r\n      {type === \"password\"? <i className=\"input-field-eye-toggle\" onClick={() => {typeV === \"password\"? setTypeV(\"text\"): setTypeV(\"password\")}} >{typeV === \"password\"? <BsFillEyeSlashFill />: <BsFillEyeFill />}</i>: null}\r\n    </div>\r\n  );\r\n\r\n\r\n  const tRadioSelect = (\r\n    <div className=\"input-field-radio-select\">\r\n      <span className=\"input-label\" >{label}</span>\r\n      <div className=\"input-field-radio-select-child-wrapper\">\r\n      {values?.map((val, i) => (\r\n        <div className=\"input-field-radio-select-child\">\r\n          <label htmlFor={val+i} >{val}</label>\r\n            <input\r\n            id={val+i}\r\n            name={name}\r\n            type=\"radio\"\r\n            value={val}\r\n            onChange={(e) => onChange && onChange(e)}\r\n          />\r\n          </div>\r\n          ))}\r\n          </div>\r\n    </div>\r\n  )\r\n\r\n  const tileSelect = (\r\n    <div className=\"input-field-radio-select\">\r\n      <span className=\"input-label\" >{label}</span>\r\n      <div className=\"input-field-tile-select-child-wrapper\">\r\n        <TileSelect renderKey={renderKey} valueKey={valueKey} onSelect={handleSelect}  data={values}  name={name} count={values?.length || count}  />\r\n      </div>\r\n    </div>\r\n  )\r\n\r\n\r\n  interface TOption {\r\n    [key: string]: number | string\r\n  }\r\n\r\n  const arr: TOption[] | string[] = [];\r\n  const handleOptions = (array = arr, renderKey?: string, valueKey?: string): ReactElement => {\r\n    // let arr: TOption[]  = [{name:\"kk\", val: \"700\"}];\r\n    let res = [];\r\n    if ( (array.length > 0) && (typeof array[0] === \"object\") && (valueKey !== undefined) && (renderKey !== undefined)) {\r\n      for (let i = 0; i < array.length; i++) {\r\n        const val = array[i] as TOption;\r\n         res.push(<option key={i} value={val[valueKey]} label={val[renderKey] as string} />)        \r\n      }\r\n    } else {\r\n      for (let i = 0; i < array.length; i++) {\r\n        const val = array[i] as string;\r\n         res.push(<option key={i}>{val}</option>)        \r\n      }\r\n    }\r\n     return <>{res}</>;\r\n  }\r\n\r\n\r\n\r\n  const tSelect = (\r\n    <div className=\"input-field-radio-select\">\r\n      <span className=\"input-label\" >{label}</span>\r\n      <div className=\"input-field-radio-select-child-wrapper\">\r\n        <select className='input-field-select' name={name} onChange={(e) =>onChange && onChange(e)} >\r\n          <option value={\"\"}>--select--</option>\r\n          {\r\n            handleOptions(values, renderKey, valueKey)\r\n          }\r\n        </select>\r\n          </div>\r\n    </div>\r\n  )\r\n\r\n\r\n  switch (typeRender) {\r\n    case \"renderInput\": return tInputField;\r\n    case \"renderRadio\": return tRadioSelect;\r\n    case \"renderSelect\": return tSelect;\r\n    case \"renderTileSelect\": return tileSelect;\r\n    default: return <></>\r\n  }\r\n\r\n\r\n}\r\n\r\n","import React, { ReactNode, useState } from 'react'\r\nimport Button from '../button/Button'\r\nimport { InputField } from '../InputFIeld/InputField'\r\nimport './Form.css'\r\nimport { ReactElement } from 'react';\r\n\r\ninterface Props {\r\n    schema: Array<any>;\r\n    onSubmit?: (re: object) => void;    \r\n    onChange?: (e: Event) => void; \r\n    onUpdate?: (e: Event) => void; \r\n    label?: string;   \r\n    userButton?: (k: any) => ReactNode;   \r\n}\r\n\r\nexport const Form = ({schema, label, onChange, onSubmit, onUpdate, userButton }: Props) => {\r\n\r\n    const [state, setState] = useState({});\r\n\r\n\r\n    const handleChange = (e : any) => {\r\n        e.preventDefault();\r\n        const {name, value} = e.target;\r\n        \r\n        setState(pr => ({...pr, [name]: value}));\r\n\r\n        onChange && onChange(e)\r\n\r\n    }\r\n\r\n    const handleSelect = (res : any) => {\r\n        const {name, value} = res.target;\r\n        setState(pr => ({...pr, [name]: value}));\r\n        onChange && onChange(res)\r\n\r\n    }\r\n\r\n\r\n    \r\n\r\n    \r\n    return (\r\n        <div style={{width: \"100%\"}}>\r\n            <div className='form' >\r\n                {\r\n                    schema.map((x: any, i: number) => (\r\n                        x.type === \"select\"?\r\n                        (\r\n                            x.control.type === \"select\"?\r\n                            <InputField typeRender=\"renderSelect\"  values={x.values} {...x.control} name={x.name} label={x.control.label} placeholder={x.control.placeholder} onChange={handleChange} />\r\n                            :\r\n                            x.control.type === \"tileSelect\"?\r\n                            <InputField typeRender=\"renderTileSelect\"  values={x.values} {...x.control} name={x.name} label={x.control.label} placeholder={x.control.placeholder} onChange={handleSelect} />\r\n                            :\r\n                            <InputField typeRender=\"renderRadio\" values={x.values}  {...x.control} name={x.name} label={x.control.label} placeholder={x.control.placeholder} onChange={handleChange} />\r\n\r\n                        )\r\n                        :\r\n                        <InputField name={x.name} {...x.control} label={x.control.label} placeholder={x.control.placeholder} onChange={handleChange} />\r\n                    ))\r\n                }\r\n            </div>\r\n            {\r\n                userButton? userButton(state):\r\n                <Button  label={label || \"Submit\"}   onClick={() => onSubmit && onSubmit(state)} /> \r\n            }\r\n        </div>\r\n    )\r\n}\r\n\r\n\r\n\r\n\r\n/**Schema sample below */\r\n\r\nexport const schemaSample  = [\r\n    {\r\n        name: \"firstName\",\r\n        type: \"input\",\r\n        control: {\r\n            type: \"text\",\r\n            label: \"First Name\",\r\n            placeholder: \"Enter First Name\"\r\n        }\r\n    },\r\n    {\r\n        name: \"lastName\",\r\n        type: \"input\",\r\n        control: {\r\n            type: \"text\",\r\n            label: \"Last Name\",\r\n            placeholder: \"Enter Last Name\"\r\n        }\r\n    },\r\n    {\r\n        name: \"gender\",\r\n        type: \"select\",\r\n        values: [\"Male\", \"Female\"],\r\n        control: {\r\n            type: \"checkbox\",\r\n            label: \"Gender\",\r\n            placeholder: \"Gender\"\r\n        }\r\n    },\r\n    {\r\n        name: \"email\",\r\n        type: \"input\",\r\n        control: {\r\n            type: \"text\",\r\n            label: \"Email\",\r\n            placeholder: \"Supply Email\",\r\n        }\r\n    },\r\n    {\r\n        name: \"phoneNumber\",\r\n        type: \"input\",\r\n        control: {\r\n            type: \"number\",\r\n            label: \"Phone Number\",\r\n            placeholder: \"Phone Number\"\r\n        }\r\n    },\r\n    {\r\n        name: \"addressOne\",\r\n        type: \"input\",\r\n        control: {\r\n            type: \"text\",\r\n            label: \"Address\",\r\n            placeholder: \"Address\"\r\n        }\r\n    },\r\n    {\r\n        name: \"password\",\r\n        type: \"password\",\r\n        control: {\r\n            type: \"input\",\r\n            label: \"Choose A Password\",\r\n            placeholder: \"Password\"\r\n        }\r\n    },\r\n]\r\n","import axios from \"axios\";\r\nvar CryptoJS = require(\"crypto-js\");\r\nvar sha512 = require(\"crypto-js/sha512\");\r\n\r\n/**\r\n * JPC VERSION 2.0.0\r\n * \r\n * Beginning\r\n */\r\n\r\n\r\n\r\n\r\n\r\n/**\r\n * Array Operation\r\n */\r\nexport const JArray = {\r\n\r\n    randomize: (arg = []) => {\r\n        let res = [], indexes = [];\r\n        for (let i = 0; i < arg.length; i++) {\r\n            let checker = false;\r\n            do {\r\n                let index = 0;\r\n                index = Math.abs(Math.floor(Math.random() * arg.length));\r\n                if(!indexes.includes(index)) {\r\n                    indexes.push(index || 0);\r\n                    res.push(arg[index] || 0);\r\n                    checker = true;\r\n                }\r\n            } while (!checker);       \r\n        }\r\n        return res;\r\n    },\r\n\r\n    /**\r\n     * Find value in data\r\n     * @param {Array} data \r\n     * @param {Any} value \r\n     * Return true if specified value found\r\n     */\r\n    subtract: function (operand1 = [], operand2 = []) {\r\n        let res = [];\r\n        operand1.forEach(item => {\r\n            if (!operand2.includes(item)) {\r\n                res.push(item);\r\n            }\r\n        });\r\n        return res;\r\n    },\r\n    find: {\r\n        getBoolean: function (data = [], value) {\r\n            let res = false;\r\n            let type = typeof value;\r\n            if (value === \"\") {\r\n                console.error(\"You cannot search empty value, kindly supply value to search.\");\r\n            }\r\n\r\n            if (type === \"number\") {\r\n                value = parseInt(value);\r\n            }\r\n            else if (type === \"string\") {\r\n                value = value.toString();\r\n            }\r\n            else {\r\n                console.error(\"You can only search for a number or word.\");\r\n            }\r\n\r\n            data.forEach(element => {\r\n                if (element === value) {\r\n                    return res = true;\r\n                }\r\n            });\r\n            return res;\r\n        },\r\n\r\n        getIndex: function (data = [], value) {\r\n            let index;\r\n            let type = typeof value;\r\n            if (value === \"\") {\r\n                console.error(\"You cannot search empty value, kindly supply value to search.\");\r\n            }\r\n\r\n            if (type === \"number\") {\r\n                value = parseInt(value);\r\n            }\r\n            else if (type === \"string\") {\r\n                value = value.toString();\r\n            }\r\n            else {\r\n                console.error(\"You can only search for a number or word.\");\r\n            }\r\n\r\n            data.forEach(element => {\r\n                if (element === value) {\r\n                    return index = data.indexOf(element);\r\n                }\r\n            });\r\n\r\n            return index;\r\n\r\n        }\r\n    },\r\n\r\n    remove: function (data, value) {\r\n        let res = [];\r\n        let type = typeof value;\r\n        if (value === \"\") {\r\n            console.error(\"You cannot search empty value, kindly supply value to search.\");\r\n        }\r\n\r\n        if (type === \"number\") {\r\n            value = parseInt(value);\r\n        }\r\n        else if (type === \"string\") {\r\n            value = value.toString();\r\n        }\r\n        else {\r\n            console.error(\"You can only search for a number or word.\");\r\n        }\r\n\r\n        data && data.forEach(element => {\r\n            if (element !== value) {\r\n                res.push(element);\r\n            }\r\n        });\r\n\r\n        return res;\r\n    },\r\n\r\n    removeOneTime: function (data = [], value) {\r\n        let res = [];\r\n        let type = typeof value;\r\n        if (value === \"\") {\r\n            console.error(\"You cannot search empty value, kindly supply value to search.\");\r\n        }\r\n\r\n        if (type === \"number\") {\r\n            value = parseInt(value);\r\n        }\r\n        else if (type === \"string\") {\r\n            value = value.toString();\r\n        }\r\n        else {\r\n            console.error(\"You can only search for a number or word.\");\r\n        }\r\n\r\n        let watcher = [];\r\n        data.forEach(element => {\r\n            if (element !== value) {\r\n                res.push(element);\r\n            }\r\n            else {\r\n                if (JArray.find.getBoolean(watcher, element)) {\r\n                    res.push(element)\r\n                }\r\n                else watcher.push(element);\r\n            }\r\n        });\r\n\r\n        return res;\r\n    },\r\n\r\n    /**\r\n     * Add all element of array together\r\n     * @param {Array} data \r\n     * Return sum of the specified array\r\n     */\r\n    addAll: function (data = []) {\r\n        var res = 0;\r\n        for (let k = 0; k < data.length; k++) {\r\n            res += parseFloat(data[k]);\r\n        }\r\n        return res;\r\n    },\r\n\r\n    includes: function (data = [], search = [], numbers = 0) {\r\n        let temp = [];\r\n        for (let i = 0; i < data.length; i++) {\r\n            for (let j = 0; j < search.length; j++) {\r\n                if (data[i] === search[j]) {\r\n                    temp.push(data[i]);\r\n                }\r\n            }\r\n        }\r\n        if (temp.length >= numbers) {\r\n            return true\r\n        }\r\n        else return false;\r\n    },\r\n\r\n    replace: function (data = [], value, func = () => { }) {\r\n        data.forEach((element, index) => {\r\n            if (value === null) {\r\n                func(element, index);\r\n            }\r\n        });\r\n    },\r\n\r\n    getDistinct: function (data = []) {\r\n        let res = [];\r\n        data.forEach(element => {\r\n            if (!JArray.find.getBoolean(res, element)) {\r\n                res.push(element);\r\n            }\r\n        });\r\n        return res;\r\n    }\r\n}\r\n\r\n/**\r\n * Operation that deals with Array with Object {} as child\r\n */\r\nexport const JArrayObject = {\r\n    getIndexes: (arg) => {\r\n        let res = [];\r\n        for (let i = 0; i < arg.length; i++) {\r\n            res.push(i);            \r\n        }\r\n        return res;\r\n    },\r\n    randomize: {\r\n        byIndex: (arg = []) => {\r\n            let res = [];\r\n            const randKeyValues = JArray.randomize(JArrayObject.getIndexes(arg));\r\n            for (let i = 0; i < randKeyValues.length; i++) {\r\n                const element = randKeyValues[i];\r\n                res.push(arg[element]);\r\n            }\r\n            return res;\r\n        },\r\n        byKey: (arg = [{}], key=\"id\") => {\r\n            let res = [];\r\n            const keyValues = JArrayObject.getDistinctKeyValues(arg, key);\r\n            const randKeyValues = JArray.randomize(keyValues);\r\n            for (let i = 0; i < randKeyValues.length; i++) {\r\n                const element = randKeyValues[i];\r\n                res[element] = {...Object.assign({}, arg[i]), [key]: element};\r\n            }\r\n            return res;\r\n        }\r\n    },\r\n    removeObject: function (data = [], search, searchKey = \"\") {\r\n        return data.filter(obj => {return obj[searchKey] !== search});\r\n    },\r\n\r\n    search: function (data = [], value) {\r\n        let res = [];\r\n        data.forEach(element => {\r\n            for (const key in element) {\r\n                if (Array.isArray(element[key])) {\r\n                    element[key].forEach(each => {\r\n                        if (typeof each === (\"number\" || \"string\")) {\r\n                            if (each.toString().toLowerCase().includes(value.toLowerCase())) {\r\n                                if (!res.includes(element)) {\r\n                                    res.push(element);\r\n                                }\r\n                            }\r\n                        } else {\r\n                            //It's an object\r\n                            if (Array.isArray(each)) {\r\n                                //It is array\r\n                                each.forEach(item => {\r\n                                    if (item.toString().toLowerCase().includes(value.toLowerCase())) {\r\n                                        if (!res.includes(element)) {\r\n                                            res.push(element);\r\n                                        }\r\n                                    }\r\n                                });\r\n                            } else {\r\n                                //It is an object\r\n                                for (const key in each) {\r\n                                    if (each[key].toString().toLowerCase().includes(value.toLowerCase())) {\r\n                                        if (!res.includes(element)) {\r\n                                            res.push(element);\r\n                                        }\r\n                                    }\r\n                                }\r\n                            }\r\n                        }\r\n                    });\r\n                } else {\r\n                    if (element[key] && element[key].toString().toLowerCase().includes(value.toLowerCase())) {\r\n                        if (!res.includes(element)) {\r\n                            res.push(element);\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n        });\r\n        return res;\r\n    },\r\n\r\n    getKeyValues: function (data = [], key = \"\") {\r\n        let res = [];\r\n        data.forEach(element => {\r\n            res.push(element[key]);\r\n        });\r\n        return res;\r\n    },\r\n\r\n    getDistinctKeyValues: function (data = [], key = \"\") {\r\n        let res = [];\r\n        data.forEach(element => {\r\n            if (!JArray.find.getBoolean(res, element[key])) {\r\n                res.push(element[key]);\r\n            }\r\n        });\r\n        return res;\r\n    },\r\n\r\n    /**\r\n     * Copy the content in 'from' to 'to'\r\n     * @param {Array} to \r\n     * @param {Array} from \r\n     * Return true if the process is completed\r\n     */\r\n    copy: function (to = [], from = []) {\r\n        from.forEach(element => {\r\n            for (const key in element) {\r\n                to[element][key] = from[element][key];\r\n            }\r\n        });\r\n        return true;\r\n    },\r\n\r\n    /**\r\n     * Search through array that has objects as children\r\n     */\r\n    find: {\r\n        /**\r\n         * Search through the array\r\n         * @param {Array} data \r\n         * @param {Any} value \r\n         * @param {String} specifiedKey \r\n         * Return true if found\r\n         */\r\n        getBoolean: function (data = [], value, specifiedKey = \"\") {\r\n            let res = false;\r\n            let type = typeof value;\r\n            if (value === undefined) {\r\n                return res;\r\n            }\r\n            if (specifiedKey === \"\") {\r\n                console.error(\"You cannot search empty value, kindly supply value to search.\");\r\n            }\r\n\r\n            if (type === \"number\") {\r\n                value = parseInt(value);\r\n            }\r\n            else if (type === \"string\") {\r\n                value = value.toString();\r\n            }\r\n            else {\r\n                console.error(\"You can only search for a number or word.\");\r\n            }\r\n\r\n            data.forEach(element => {\r\n                if (specifiedKey !== \"\") {\r\n                    if (type === \"string\") {\r\n                        if (JContent.equalsIgnoreCase(element[specifiedKey], value)) {\r\n                            return res = true;\r\n                        }\r\n                    }\r\n                    else {\r\n                        if (element[specifiedKey] === value) {\r\n                            return res = true;\r\n                        }\r\n                    }\r\n                }\r\n                else {\r\n                    for (const k in element) {\r\n                        if (type === \"string\") {\r\n                            if (JContent.equalsIgnoreCase(element[k], value)) {\r\n                                return res = true;\r\n                            }\r\n                        }\r\n                        else {\r\n                            if (element[k] === value) {\r\n                                return res = true;\r\n                            }\r\n                        }\r\n                    }\r\n                }\r\n            });\r\n            return res;\r\n        },\r\n\r\n        /**\r\n         * Search through the array\r\n         * @param {Array} data \r\n         * @param {Any} value \r\n         * @param {String} specifiedKey \r\n         * Return the index of the search\r\n         */\r\n        getIndex: function (data = [], value, specifiedKey = \"\") {\r\n            let index;\r\n            let type = typeof value;\r\n            if (value === \"\") {\r\n                console.error(\"You cannot search empty value, kindly supply value to search.\");\r\n            }\r\n\r\n            if (type === \"number\") {\r\n                value = parseInt(value);\r\n            }\r\n            else if (type === \"string\") {\r\n                value = value.toString();\r\n            }\r\n            else {\r\n                console.error(\"You can only search for a number or word.\");\r\n            }\r\n\r\n            data.forEach(element => {\r\n                if (specifiedKey !== \"\") {\r\n                    if (element[specifiedKey] === value) {\r\n                        return index = data.indexOf(element);\r\n                    }\r\n                }\r\n                else {\r\n                    for (const k in element) {\r\n                        if (element[k] === value) {\r\n                            return index = data.indexOf(element);\r\n                        }\r\n                    }\r\n                }\r\n            });\r\n\r\n            return index;\r\n        },\r\n\r\n        /**\r\n         * Search through the array by the specifiedKey\r\n         * @param {Array} data \r\n         * @param {Any} value \r\n         * @param {String} specifiedKey \r\n         * @param {String} valueKey\r\n         * Return the value of the search according to the valueKey\r\n         */\r\n        getValue: function (data = [], value = \"\", specifiedKey = \"\", valueKey = \"\") {\r\n            let res;\r\n            let type = typeof value;\r\n            if (value === \"\") {\r\n                console.error(\"You cannot search empty value, kindly supply value to search.\");\r\n            }\r\n\r\n            if (type === \"number\") {\r\n                value = parseInt(value);\r\n            }\r\n            else if (type === \"string\") {\r\n                value = value.toString();\r\n            }\r\n            else {\r\n                console.error(\"You can only search for a number or word.\");\r\n            }\r\n\r\n            data.forEach(element => {\r\n                if (specifiedKey !== \"\") {\r\n                    if (element[specifiedKey] === value) {\r\n                        return res = element[valueKey];\r\n                    }\r\n                }\r\n                else {\r\n                    for (const k in element) {\r\n                        if (element[k] === value) {\r\n                            return res = element[valueKey];\r\n                        }\r\n                    }\r\n                }\r\n            });\r\n\r\n            return res;\r\n        },\r\n\r\n        /**\r\n         * Search through the array by the specifiedKey\r\n         * @param {Array} data \r\n         * @param {Any} value \r\n         * @param {String} specifiedKey \r\n         * @param {String} valueKey\r\n         * Return the value of the search according to the valueKey\r\n         */\r\n        getObject: function (rawData = [], value = \"\", specifiedKey = \"\", stepKey = []) {\r\n            const data = [...rawData]\r\n            const name = \"ARRAY OBJECT FIND.GET-OBJECT \\\\\";\r\n            let res = {};\r\n            let type = typeof value;\r\n\r\n            if (value === \"\") {\r\n                return res;\r\n            }\r\n\r\n            if (specifiedKey === \"\") {\r\n                console.warn(name + \"You cannot search empty value, kindly supply value to search.\");\r\n            }\r\n\r\n            if (type === \"number\") {\r\n                value = parseInt(value);\r\n            }\r\n            else if (type === \"string\") {\r\n                value = value.toString();\r\n            }\r\n            else {\r\n                console.error(name + \"You can only search for a number or word.\");\r\n            }\r\n\r\n            if (stepKey.length === 0) {\r\n                data.forEach(element => {\r\n                    if (specifiedKey !== \"\") {\r\n                        if (type === \"string\") {\r\n                            if (JContent.equalsIgnoreCase(element[specifiedKey], value)) {\r\n                                return res = element;\r\n                            }\r\n                        }\r\n                        else {\r\n                            if (element[specifiedKey] === value) {\r\n                                return res = element;\r\n                            }\r\n                        }\r\n                    }\r\n                    else {\r\n                        for (const k in element) {\r\n                            if (type === \"string\") {\r\n                                if (JContent.equalsIgnoreCase(element[k], value)) {\r\n                                    return res = element;\r\n                                }\r\n                            } else {\r\n                                if (element[k] === value) {\r\n                                    return res = element;\r\n                                }\r\n                            }\r\n                        }\r\n                    }\r\n                });\r\n            } else if (stepKey.length === 1) {\r\n                data.forEach(element => {\r\n                    const rows = element[stepKey[0]];\r\n                    if (Array.isArray(rows)) {\r\n                        rows.forEach(row => {\r\n                            if (specifiedKey !== \"\") {\r\n                                if (type === \"string\") {\r\n                                    if (JContent.equalsIgnoreCase(row[specifiedKey], value)) {\r\n                                        return res = row;\r\n                                    }\r\n                                }\r\n                                else {\r\n                                    if (row[specifiedKey] === value) {\r\n                                        return res = row;\r\n                                    }\r\n                                }\r\n                            }\r\n                            else {\r\n                                for (const k in row) {\r\n                                    if (type === \"string\") {\r\n                                        if (JContent.equalsIgnoreCase(row[k], value)) {\r\n                                            return res = row;\r\n                                        }\r\n                                    } else {\r\n                                        if (row[k] === value) {\r\n                                            return res = row;\r\n                                        }\r\n                                    }\r\n                                }\r\n                            }\r\n                        });\r\n                    } else {\r\n                        if (specifiedKey !== \"\") {\r\n                            if (type === \"string\") {\r\n                                if (JContent.equalsIgnoreCase(rows[specifiedKey], value)) {\r\n                                    return res = rows;\r\n                                }\r\n                            }\r\n                            else {\r\n                                if (rows[specifiedKey] === value) {\r\n                                    return res = rows;\r\n                                }\r\n                            }\r\n                        }\r\n                        else {\r\n                            for (const k in rows) {\r\n                                if (type === \"string\") {\r\n                                    if (JContent.equalsIgnoreCase(rows[k], value)) {\r\n                                        return res = rows;\r\n                                    }\r\n                                } else {\r\n                                    if (rows[k] === value) {\r\n                                        return res = rows;\r\n                                    }\r\n                                }\r\n                            }\r\n                        }\r\n                    }\r\n                });\r\n\r\n            }\r\n            return res;\r\n        },\r\n\r\n        getObjects: function (data = [], values = [], specifiedKeys = []) {\r\n            let res = [];\r\n            let checker = \"\";\r\n            for (let i = 0; i < values.length; i++) {\r\n                checker += values[i];\r\n            }\r\n            if (checker.trim() === \"\") {\r\n                return data;\r\n            }\r\n\r\n            data.forEach(element => {\r\n                let key = specifiedKeys[0];\r\n                if (element[key] === values[0] && values.length === 1) {\r\n                    res.push(element);\r\n                }\r\n                else if (element[key] === values[0] && values.length > 1) {\r\n                    key = specifiedKeys[1];\r\n                    if (element[key] === values[1] && values.length === 2) {\r\n                        res.push(element);\r\n                    } else if (element[key] === values[1] && values.length > 2) {\r\n                        key = specifiedKeys[2];\r\n                        if (element[key] === values[2]) {\r\n                            res.push(element);\r\n                        }\r\n                    }\r\n                    else if (element[key] !== values[1] && values.length > 2) {\r\n                        key = specifiedKeys[2];\r\n                        if (element[key] === values[2]) {\r\n                            res.push(element);\r\n                        }\r\n                    }\r\n                }\r\n                else if (element[key] !== values[0] && values.length > 1) {\r\n                    key = specifiedKeys[1];\r\n                    if (element[key] === values[1] && values.length === 2) {\r\n                        res.push(element);\r\n                    } else if (element[key] === values[1] && values.length > 2) {\r\n                        key = specifiedKeys[2];\r\n                        if (element[key] === values[2]) {\r\n                            res.push(element);\r\n                        }\r\n                    }\r\n                    else if (element[key] !== values[1] && values.length > 2) {\r\n                        key = specifiedKeys[2];\r\n                        if (element[key] === values[2]) {\r\n                            res.push(element);\r\n                        }\r\n                    }\r\n                }\r\n            });\r\n            return res;\r\n        }\r\n    },\r\n\r\n\r\n    /**\r\n     * Delete an object from array of objects\r\n     * @param {Array} data \r\n     * @param {String} specifiedKey \r\n     * @param {Any} search \r\n     * Return filtered array\r\n     */\r\n    deleteObject: function (data, specifiedKey = \"\", search = \"\") {\r\n        let type = typeof search;\r\n        if (search === \"\") {\r\n            return data;\r\n        }\r\n        if ((search || specifiedKey) === \"\") {\r\n            console.error(\"You cannot search empty value, kindly supply value to search.\");\r\n        }\r\n        if (data === []) {\r\n            console.error(\"Data to search from cannot be empty\");\r\n        }\r\n\r\n        if (type === \"number\") {\r\n            search = parseInt(search);\r\n        }\r\n        else if (type === \"string\") {\r\n            search = search.toString();\r\n        }\r\n        else {\r\n            console.error(\"You can only search for a number or word.\");\r\n        }\r\n\r\n        // let index = this.find.getIndex(data,search,specifiedKey);\r\n        // if (index !== undefined) {\r\n        //     delete data[index];\r\n        // }\r\n        data = data.filter((each) => each[specifiedKey] !== search)\r\n        return data;\r\n    },\r\n\r\n    /**\r\n     * Replace value in data\r\n     * \r\n     * Supply replaceKey if the searchKey is not the key to replace\r\n     * @param {Array} data \r\n     * @param {String} specifiedKey \r\n     * @param {Any} search \r\n     * @param {Any} replaceValue \r\n     * @param {String} replaceKey \r\n     * Return modified data\r\n     */\r\n    replaceValue: function (data = [], searchKey = \"\", search, replaceValue, replaceKey = \"\") {\r\n        let type = typeof search;\r\n        if ((search || replaceValue || searchKey) === \"\") {\r\n            console.error(\"You cannot search empty value, kindly supply value to search.\");\r\n        }\r\n\r\n        if (type === \"number\") {\r\n            search = parseInt(search);\r\n        }\r\n        else if (type === \"string\") {\r\n            search = search.toString();\r\n        }\r\n        else {\r\n            console.error(\"You can only search for a number or word.\");\r\n        }\r\n\r\n        let index = this.find.getIndex(data, search, searchKey);\r\n        if (index !== undefined) {\r\n            if (replaceKey !== undefined || \"\") {\r\n                data[index][replaceKey] = replaceValue;\r\n            } else {\r\n                data[index][searchKey] = replaceValue;\r\n            }\r\n        }\r\n\r\n        return data;\r\n    },\r\n    /**\r\n     * Replace value(s) in data\r\n     * \r\n     * Supply replaceKey if the searchKey is not the key to replace\r\n     * @param {Array} data \r\n     * @param {String} specifiedKey \r\n     * @param {Any} search \r\n     * @param {Array} replaceValues \r\n     * @param {Array} replaceKeys \r\n     * Return modified data\r\n     */\r\n    replaceValues: function (data = [], searchKey = \"\", search, replaceValues = [], replaceKeys = []) {\r\n        let type = typeof search;\r\n        if ((search || replaceValues || searchKey) === \"\") {\r\n            console.error(\"You cannot search empty value, kindly supply value to search.\");\r\n        }\r\n\r\n        if (type === \"number\") {\r\n            search = parseInt(search);\r\n        }\r\n        else if (type === \"string\") {\r\n            search = search.toString();\r\n        }\r\n        else {\r\n            console.error(\"You can only search for a number or word.\");\r\n        }\r\n\r\n        let index = this.find.getIndex(data, search, searchKey);\r\n        if (index !== undefined) {\r\n            for (let i = 0; i < replaceKeys.length; i++) {\r\n                data[index][replaceKeys[i]] = replaceValues[i];                \r\n            }\r\n        }\r\n\r\n        return data;\r\n    },\r\n\r\n    /**\r\n     * Replace value in data\r\n     * \r\n     * Supply replaceKey if the searchKey is not the key to replace\r\n     * @param {Array} data \r\n     * @param {String} specifiedKey \r\n     * @param {Any} search \r\n     * @param {Object} replaceValue \r\n     * @param {String} replaceKey \r\n     * Return modified data\r\n     */\r\n    replaceObject: function (data = [], searchKey = \"\", search, replaceObject = {}) {\r\n        let type = typeof search;\r\n        if ((search || replaceObject || searchKey) === \"\") {\r\n            console.error(\"You cannot search empty value, kindly supply value to search.\");\r\n        }\r\n\r\n        if (type === \"number\") {\r\n            search = parseInt(search);\r\n        }\r\n        else if (type === \"string\") {\r\n            search = search.toString();\r\n        }\r\n        else {\r\n            console.error(\"You can only search for a number or word.\");\r\n        }\r\n\r\n        // let index = this.find.getIndex(data,search,searchKey);\r\n        // if (index !== undefined) {\r\n        //     data[index] = replaceObject;\r\n        // }\r\n        data.forEach((element, index) => {\r\n            if (element[searchKey] === search) {\r\n                return data[index] = replaceObject;\r\n            }\r\n        });\r\n        return data;\r\n    },\r\n\r\n    /**\r\n     * Get keys in array of objects\r\n     * @param {Array} data \r\n     * Return Array of present keys\r\n     */\r\n    getKeys: function (data, additions = []) {\r\n        var dataKey = [];\r\n        for (const key in data[0]) {\r\n            dataKey.push(key);\r\n        }\r\n        return [...additions, ...dataKey];\r\n    },\r\n    \r\n    moveKeyValue: function (data, sourceKey=[], targetKey=[]) {\r\n        let res = [];\r\n        data.forEach(element => {\r\n            for (let i = 0; i < sourceKey.length; i++) {\r\n                element[targetKey[i]] = element[sourceKey[i]];                \r\n            }\r\n            res.push(element);\r\n        });\r\n        return res;\r\n    },\r\n\r\n    /**\r\n     * Extract the objects into array according to the supplied keys\r\n     * @param {Array} data \r\n     * @param {Array} keys \r\n     * Return array of objects that includes only the specified keys\r\n     */\r\n    extractByKey: function (data = [], keys = []) {\r\n        if (data === []) {\r\n            console.error(\"Data to extract from cannot be empty\");\r\n        }\r\n\r\n        let list = [];\r\n        data.forEach(element => {\r\n            let temp = {};\r\n            for (const key in element) {\r\n                let masterKey = false;\r\n                keys.forEach(item => {\r\n                    if (JContent.equalsIgnoreCase(item, key)) {\r\n                        return masterKey = true;\r\n                    }\r\n                });\r\n\r\n                if (masterKey) {\r\n                    temp[key] = element[key];\r\n                }\r\n            }\r\n            list.push(temp);\r\n        });\r\n\r\n        return list;\r\n    },\r\n\r\n    /**\r\n     * Remove the specified keys from the object of the specified array\r\n     * @param {Array} data \r\n     * @param {Array} keys \r\n     * Return array of objects that excludes the specified keys\r\n     */\r\n    removeByKey: function (data = [], keys = []) {\r\n        if (data === []) {\r\n            console.error(\"Data to search from cannot be empty\");\r\n        }\r\n\r\n        let list = [];\r\n        data.forEach(element => {\r\n            let temp = {};\r\n            for (const key in element) {\r\n                let masterKey = true;\r\n                keys.forEach(item => {\r\n                    if (JContent.equalsIgnoreCase(item, key)) {\r\n                        return masterKey = false;\r\n                    }\r\n                });\r\n\r\n                if (masterKey) {\r\n                    temp[key] = element[key];\r\n                }\r\n            }\r\n            list.push(temp);\r\n        });\r\n\r\n        return list;\r\n    },\r\n\r\n    /**\r\n     * Check for empty value per key in array of objects\r\n     * @param {Array} data \r\n     * @param {Function} feedback \r\n     * Execute the feedback function when empty value is found\r\n     * Return true if no empty value is found\r\n     */\r\n    validate: function (data = [], feedback = () => { }, func = () => { }) {\r\n        let checker = true;\r\n        data.forEach((element, index) => {\r\n            for (const key in element) {\r\n                if (element[key] === \"\" || element[key] === undefined || element[key] === []) {\r\n                    if (feedback !== (undefined || null)) {\r\n                        feedback(`Item ${index + 1} - ${key.toUpperCase()} is required.`);\r\n                    }\r\n                    if (func !== undefined) {\r\n                        return checker = func(key + (index + 1)) || false;\r\n                    }\r\n                    return checker = false;\r\n                }\r\n            }\r\n        });\r\n        return checker;\r\n    },\r\n\r\n    /**\r\n     * Remove empty objects in array of objects\r\n     * @param {Array} data \r\n     * Return modified array\r\n     */\r\n    trim: function (data = [{}]) {\r\n        let res = [];\r\n        data.forEach(element => {\r\n            if (data[element] !== {}) {\r\n                res.push(data[element]);\r\n            }\r\n        });\r\n\r\n        return res;\r\n    },\r\n\r\n    convertKeys: {\r\n        toArray: function (data = [], keys = []) {\r\n            let res = [];\r\n            data.forEach(element => {\r\n                res.push(JObject.convertKeys.toArray(element, keys));\r\n            });\r\n\r\n            return res;\r\n        }\r\n    },\r\n\r\n    customSort: function (property = \"\", order = \"\") {\r\n        var sOrder = 1;\r\n        if (order === \"desc\") {\r\n            sOrder = -1;\r\n        }\r\n\r\n        return function (a, b) {\r\n            if (a[property] < b[property]) {\r\n                return -1 * sOrder;\r\n            }\r\n            else if (a[property] > b[property]) {\r\n                return 1 * sOrder;\r\n            }\r\n            else return 0 * sOrder;\r\n        }\r\n    },\r\n\r\n    getPercentage: function (data = [], key = \"\", keyValue, func = () => { }) {\r\n        let type = typeof keyValue === \"boolean\" ? false : true;\r\n        let counter = 0;\r\n        if (!type) {\r\n            data.forEach(element => {\r\n                if (element[key] === keyValue) {\r\n                    if (func !== undefined) {\r\n                        func(element);\r\n                    }\r\n                    counter++;\r\n                }\r\n            });\r\n        }\r\n        else {\r\n            data.forEach(element => {\r\n                keyValue.forEach(item => {\r\n                    if (element[key] === item) {\r\n                        if (func !== undefined) {\r\n                            func(element);\r\n                        }\r\n                        return counter++;\r\n                    }\r\n                });\r\n            });\r\n        }\r\n\r\n        let percentage = 0;\r\n        if (data.length > 0) {\r\n            percentage = (counter / data.length) * 100;\r\n        }\r\n\r\n        return percentage;\r\n    },\r\n\r\n    merge: function (array1 = [{}], array2 = [{}]) {\r\n        var res = [];\r\n        array1.forEach(element => {\r\n            res.push(element);\r\n        });\r\n        array2.forEach(element => {\r\n            res.push(element);\r\n        });\r\n        return res;\r\n    },\r\n\r\n    addKey: function (data = [{}], keyLabel = [], keyValue = [], index) {\r\n        if (index) {\r\n            for (let j = 0; j < keyLabel.length; j++) {\r\n                data[index][keyLabel[j]] = keyValue[j];\r\n            }\r\n        }\r\n        else {\r\n            data.forEach(element => {\r\n                for (let i = 0; i < keyLabel.length; i++) {\r\n                    element[keyLabel[i]] = keyValue[i];\r\n                }\r\n            });\r\n        }\r\n        return data;\r\n    },\r\n\r\n    replaceKey: function (data = [{}], currentKey = [\"\"], replaceKey = [\"\"]) {\r\n        data.forEach(element => {\r\n            for (const key in element) {\r\n                if (JArray.find.getBoolean(currentKey, key)) {\r\n                    const value = element[key];\r\n                    const index = currentKey.indexOf(key);\r\n                    const newKey = replaceKey[index];\r\n                    element[newKey] = value;\r\n                    delete element[key];\r\n                }\r\n            }\r\n        });\r\n    },\r\n\r\n    getDistinct: function (data = [], key) {\r\n        let res = [];\r\n        data.forEach(element => {\r\n            if (key !== undefined) {\r\n                if (!JArray.find.getBoolean(res, element[key])) {\r\n                    res.push(element[key]);\r\n                }\r\n            }\r\n            else {\r\n                if (!JArrayObject.find.getBoolean(res, element)) {\r\n                    res.push(element);\r\n                }\r\n            }\r\n        });\r\n        return res;\r\n    },\r\n\r\n    renameKey: function (data = [], key = \"\", newKey = \"\", deleteKey) {\r\n        let res = [];\r\n        // console.log(data)\r\n        if (typeof deleteKey === \"string\") {\r\n            data.forEach(element => {\r\n                let temp = Object.assign({}, element);\r\n                if (temp[deleteKey] !== undefined) {\r\n                    delete temp[deleteKey];\r\n                }\r\n                temp[newKey] = element[key];\r\n                res.push(temp);\r\n            });\r\n            return res;\r\n        } else if (typeof deleteKey === \"object\") {\r\n            data.forEach(element => {\r\n                // console.log(element);\r\n                let temp = Object.assign({}, element);\r\n\r\n                deleteKey.forEach(key => {\r\n                    if (temp[key] !== undefined) {\r\n                        delete temp[key];\r\n                    }\r\n                });\r\n\r\n                temp[newKey] = element[key];\r\n                res.push(temp);\r\n            });\r\n            return res;\r\n        }\r\n        else {\r\n            console.error(\"Invalid key. Key must be string or Array\");\r\n        }\r\n    }\r\n\r\n}\r\n\r\n/**\r\n * Object operation\r\n */\r\nexport const JObject = {\r\n\r\n    subtract: function (arg1 = {}, arg2 = {}, key= \"\") {\r\n        let res = {}, keys = Object.keys(arg2);\r\n        for (const k in arg1) {\r\n            if (!keys.includes(k)) {\r\n                res[k] = arg1[k];\r\n            }\r\n        }\r\n        return res;\r\n    },\r\n\r\n    copy: function (to = {}, from = {}) {\r\n        for (const key in from) {\r\n            to[key] = from[key];\r\n        }\r\n        return true;\r\n    },\r\n\r\n    find: {\r\n        getBoolean: function (data = {}, value) {\r\n            for (const key in data) {\r\n                if (data[key] === value) {\r\n                    return true;\r\n                }\r\n            }\r\n            return false\r\n        },\r\n        getArray: function (data = {}, value) {\r\n            let res = [];\r\n            for (const key in data) {\r\n                if (key.includes(value)) {\r\n                    res.push(key);\r\n                }\r\n            }\r\n            return res;\r\n        }\r\n    },\r\n\r\n    removeKey: function (data = {}, keys = []) {\r\n        if (data === {}) {\r\n            console.error(\"Data to search from cannot be empty\");\r\n        }\r\n\r\n        let temp = {};\r\n        for (const key in data) {\r\n            let masterKey = true;\r\n            keys.forEach(item => {\r\n                if (JContent.equalsIgnoreCase(item, key)) {\r\n                    return masterKey = false;\r\n                }\r\n            });\r\n\r\n            if (masterKey) {\r\n                temp[key] = data[key];\r\n            }\r\n        }\r\n\r\n        return temp;\r\n    },\r\n\r\n    /**\r\n     * Extract the objects into array according to the supplied keys\r\n     * @param {Object} data \r\n     * @param {Array} keys \r\n     * Return array of objects that includes only the specified keys\r\n     */\r\n    extractByKey: function (data = {}, keys = []) {\r\n        if (data === {}) {\r\n            console.error(\"Data to extract from cannot be empty\");\r\n        }\r\n\r\n        let temp = {};\r\n        for (const key in data) {\r\n            let masterKey = false;\r\n            keys.forEach(item => {\r\n\r\n                if (JContent.equalsIgnoreCase(item, key)) {\r\n                    return masterKey = true;\r\n                }\r\n            });\r\n\r\n            if (masterKey) {\r\n                temp[key] = data[key];\r\n            }\r\n        }\r\n\r\n        return temp;\r\n    },\r\n\r\n    getKeys: function (data, includes = []) {\r\n        var dataKey = [];\r\n        for (const key in data) {\r\n            if (includes.length > 0) {\r\n                includes.forEach(string => {\r\n                    if (key.includes(string)) {\r\n                        return dataKey.push(key);\r\n                    }\r\n                });\r\n            } else {\r\n                dataKey.push(key);\r\n            }\r\n        }\r\n        return dataKey;\r\n    },\r\n\r\n    getDummy: function () {\r\n        return \"\";\r\n    },\r\n\r\n    validate: function (fieldCollection, feedback = () => { }, func = () => { }) {\r\n        for (const key in fieldCollection) {\r\n\r\n            if (fieldCollection[key] === undefined || fieldCollection[key] === \"\" || fieldCollection[key].length === 0 || fieldCollection[key] === null || fieldCollection[key] === []) {\r\n                let info = `${JContent.detachString(key, \" \").toUpperCase()} is required.`;\r\n                if (feedback !== (undefined || null)) {\r\n                    feedback(info);\r\n                }\r\n                if (func !== undefined) {\r\n                    func(key, info);\r\n                }\r\n                return false;\r\n            }\r\n            else if (typeof fieldCollection[key] === \"object\" && !Array.isArray(fieldCollection[key])) {\r\n                for (const k in fieldCollection[key]) {\r\n                    if (fieldCollection[key][k] === \"\" || fieldCollection[key][k].length === 0 || fieldCollection[key][k] === undefined || fieldCollection[key][k] === null) {\r\n                        let info = `${JContent.detachString(k, \" \").toUpperCase()} is required.`;\r\n                        if (feedback !== (undefined || null)) {\r\n                            feedback(info);\r\n                        }\r\n                        if (func !== undefined) {\r\n                            func(k, info);\r\n                        }\r\n                        return false;\r\n                    }\r\n                }\r\n            }\r\n\r\n        }\r\n        return true;\r\n    },\r\n\r\n    convertKeys: {\r\n        toArray: function (data = {}, keys = []) {\r\n            var res = {};\r\n            for (const key in data) {\r\n                keys.forEach(item => {\r\n                    if (JContent.JContent.equalsIgnoreCase(key, item)) {\r\n                        res[key] = [data[key]];\r\n                    }\r\n                    else res[key] = data[key];\r\n                });\r\n            }\r\n\r\n            return res;\r\n        }\r\n    }\r\n}\r\n\r\n/**\r\n * Operation that deals with text\r\n */\r\nexport const JContent = {\r\n\r\n    JSON: {\r\n        parseJSONP: function(arg) {\r\n            var json;\r\n            json = arg.replace(\"jsonp (\", \"\");\r\n            json = json.replace(\")\", \"\");\r\n            json = JSON.parse(json);\r\n            return json;\r\n        }\r\n    },\r\n\r\n    getSelectedText: () => {\r\n        let selected = window.getSelection;\r\n        if(selected) {\r\n            selected = selected().toString();\r\n        }\r\n        else if(document.selection && document.selection.type !== \"Control\") {\r\n            selected = document.selection.createRange().text;\r\n        }\r\n        return selected;\r\n    },\r\n    backspace: (arg) => {\r\n        arg = arg+\"\";\r\n        let res = \"\";\r\n        for (let i = 0; i < arg.length-1; i++) {\r\n            res += arg[i];            \r\n        }\r\n        return res;\r\n    },\r\n    detachString: function (string = String, by = \" \") {\r\n        let res = \"\";\r\n        for (let i = 0; i < string.length; i++) {\r\n            let char = string[i];\r\n            if (/[A-Z]/.test(char) && i > 0) {\r\n                char = by + string[i];\r\n            }\r\n            res += char;\r\n        }\r\n        return res;\r\n    },\r\n\r\n    getPercentage: function (value = 0, total = 0) {\r\n        console.log(value + \"YEEEEEEE\" + parseFloat(value))\r\n        return (parseFloat(value) / parseFloat(total)) * 100;\r\n    },\r\n\r\n    trimToLowerCase: function (string = \"\") {\r\n        if (string !== null && string !== \"\") {\r\n            return string.replace(/ /g, \"\").toUpperCase();\r\n        }\r\n    },\r\n\r\n    trimToUpperCase: function (string = \"\") {\r\n        if (string !== null && string !== \"\") {\r\n            return string.replace(/ /g, \"\").toUpperCase();\r\n        }\r\n    },\r\n\r\n    trimToSentenceCase: function (string = \"\") {\r\n        if (string !== null && string !== \"\") {\r\n            return JContent.toSentenceCase(string.replace(/ /g, \"\"));\r\n        }\r\n    },\r\n\r\n    toSentenceCase: function (data = \"\") {\r\n        let res = \"\";\r\n        for (let letter = 0; letter <= data.length; letter++) {\r\n\r\n            if (letter === 0) {\r\n                res += data.charAt(letter).toUpperCase();\r\n            }\r\n            else {\r\n                res += data.charAt(letter).toLowerCase();\r\n            }\r\n        }\r\n        return res;\r\n    },\r\n\r\n    toTitleCase: function (string = \"\") {\r\n        let res = \"\";\r\n        let jump = false;\r\n        for (let i = 0; i < string.length; i++) {\r\n            if (jump) {\r\n                jump = false;\r\n                continue;\r\n            }\r\n\r\n            let char = string[i];\r\n            if (i === 0) {\r\n                char = char.toUpperCase();\r\n            }\r\n            if (char === \" \" && i + 1 < string.length) {\r\n                res += \" \" + string[i + 1].toUpperCase();\r\n                jump = true;\r\n            }\r\n            else res += char;\r\n        }\r\n        return res;\r\n    },\r\n\r\n    /**\r\n     * \r\n     * @param {*} string1 \r\n     * @param {*} string2 \r\n     */\r\n    equalsIgnoreCase: function (string1 = \"\", string2 = \"\") {\r\n        string1 = string1.toLowerCase();\r\n        string2 = string2.toLowerCase();\r\n        if (string1 === string2) {\r\n            return true;\r\n        }\r\n        return false\r\n    },\r\n\r\n    random: {\r\n        alphabet: function (length = 0) {\r\n            var chars = \"ABCDEFGHIJKLMNOPQRSTUVWSYZabcdefghijklmnopqrstuvwxyz\";\r\n            var res = \"\";\r\n            for (let i = 0; i < length; i++) {\r\n                var rnum = Math.floor(Math.random() * chars.length);\r\n                res += chars.substring(rnum, rnum + 1);\r\n            }\r\n            return res;\r\n        },\r\n\r\n        password: function (length = 0) {\r\n            var chars = \"0123456789ABCDEFGHIJKLMNOPQRSTUVWSYZabcdefghijklmnopq~!@#$%^*&()-_=+`/?/.,><':;rstuvwxyz\";\r\n            var res = \"\";\r\n            for (let i = 0; i < length; i++) {\r\n                var rnum = Math.floor(Math.random() * chars.length);\r\n                res += chars.substring(rnum, rnum + 1);\r\n            }\r\n            return res;\r\n        },\r\n\r\n        alphanumeric: function (length = 0) {\r\n            var chars = \"0123456789ABCDEFGHIJKLMNOPQRSTUVWSYZabcdefghijklmnopqrstuvwxyz\";\r\n            var res = \"\";\r\n            for (let i = 0; i < length; i++) {\r\n                var rnum = Math.floor(Math.random() * chars.length);\r\n                res += chars.substring(rnum, rnum + 1);\r\n            }\r\n            return res;\r\n        },\r\n\r\n        number: function (length = 0) {\r\n            var chars = \"0123456789\";\r\n            var res = \"\";\r\n            for (let i = 0; i < length; i++) {\r\n                var rnum = Math.floor(Math.random() * chars.length);\r\n                res += chars.substring(rnum, rnum + 1);\r\n            }\r\n            return res;\r\n        }\r\n    },\r\n\r\n    extract: function (str = \"\", start = 0, end = 0) {\r\n        let res = \"\";\r\n        for (let i = start; i <= end; i++) {\r\n            res += str[i];\r\n        }\r\n        return res;\r\n    },\r\n\r\n    remove: function (str = \"\", start = 0, end = 0) {\r\n        let res = \"\";\r\n        for (let i = start; i < str.length; i++) {\r\n            if (i > end) {\r\n                res += str[i];\r\n            }\r\n        }\r\n        return res;\r\n    },\r\n\r\n    time: {\r\n        addMM: function (time = \"\", min = 0) {\r\n            let res = \"\";\r\n            if (time.length !== 5) {\r\n                console.warn(\"Time should be 00:00 format\");\r\n            }\r\n            var HH = parseInt(JContent.extract(time, 0, 1));\r\n            var MM = parseInt(JContent.extract(time, 3, 4));\r\n            MM += min;\r\n            if (MM >= 60) {\r\n                HH += 1;\r\n                MM -= 60;\r\n                if (HH >= 24) {\r\n                    HH = 0;\r\n                }\r\n            }\r\n            HH = HH.toString();\r\n            MM = MM.toString();\r\n\r\n            if (HH.length === 1) {\r\n                HH = \"0\" + HH;\r\n            }\r\n            if (MM.length === 1) {\r\n                MM = \"0\" + MM;\r\n            }\r\n\r\n            res = HH + \":\" + MM;\r\n            return res;\r\n        },\r\n        subTT: {\r\n            getTime: function (time1 = \"\", time2 = \"\") {\r\n                let res = \"\";\r\n                if ((time1.length !== 5) || (time2.length !== 5)) {\r\n                    console.warn(\"Time should be 00:00 format\");\r\n                }\r\n                var HH1 = parseInt(JContent.extract(time1, 0, 1));\r\n                var MM1 = parseInt(JContent.extract(time1, 3, 4));\r\n                var HH2 = parseInt(JContent.extract(time2, 0, 1));\r\n                var MM2 = parseInt(JContent.extract(time2, 3, 4));\r\n                var HH = 0;\r\n                var MM = 0;\r\n\r\n                MM = MM2 - MM1;\r\n                HH = HH2 - HH1;\r\n                if (MM < 0) {\r\n                    MM = 0;\r\n                    if (HH < 0) {\r\n                        HH = 0;\r\n                    }\r\n                }\r\n\r\n                HH = HH.toString();\r\n                MM = MM.toString();\r\n\r\n                if (HH.length === 1) {\r\n                    HH = \"0\" + HH;\r\n                }\r\n                if (MM.length === 1) {\r\n                    MM = \"0\" + MM;\r\n                }\r\n\r\n                res = HH + \":\" + MM;\r\n                return res;\r\n\r\n            },\r\n            getMinute: function (time1 = \"\", time2 = \"\") {\r\n                let res = 0;\r\n                if ((time1.length !== 5) || (time2.length !== 5)) {\r\n                    console.warn(\"Time should be 00:00 format\");\r\n                }\r\n                var HH1 = parseInt(JContent.extract(time1, 0, 1));\r\n                var MM1 = parseInt(JContent.extract(time1, 3, 4));\r\n                var HH2 = parseInt(JContent.extract(time2, 0, 1));\r\n                var MM2 = parseInt(JContent.extract(time2, 3, 4));\r\n                var HH = 0;\r\n                var MM = 0;\r\n\r\n                MM = MM2 - MM1;\r\n                HH = HH2 - HH1;\r\n\r\n                res = (HH * 60) + MM;\r\n                return res;\r\n\r\n            },\r\n            getSecond: function (time1 = \"\", time2 = \"\") {\r\n                let res = 0;\r\n                if ((time1.length !== 5) || (time2.length !== 5)) {\r\n                    console.warn(\"Time should be 00:00 format\");\r\n                }\r\n                var HH1 = parseInt(JContent.extract(time1, 0, 1));\r\n                var MM1 = parseInt(JContent.extract(time1, 3, 4));\r\n                var HH2 = parseInt(JContent.extract(time2, 0, 1));\r\n                var MM2 = parseInt(JContent.extract(time2, 3, 4));\r\n                var HH = 0;\r\n                var MM = 0;\r\n\r\n                MM = MM2 - MM1;\r\n                HH = HH2 - HH1;\r\n\r\n                res = ((HH * 60) + MM) * 60;\r\n\r\n                res = HH + \":\" + MM;\r\n                return res;\r\n\r\n            }\r\n        }\r\n    },\r\n\r\n    date: {\r\n        getToday: function (separator = \"\", format = \"\") {\r\n            var d = new Date();\r\n            var dd = d.getDate().toString();\r\n            var mm = (d.getMonth() + 1).toString();\r\n            if (dd.length === 1) {\r\n                dd = \"0\" + dd;\r\n            }\r\n            if (mm.length === 1) {\r\n                mm = \"0\" + mm;\r\n            }\r\n            return `${d.getFullYear()}${separator}${mm}${separator}${dd}`;\r\n        }\r\n    },\r\n\r\n    highlight: function (innerHtml = \"\", search = \"\") {\r\n        // const rp = <mark>{search}</mark>;\r\n        // console.log(innerHtml.replace(/Term/g, rp));\r\n        // var res =  <span> {rp} </span>\r\n        return innerHtml;\r\n    },\r\n    getDocumentIds: function (doc) {\r\n        var IDs = [];\r\n        const elements = doc.querySelectorAll(\"*[id]:not([id=''])\");\r\n        for (let i = 0; i < elements.length; i++) {\r\n            const element = elements[i];\r\n            IDs.push(element.ids);\r\n        }\r\n        return IDs;\r\n    },\r\n    convert: {\r\n        ObjectToArray: function (obj = {}) {\r\n            let res = [];\r\n            for (const key in obj) {\r\n                res.push(obj[key]);\r\n            }\r\n            return res;\r\n        },\r\n        ArrayObjectToArray: function (data = []) {\r\n            let res = [];\r\n            data.forEach(obj => {\r\n                for (const key in obj) {\r\n                    res.push(obj[key]);\r\n                }\r\n            });\r\n            return res;\r\n        }\r\n    },\r\n    limit: function (text = \"\", limit = text.length, indicator = \"...\") {\r\n        let res = \"\";\r\n        for (let i = 0; i < limit; i++) {\r\n            if(text[i]){\r\n                res += text[i];\r\n            }\r\n        }\r\n        if(text.length > limit){\r\n            res += indicator;\r\n        }\r\n        return res;\r\n    },\r\n    parsing: {\r\n        Boolean: function (arg) {\r\n            return ( arg !== null && (arg === \"Yes\" || arg === \"yes\" || arg === 0 || arg === \"0\" || arg === \"true\" || arg === \"True\") )? true : false;\r\n        }\r\n    },\r\n    getPosition: function(obj) {\r\n        let left = 0, top = 0;\r\n        if(obj.offsetParent) {\r\n            do {\r\n                left += obj.offsetLeft;\r\n                top += obj.offsetTop\r\n            } while (obj = obj.offsetParent);\r\n        }\r\n        return {X: left, Y: top};\r\n    }\r\n}\r\n\r\n/**\r\n * Operation that deals with http request\r\n */\r\nexport const JHttp = {\r\n    put: function (updateAddress, id, updateData, processSucceed, processFail, params = \"\") {\r\n        //Update DB\r\n        axios.put(`${updateAddress}/${id}?${params}`, updateData).then((d) => {\r\n            return processSucceed(d.data);\r\n        }).catch(ca => {\r\n            return processFail(ca);\r\n        });\r\n    },\r\n\r\n    get: function (getAddress, dataRetrieved, dataNotRetrieve) {\r\n        axios.get(getAddress).then((data) => {\r\n            return dataRetrieved(data.data);\r\n        }).catch(error => {\r\n            if (dataNotRetrieve !== undefined) {\r\n                return dataNotRetrieve(error);\r\n            }\r\n        });\r\n    },\r\n\r\n    getSingle: function (getAddress, searchString, dataRetrieved, dataNotRetrieve) {\r\n        axios.get(`${getAddress}/${searchString}`).then((data) => {\r\n            return dataRetrieved(data.data);\r\n        }).catch((ca) => {\r\n            if (dataNotRetrieve !== undefined) {\r\n                return dataNotRetrieve(ca);\r\n            }\r\n        })\r\n    },\r\n\r\n    post: function (postAddress, formData, processSucceed, processFail) {\r\n        //Post to DB\r\n        axios.post(postAddress, formData).then((d) => {\r\n            return processSucceed(d.data);\r\n        }).catch((ca) => {\r\n            if (processFail !== undefined) {\r\n                return processFail(ca);\r\n            }\r\n        });\r\n    },\r\n\r\n    request: function (postAddress, processSucceed, processFail) {\r\n        //Post to DB\r\n        axios.request(postAddress).then((d) => {\r\n            return processSucceed(d.data);\r\n        }).catch((ca) => {\r\n            if (processFail !== undefined) {\r\n                return processFail(ca);\r\n            }\r\n        });\r\n    },\r\n\r\n    check: function (getAddress, searchString, ifSearchStringIsEmpty, dataNotExist, dataExist, processFail) {\r\n        if (searchString !== \"\") {\r\n            // Check for existence in DB\r\n            axios.get(`${getAddress}/${searchString}`).then((d) => {\r\n                if ((d.data) == null) {\r\n                    //Proceed\r\n                    return dataNotExist();\r\n                }\r\n                else {\r\n                    return dataExist();\r\n                }\r\n            }).catch((ca) => {\r\n                //Error Info\r\n                return processFail(ca);\r\n            });\r\n        }\r\n        else {\r\n            return ifSearchStringIsEmpty();\r\n        }\r\n    },\r\n\r\n    indexedDB: {\r\n        save: function (DBName = \"\", DBVersion = 0, data, dataType = \"\", key = \"\", DBType = \"readwrite\", onError, onSuccess) {\r\n            // In the following line, you should include the prefixes of implementations you want to test.\r\n            window.indexedDB = window.indexedDB || window.mozIndexedDB || window.webkitIndexedDB || window.msIndexedDB;\r\n            // DON'T use \"var indexedDB = ...\" if you're not in a function.\r\n            // Moreover, you may need references to some window.IDB* objects:\r\n            window.IDBTransaction = window.IDBTransaction || window.webkitIDBTransaction || window.msIDBTransaction || { READ_WRITE: \"readwrite\" }; // This line should only be needed if it is needed to support the object's constants for older browsers\r\n            window.IDBKeyRange = window.IDBKeyRange || window.webkitIDBKeyRange || window.msIDBKeyRange;\r\n            // (Mozilla has never prefixed these objects, so we don't need window.mozIDB*)\r\n            if (!window.indexedDB) {\r\n                console.log(\"Your browser doesn't support a stable version of IndexedDB. Such and such feature will not be available.\");\r\n            }\r\n\r\n            var request = window.indexedDB.open(DBName, DBVersion);\r\n            request.onerror = function (e) {\r\n                if (onError) {\r\n                    onError(e);\r\n                }\r\n            }\r\n\r\n            request.onupgradeneeded = function (e) {\r\n                var db = e.target.result;\r\n                var objStore = db.createObjectStore(key, { autoIncrement: true });\r\n\r\n                switch (dataType) {\r\n                    case \"array\":\r\n                        data.forEach(element => {\r\n                            objStore.add(element);\r\n                        });\r\n                        break;\r\n                    case \"object\":\r\n                        objStore.add(data);\r\n                        break;\r\n                    default:\r\n                        break;\r\n                }\r\n            }\r\n            request.onsuccess = function (e) {\r\n                var db = e.target.result;\r\n                var transaction = db.transaction([key], DBType);\r\n                var objStore = transaction.objectStore(key);\r\n\r\n                switch (dataType) {\r\n                    case \"array\":\r\n                        data.forEach(element => {\r\n                            objStore.add(element);\r\n                        });\r\n                        break;\r\n                    case \"object\":\r\n                        objStore.add(data);\r\n                        break;\r\n                    default:\r\n                        break;\r\n                }\r\n\r\n                if (onSuccess) {\r\n                    onSuccess(e);\r\n                }\r\n            }\r\n\r\n        }\r\n    }\r\n}\r\n\r\n/**\r\n * Validation process\r\n */\r\nexport const JValidate = {\r\n    digitRestriction: function (value = 0, totalSum = 0, length = 0) {\r\n        value = parseInt(value);\r\n        if ((value <= totalSum) && (value.toString().length <= length)) {\r\n            return value;\r\n        }\r\n        else return 0;\r\n    },\r\n    singleExtraField: function (data, extraFieldName, extraCount, feedback, feedbackMsg) {\r\n        for (let index = 0; index <= extraCount; index++) {\r\n            if (index === 0) {\r\n                index = \"\";\r\n            }\r\n            if (data[extraFieldName + index] === \"\") {\r\n                if (feedback !== undefined) {\r\n                    feedback(feedbackMsg);\r\n                }\r\n                return false;\r\n            }\r\n        }\r\n        return true;\r\n    },\r\n\r\n    arrayObject: function (data = [], feedback = () => { }) {\r\n        let checker = true;\r\n        data.forEach((element, index) => {\r\n            for (const key in element) {\r\n                if (element[key] === \"\" || element[key] === undefined) {\r\n                    if (feedback !== undefined) {\r\n                        feedback(`Item ${index + 1} - ${key.toUpperCase()} is required.`);\r\n                    }\r\n                    return checker = false;\r\n                }\r\n            }\r\n        });\r\n        return checker;\r\n    },\r\n\r\n    object: function (fieldCollection, feedback) {\r\n        for (const key in fieldCollection) {\r\n\r\n            /**if a field is found empty bring up the danger typed closeables. */\r\n            if (fieldCollection[key] === \"\" || fieldCollection[key].length === 0 || fieldCollection[key] === undefined) {\r\n                feedback(`${key.toUpperCase()} is required.`);\r\n                return false;\r\n            }\r\n\r\n        }\r\n        /**this line is important */\r\n        return true;\r\n    },\r\n\r\n    event: function (type, val) {\r\n\r\n        if (type === \"text\") {\r\n            return false;\r\n        }\r\n        else if (type === \"tel\") {\r\n            return false;\r\n        }\r\n        else if (type === \"email\") {\r\n            return false;\r\n        }\r\n        else if (type === \"name\") {\r\n            return false;\r\n        }\r\n        else if (type === \"password\") {\r\n            var str = val;\r\n            var letterCount = 0, numCount = 0;\r\n            for (let i = 0; i < str.length; i++) {\r\n                var ch = str.charAt(i);\r\n                if (isNaN(ch)) {\r\n                    letterCount = letterCount + 1;\r\n                }\r\n                else {\r\n                    numCount = numCount + 1;\r\n                }\r\n            }\r\n            if ((letterCount && numCount) >= 3) {\r\n                return true;\r\n            }\r\n            else {\r\n                return false;\r\n            }\r\n\r\n        }\r\n        else {\r\n            return false;\r\n        }\r\n    }\r\n}\r\n\r\n/**\r\n * Filtering process\r\n */\r\nexport const JFilter = {\r\n    event: function (e) {\r\n        if ((e.target.dataset.type === undefined) && (e.target.type === undefined)) {\r\n\r\n            return console.log(\"Filtering Failed!!! \\n\\nKindly set [data-type] or [type] attribute in your input field. \\n\\n [data-type] can only take text,tel,email,name,username.\");\r\n        }\r\n        else {\r\n            if (e.target.dataset.type !== undefined) {\r\n                if (e.target.dataset.type === \"text\") {\r\n                    return e.target.value;\r\n                }\r\n                else if (e.target.dataset.type === \"tel\") {\r\n                    return e.target.value.replace(/[^0-9- +]/g, \"\");\r\n                }\r\n                else if (e.target.dataset.type === \"email\") {\r\n                    return e.target.value.replace(/[^a-zA-Z0-9@._-]/g, \"\");\r\n                }\r\n                else if (e.target.dataset.type === \"name\") {\r\n                    return e.target.value.replace(/[^a-zA-Z]/g, \"\");\r\n                }\r\n                else if (e.target.dataset.type === \"username\") {\r\n                    return e.target.value.replace(/[^a-zA-Z0-9]/g, \"\");\r\n                }\r\n                else if (e.target.dataset.type === \"multiName\") {\r\n                    return e.target.value.replace(/[^a-zA-Z ]/g, \"\");\r\n                }\r\n                else if (e.target.dataset.type === \"number\") {\r\n                    return e.target.value.replace(/[^0-9]/g, \"\");\r\n                }\r\n                else if (e.target.dataset.type === \"session\") {\r\n                    let val = e.target.value.replace(/[^0-9]/g, \"\");\r\n                    var output = [val.slice(0, 4), \"/\", val.slice(4)].join(\"\");\r\n                    return output;\r\n                }\r\n                else if (e.target.dataset.type === \"singleText\") {\r\n                    return e.target.value.replace(/[^a-zA-Z0-9-_/*-+%$#@!?><.,]/g, \"\");\r\n                }\r\n                else if (e.target.dataset.type === \"year\") {\r\n                    return JValidate.digitRestriction(e.target.value.replace(/[^0-9]/g, \"\"), 9999, 4);\r\n                }\r\n                else {\r\n                    return console.log(\"Filtering Failed!!! \\n\\nKindly set [data-type] or [type] attribute in your input field. \\n\\n [data-type] can only take text,tel,email,name,username and number.\");\r\n                }\r\n            }\r\n            else {\r\n                if (e.target.type === \"text\") {\r\n                    return e.target.value;\r\n                }\r\n                else if (e.target.type === \"tel\") {\r\n                    return e.target.value.replace(/[^0-9+ -]/g, \"\");\r\n                }\r\n                else if (e.target.type === \"email\") {\r\n                    return e.target.value.replace(/[^a-zA-Z0-9@._-]/g, \"\");\r\n                }\r\n                else if (e.target.type === \"name\") {\r\n                    return e.target.value.replace(/[^a-zA-Z]/g, \"\");\r\n                }\r\n                else if (e.target.type === \"number\") {\r\n                    return e.target.value.replace(/[^0-9]/g, \"\");\r\n                }\r\n                else {\r\n                    return e.target.value;\r\n                }\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\n/**\r\n * File processing\r\n */\r\nexport const JFile = {\r\n    getFileExt: (fileName = \"\", step = 1) => {\r\n        let res  = [], counter = 0;\r\n        const arr = fileName.split(\".\");\r\n        for (let i = arr.length; i > 0; i--) {\r\n            if(counter === step) break;\r\n            res.push(arr[i]);\r\n            counter++;\r\n            \r\n        }\r\n        return res.join(\"\");\r\n    },\r\n    download: (anchorTag, data, ext, type, fileName = JContent.random.alphanumeric(20)) => {\r\n        if(!data instanceof Blob) {\r\n            data = new Blob([data], {type: type});\r\n        }\r\n        if (window.navigator.msSaveOrOpenBlob) {\r\n            window.navigator.msSaveOrOpenBlob(data, fileName);\r\n        } else {\r\n            let url = URL.createObjectURL(data);\r\n            anchorTag.href = url;\r\n            anchorTag.download = fileName+ext;\r\n            document.body.appendChild(anchorTag);\r\n            anchorTag.click();\r\n            setTimeout(function() {\r\n                document.body.removeChild(anchorTag);\r\n                window.URL.revokeObjectURL(url);  \r\n            }, 0); \r\n        }\r\n    },\r\n    print: (element) => {\r\n        let prev = document.body.innerHTML;\r\n        document.body.innerHTML = element.innerHTML;\r\n        window.print();\r\n        document.body.innerHTML = prev;\r\n    },\r\n    /**\r\n     * \r\n     * @param {Array} data \r\n     * @param {Array} heading \r\n     * @param {String} output \r\n     */\r\n    exportCsv: function (data = [], heading = [], output = \"\") {\r\n        var csvRow = [];\r\n        var content = [heading];\r\n\r\n        for (let item = 0; item < data.length; item++) {\r\n            let builder = [];\r\n            JArrayObject.getKeys(data).forEach(element => {\r\n                builder.push(data[item][element]);\r\n            });\r\n            content.push(builder);\r\n        }\r\n\r\n        for (let i = 0; i < content.length; i++) {\r\n            csvRow.push(content[i].join(\",\"));\r\n        }\r\n        var csvString = csvRow.join(\"%0A\");\r\n\r\n        var a = document.createElement(\"a\");\r\n        a.href = \"data:attachment/csv,\" + csvString;\r\n        a.target = \"_Blank\";\r\n        let outputName = (output === \"\" || output === undefined) ? JContent.random.alphabet(10) : output;\r\n        a.download = outputName.concat(\".csv\");\r\n        document.body.appendChild(a);\r\n        a.click();\r\n    },\r\n\r\n    importCsv: function (fileId = \"\") {\r\n        return new Promise(res => {\r\n\r\n            var file = document.querySelector(\"#\" + fileId).files[0];\r\n            var reader = new FileReader();\r\n\r\n            reader.onload = function (event) {\r\n                let result = [];\r\n                //get the file\r\n                var csv = event.target.result;\r\n\r\n                //split and get the rows in an array\r\n                var rows = csv.split(\"\\r\\n\");\r\n                let keys = [];\r\n\r\n                //Line by line\r\n                for (let i = 0; i < rows.length - 1; i++) {\r\n                    var cols = rows[i].split(',');\r\n\r\n                    let temp = {};\r\n\r\n                    //column by column\r\n                    for (let j = 0; j < cols.length; j++) {\r\n\r\n                        //Get the first line and use it for key\r\n                        if (i === 0) {\r\n                            keys.push(cols[j]);\r\n                        }\r\n                        //Build object per line\r\n                        else {\r\n                            temp[keys[j]] = cols[j];\r\n                        }\r\n\r\n                    }\r\n\r\n                    if (i !== 0) {\r\n                        result.push(temp);\r\n                    }\r\n                }\r\n                res(result);\r\n            }\r\n            reader.readAsText(file);\r\n        });\r\n\r\n    }\r\n}\r\n\r\n\r\n/**\r\n * Date Functions\r\n */\r\nexport const JDate = {\r\n    increaseSession: (str = \"2020/2021\") => {\r\n        const s = str.split(\"/\");\r\n        return `${parseInt(s[0])+1}/${parseInt(s[1])+1}`;\r\n    },\r\n    get: {\r\n        DDMMYYYY: function (separator = \"\", date) {\r\n            if (date === undefined) {\r\n                date = new Date();\r\n            }\r\n            var d = date;\r\n            var dd = d.getDate().toString();\r\n            var mm = (d.getMonth() + 1).toString();\r\n            if (dd.length === 1) {\r\n                dd = \"0\" + dd;\r\n            }\r\n            if (mm.length === 1) {\r\n                mm = \"0\" + mm;\r\n            }\r\n            return `${d.getFullYear()}${separator}${mm}${separator}${dd}`;\r\n        },\r\n        remitaTimeStamp: () => {\r\n            const date = new Date();\r\n            return \"2021-10-29T19:36:00+0000\";\r\n            // return `${date.getFullYear()}-${date.getMonth()+1}-${date.getDate()}T${date.getHours()}:${date.getMinutes()}:${date.getSeconds()}+0000`;\r\n        }\r\n    },\r\n}\r\n\r\nexport const JSecurity = {\r\n    AES: {\r\n        encrypt: function (string = String, password = defaults.encPassword, excludes = [], excludesStoreKeys = [], func) {\r\n            if (password === null || undefined) {\r\n                password = defaults.encPassword\r\n            }\r\n            var res = CryptoJS.AES.encrypt(string, password).toString();\r\n            for (let i = 0; i < excludes.length; i++) {\r\n                const char = excludes[i];\r\n                res = res.replace(new RegExp(char, \"g\"), excludesStoreKeys[i] || defaults.cryptoExtractor+i);                \r\n            }\r\n            if (func) {\r\n                func(res);\r\n            }\r\n            return res;\r\n        },\r\n        decrypt: function (string = String, password = defaults.encPassword, includes = [], includesStoreKeys = [], func) {\r\n            if (password === null || undefined) {\r\n                password = defaults.encPassword\r\n            }\r\n            for (let i = 0; i < includes.length; i++) {\r\n                const char = includes[i];\r\n                string = string.replace(new RegExp(includesStoreKeys[i] || defaults.cryptoExtractor+i, \"g\"), char);                \r\n            }\r\n            var res = CryptoJS.AES.decrypt(string, password).toString(CryptoJS.enc.Utf8);\r\n            if (func) {\r\n                func(res);\r\n            }\r\n            return res;\r\n        }\r\n    },\r\n    SHA512: (data) => sha512(data),\r\n}\r\n\r\nconst defaults = {\r\n    encPassword: \"jpcEncPassword\",\r\n    cryptoExtractor: \"error\"\r\n}\r\n/**\r\n * JPC VERSION 2.0.0\r\n *\r\n * The End\r\n */","import { useEffect, useState } from \"react\";\r\nimport { useSelector } from \"react-redux\";\r\nimport { Form } from \"../../dependencies/form/Form\"\r\nimport { JHttp } from \"../../dependencies/js/Jpc\";\r\nimport { KNT } from \"../../dependencies/js/knt\";\r\nimport { baseUrl, MSG } from \"../service/Constant\";\r\nimport { IReducersState, IUserData } from \"../service/Reducers\";\r\n\r\ninterface Props {\r\n    \r\n}\r\n\r\n\r\nexport const ContestForm = (props: Props) => {\r\n\r\n\r\nconst user: IUserData = useSelector<IReducersState>(state => state.userData) as IUserData;\r\n\r\n\r\nconst [posts, setPosts] = useState([]);\r\n\r\n\r\nconst [levels, setLevels] = useState([]);\r\n\r\nconst [election, setElection] = useState([]);\r\n\r\n\r\n    \r\nuseEffect(() => {\r\n    const getList = () => {\r\n        JHttp.get(`${baseUrl}/election/get/list`, (data: any) => {\r\n            setElection(data)\r\n        }, (err: any) => console.log(err))\r\n    }\r\n    getList();\r\n\r\n}, []);\r\n\r\n    \r\n\r\nuseEffect(() => {\r\n    const getListLevel = () => {\r\n        JHttp.get(`${baseUrl}/cat/get/list`, (data: any) => {\r\n            setLevels(data)\r\n        }, (err: any) => console.log(err))\r\n    };\r\n    getListLevel();\r\n}, []);\r\n\r\n\r\nconst handleChange = (e: any) => {\r\n    const {name, value} = e.target;\r\n\r\n    console.log(name, value);\r\n\r\n    if(name === \"level\"){\r\n        const main = KNT.array.extractByKeyValue(levels, \"name\", value)[0]\r\n        main && main[\"posts\"] && setPosts(main[\"posts\"])\r\n    }\r\n}\r\n\r\n    \r\n\r\nconst schema = [\r\n    {\r\n        name: \"name\",\r\n        type: \"select\",\r\n        values: election,\r\n        control: {\r\n            type: \"select\",\r\n            renderKey: \"name\",\r\n            valueKey: \"name\",\r\n            label: \"Election\",\r\n        }\r\n    },\r\n    {\r\n        name: \"level\",\r\n        type: \"select\",\r\n        values: levels,\r\n        control: {\r\n            type: \"select\",\r\n            renderKey: \"name\",\r\n            valueKey: \"name\",\r\n            label: \"Election Level\",\r\n        }\r\n    },\r\n    {\r\n        name: \"postId\",\r\n        type: \"select\",\r\n        values: posts,\r\n        control: {\r\n            type: \"select\",\r\n            renderKey: \"name\",\r\n            valueKey: \"id\",\r\n            label: \"Post\",\r\n            placeholder: \"Gender\"\r\n        }\r\n    },\r\n    {\r\n        name: \"firstName\",\r\n        type: \"input\",\r\n        control: {\r\n            value: user.firstName,\r\n            type: \"text\",\r\n            label: \"First Name\",\r\n            placeholder: \"Enter First Name\",\r\n            readOnly: true,\r\n        }\r\n    },\r\n    {\r\n        name: \"lastName\",\r\n        type: \"input\",\r\n        control: {\r\n            value: user.lastName,\r\n            readOnly: true,\r\n            type: \"text\",\r\n            label: \"Last Name\",\r\n            placeholder: \"Enter Last Name\"\r\n        }\r\n    },\r\n    {\r\n        name: \"aim\",\r\n        type: \"input\",\r\n        control: {\r\n            type: \"text\",\r\n            label: \"Aim\",\r\n            placeholder: \"Supply Aim\",\r\n        }\r\n    },\r\n    {\r\n        name: \"objective\",\r\n        type: \"input\",\r\n        control: {\r\n            type: \"text\",\r\n            label: \"Objective\",\r\n            placeholder: \"What are your objectives\",\r\n        }\r\n    },\r\n]\r\n\r\nconst handleSubmit = (res: object) => {\r\n\r\n    let formDataB = {\r\n        ...res,\r\n        gender: \"male\",\r\n        userId: user.username,\r\n        firstName: user.firstName,\r\n        lastName: user.lastName,\r\n        descriptions: [\r\n            {name: \"\", title: \"\", text: \"\"}\r\n        ],\r\n    }\r\n\r\n    const formData: [{}] = [formDataB];\r\n\r\n    console.log(formData);\r\n    \r\n\r\n\r\n    KNT.validateField.validate(formData, (res: string) => alert(res), () => {\r\n        if(window.confirm(MSG.confirmMSG)){\r\n            JHttp.post(`${baseUrl}/election/add/req/contestant`, formData, (res: any) => alert(res), (err: any) => console.log(err));\r\n        }\r\n    });\r\n}\r\n\r\n\r\n    return (\r\n        <div className=\"container\">\r\n            <Form schema={schema} onSubmit={handleSubmit} label=\"Submit Request\" onChange={handleChange} />            \r\n        </div>\r\n    )\r\n}\r\n\r\n\r\n","export  function SimpleText({text}) {\r\n    return (\r\n        <div style={{...styleSimpleText.spaceFeedback}}>\r\n         {text? text: \"No record\"}\r\n        </div>\r\n    )\r\n}\r\n\r\nconst styleSimpleText = {\r\n    spaceFeedback: {\r\n        width: '100%', fontSize: \"30px\", fontWeight: 'bolder', textAlign: 'center', color: \"#cfcfcf\", fontStyle: 'oblique',\r\n    }\r\n}","import axios from \"axios\";\r\n\r\n\r\n\r\n\r\nexport const JHttp = {\r\n    put: function (updateAddress, id, updateData, processSucceed, processFail, params = \"\") {\r\n        //Update DB\r\n        axios.put(`${updateAddress}/${id}?${params}`, updateData).then((d) => {\r\n            return processSucceed(d.data);\r\n        }).catch(ca => {\r\n            return processFail(ca);\r\n        });\r\n    },\r\n\r\n    get: function (getAddress, dataRetrieved, dataNotRetrieve) {\r\n        axios.get(getAddress).then((data) => {\r\n            return dataRetrieved(data.data);\r\n        }).catch(error => {\r\n            if (dataNotRetrieve !== undefined) {\r\n                return dataNotRetrieve(error);\r\n            }\r\n        });\r\n    },\r\n\r\n    getSingle: function (getAddress, searchString, dataRetrieved, dataNotRetrieve) {\r\n        axios.get(`${getAddress}/${searchString}`).then((data) => {\r\n            return dataRetrieved(data.data);\r\n        }).catch((ca) => {\r\n            if (dataNotRetrieve !== undefined) {\r\n                return dataNotRetrieve(ca);\r\n            }\r\n        })\r\n    },\r\n\r\n    post: function (postAddress, formData, processSucceed, processFail) {\r\n        //Post to DB\r\n        axios.post(postAddress, formData).then((d) => {\r\n            return processSucceed(d.data);\r\n        }).catch((ca) => {\r\n            if (processFail !== undefined) {\r\n                return processFail(ca);\r\n            }\r\n        });\r\n    },\r\n\r\n    request: function (postAddress, processSucceed, processFail) {\r\n        //Post to DB\r\n        axios.request(postAddress).then((d) => {\r\n            return processSucceed(d.data);\r\n        }).catch((ca) => {\r\n            if (processFail !== undefined) {\r\n                return processFail(ca);\r\n            }\r\n        });\r\n    },\r\n\r\n    check: function (getAddress, searchString, ifSearchStringIsEmpty, dataNotExist, dataExist, processFail) {\r\n        if (searchString !== \"\") {\r\n            // Check for existence in DB\r\n            axios.get(`${getAddress}/${searchString}`).then((d) => {\r\n                if ((d.data) == null) {\r\n                    //Proceed\r\n                    return dataNotExist();\r\n                }\r\n                else {\r\n                    return dataExist();\r\n                }\r\n            }).catch((ca) => {\r\n                //Error Info\r\n                return processFail(ca);\r\n            });\r\n        }\r\n        else {\r\n            return ifSearchStringIsEmpty();\r\n        }\r\n    },\r\n\r\n    indexedDB: {\r\n        save: function (DBName = \"\", DBVersion = 0, data, dataType = \"\", key = \"\", DBType = \"readwrite\", onError, onSuccess) {\r\n            // In the following line, you should include the prefixes of implementations you want to test.\r\n            window.indexedDB = window.indexedDB || window.mozIndexedDB || window.webkitIndexedDB || window.msIndexedDB;\r\n            // DON'T use \"var indexedDB = ...\" if you're not in a function.\r\n            // Moreover, you may need references to some window.IDB* objects:\r\n            window.IDBTransaction = window.IDBTransaction || window.webkitIDBTransaction || window.msIDBTransaction || { READ_WRITE: \"readwrite\" }; // This line should only be needed if it is needed to support the object's constants for older browsers\r\n            window.IDBKeyRange = window.IDBKeyRange || window.webkitIDBKeyRange || window.msIDBKeyRange;\r\n            // (Mozilla has never prefixed these objects, so we don't need window.mozIDB*)\r\n            if (!window.indexedDB) {\r\n                console.log(\"Your browser doesn't support a stable version of IndexedDB. Such and such feature will not be available.\");\r\n            }\r\n\r\n            var request = window.indexedDB.open(DBName, DBVersion);\r\n            request.onerror = function (e) {\r\n                if (onError) {\r\n                    onError(e);\r\n                }\r\n            }\r\n\r\n            request.onupgradeneeded = function (e) {\r\n                var db = e.target.result;\r\n                var objStore = db.createObjectStore(key, { autoIncrement: true });\r\n\r\n                switch (dataType) {\r\n                    case \"array\":\r\n                        data.forEach(element => {\r\n                            objStore.add(element);\r\n                        });\r\n                        break;\r\n                    case \"object\":\r\n                        objStore.add(data);\r\n                        break;\r\n                    default:\r\n                        break;\r\n                }\r\n            }\r\n            request.onsuccess = function (e) {\r\n                var db = e.target.result;\r\n                var transaction = db.transaction([key], DBType);\r\n                var objStore = transaction.objectStore(key);\r\n\r\n                switch (dataType) {\r\n                    case \"array\":\r\n                        data.forEach(element => {\r\n                            objStore.add(element);\r\n                        });\r\n                        break;\r\n                    case \"object\":\r\n                        objStore.add(data);\r\n                        break;\r\n                    default:\r\n                        break;\r\n                }\r\n\r\n                if (onSuccess) {\r\n                    onSuccess(e);\r\n                }\r\n            }\r\n\r\n        }\r\n    }\r\n}\r\n","import React, { Component} from 'react'\r\nimport { KNT } from '../js/knt'\r\nimport { SimpleText } from '../SimpleText/SimpleText'\r\nimport './Table.css'\r\nimport { JHttp } from './TableService.js'\r\n\r\n\r\n\r\nconst httpTest = {\r\n    url: \"\", type: \"GET\"\r\n}\r\n\r\nconst MSG = {\r\n    unableToFetch: \"Unable to fetch!\"\r\n}\r\n\r\nconst TABLE_ATOMIC_ID_UNIQUE_KNT = \"TABLE_ATOMIC_ID_UNIQUE_KNT\";\r\n\r\n/**\r\n * \r\n * @param {} actionColumn Define extra column for delete, edit and view in a select tag. Takes Boolean\r\n * \r\n * @param {} http auto\r\n */\r\n\r\n\r\nexport class Table extends Component {\r\n    constructor(props) {\r\n        super(props)\r\n    \r\n        this.state = {\r\n             data: [], rawData: []\r\n        }\r\n    }\r\n\r\n\r\n    componentDidMount(){\r\n        this.handleAutoPopulate(this.props.data)\r\n    }\r\n\r\n    handleAutoPopulate = (data) => {\r\n        if(this.props.http){\r\n            this.handleURL(this.props.http, this.handleSuccess, this.handleFailure)\r\n        } else if(data !== undefined && data !== null) {\r\n            this.handleData(data);          \r\n        } \r\n    }\r\n\r\n\r\n    handleSuccess = (res) => {\r\n        console.log(res)\r\n        this.handleData(res);\r\n    }\r\n\r\n\r\n    handleFailure = (err) => {\r\n        // alert(MSG.unableToFetch);\r\n        console.error(err)\r\n    }\r\n\r\n\r\n    handleData = (data) => {\r\n        const rawData = this.handleAtomicId(data, TABLE_ATOMIC_ID_UNIQUE_KNT);\r\n        console.log(\"raw\", rawData)\r\n        const dataGet = KNT.array.extractArrayInArrayObject(rawData);\r\n        const unRenderColumns = this.props.unRenderColumns || [];\r\n        const newData = KNT.array.removeByKeys(dataGet.res, [\"id\", ...unRenderColumns])\r\n        console.log(newData)\r\n        this.setState({data: newData, unRenderKeys: dataGet.arrayKeys, unRenderData: dataGet.array, rawData: rawData});\r\n    }\r\n\r\n\r\n    handleAtomicId = (data = [], idLabel) => {\r\n        const res = [];\r\n        data.forEach((el, i) => {\r\n            res.push({...el, [idLabel]: i})\r\n        })\r\n        console.log(res)\r\n        return res;\r\n    }\r\n\r\n    handleURL = (http = {url: \"\", type: \"GET\", data: {}}, onSuccess, onFailure) => {\r\n        if(http.type === \"POST\"){\r\n            JHttp.post(http.url, http.data, (res) => onSuccess(res), (err) => onFailure(err));\r\n        } else\r\n        if(http.type === \"GET\"){\r\n            JHttp.get(http.url, (data) => onSuccess(data), (err) => onFailure(err));\r\n        }\r\n    }\r\n\r\n    renderThead = (data) => {\r\n        let thead = KNT.array.getKeys(data);\r\n        const theadJSX = (arr = []) => arr.map((x, i) => <th key={i}>{KNT.string.titleCase(x)}</th>);\r\n\r\n        thead = KNT.array.removeMultiple([TABLE_ATOMIC_ID_UNIQUE_KNT], thead)\r\n\r\n        const thActionColumn = this.tdActionColum()? \"ACTION\": null;\r\n        if(thActionColumn !== null) thead.push(thActionColumn);\r\n\r\n        if(thead.includes(\"id\")){\r\n            return (\r\n                <>\r\n                <th>SN</th>\r\n                {theadJSX(KNT.array.removeMultiple([\"id\"], thead))}\r\n                </>\r\n            )\r\n        } else  return theadJSX([\"SN\", ...thead]);\r\n    }\r\n\r\n    renderThBodySerialNumber = (sn, data) => {\r\n        if(KNT.array.getKeys(data).includes(\"id\")){\r\n            return <td>{sn}</td>;\r\n        }\r\n        return <td align={KNT.validateField.checkNumber(sn)? \"right\": \"\"}>{sn}</td>;\r\n    }\r\n\r\n\r\n    renderBodyTd = (arr = []) => {\r\n        const tbodyJSX = (data) => data.map((item, rowIndex) => {\r\n            const valStore = Object.keys(item);\r\n            return <tr key={rowIndex}>\r\n                {this.renderThBodySerialNumber((rowIndex+1), data)}\r\n                {\r\n                    valStore.map((key, valKeyIndex) => (\r\n                        key === TABLE_ATOMIC_ID_UNIQUE_KNT? null: \r\n                    <td align={KNT.validateField.checkNumber(item[key])? \"right\": \"\"} key={valKeyIndex}>{\r\n                        this.props.onCostumeRendering?\r\n                        this.props.onCostumeRendering(item[key], key, this.handleAtomicIdItems(item, true), rowIndex):\r\n                        item[key]\r\n                        }</td>\r\n                    ))\r\n                }\r\n                {this.actionColumBody(item, item[TABLE_ATOMIC_ID_UNIQUE_KNT])}\r\n            </tr>\r\n        }) \r\n\r\n        return (<>{tbodyJSX(arr)}</>)\r\n    }\r\n\r\n\r\n    handleAtomicIdItems = (item, realData = false) => {\r\n        console.log(item)\r\n        const rowRealData = KNT.array.extractByKeyValue(this.state.rawData, TABLE_ATOMIC_ID_UNIQUE_KNT, item[TABLE_ATOMIC_ID_UNIQUE_KNT]);\r\n        const rowData = KNT.array.removeByKeys(rowRealData, [TABLE_ATOMIC_ID_UNIQUE_KNT])[0];\r\n        \r\n        return realData? rowRealData[0]:  rowData;\r\n\r\n    }\r\n\r\n\r\n    handleActionOptionClick = (item, val) => {\r\n\r\n        const rowData = this.handleAtomicIdItems(item, val);\r\n\r\n        console.log(\"A\", rowData)\r\n\r\n        this.props.onActionOptionClick && this.props.onActionOptionClick(val, rowData);\r\n        this.setState({actionSelected: \"\"})\r\n    }\r\n\r\n    actionColumBody = (item, index) => {\r\n        let res = null;\r\n        if(this.props.onActionOptions){\r\n            return res =  (\r\n                <td key={index}>\r\n                <select className=\"table-select\" value={this.state.actionSelected} onChange={(e) => this.handleActionOptionClick(item, e.target.value)} name=\"actionSelected\">\r\n                    <option value=\"\">--select--</option>\r\n                    {\r\n                        this.props.onActionOptions && this.props.onActionOptions.map((x ,i) => <option key={i} value={x.value} title={x.title}>{x.label}</option>)\r\n                    }\r\n                </select>\r\n                </td>\r\n            )\r\n        }\r\n        return res;\r\n    }\r\n\r\n    tdActionColum = () => {\r\n        let res = false;\r\n        if(this.props.actionColum || this.props.onActionOptions){\r\n            return true\r\n        }\r\n        return res;\r\n    }\r\n\r\n    \r\n    tdData = (val) => {\r\n        return KNT.object.isObject(val)? null: (val === null? \"Null\": (val === true? 'True': (val === false? \"False\": val)));\r\n    }\r\n\r\n\r\n\r\n    noDataRetrieve = () => {\r\n        return  <SimpleText text={\"No data retrieve\"} />\r\n    }\r\n    \r\n    render() {\r\n        return (\r\n            <div style={{width: \"100%\"}}>\r\n                {this.props.onCompBeforeTable && this.props.onCompBeforeTable(this.state.rawData)}\r\n                <table className=\"table\">\r\n                    <thead>\r\n                        <tr>\r\n                            {this.renderThead(this.state.data)}\r\n                        </tr>\r\n                    </thead>\r\n                    <tbody>\r\n                        {this.state.data.length > 0? this.renderBodyTd(this.state.data) : this.noDataRetrieve()}\r\n                    </tbody>\r\n                </table>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default Table;\r\n\r\n","import React from 'react';\r\nimport './View.css';\r\n\r\nexport function Row({ name, value }) {\r\n    return (\r\n        <tr>\r\n            <td className=\"row-key\">{name}:</td>\r\n            <td>{value}</td>\r\n        </tr>\r\n    );\r\n}\r\n\r\nexport function UIRadio(props) {\r\n    //<RadCheck name={name} value={value} onChange={onChange} className={className} checked={checked} type=\"rad\" defaultChecked={defaultChecked}/>\r\n    return <RadCheck {...props} type=\"rad\" />\r\n\r\n}\r\n\r\nexport function UICheckBox(props) {\r\n\r\n    return <RadCheck {...props} type=\"chk\" />\r\n\r\n}\r\n\r\n\r\nfunction RadCheck({ name, value, onChange, className, checked, type, label }) {\r\n\r\n    const handleChange = (e) => {\r\n        onChange(e, e.target.value);\r\n    }\r\n\r\n    function capName(name = \"\") {\r\n        return name.charAt(0).toUpperCase() + name.substr(1);\r\n    }\r\n\r\n    let type2 = type === \"rad\" ? \"radio\" : \"checkbox\";\r\n    let classValue = type === \"rad\" ? \"ui-radio\" : \"ui-checkbox\";\r\n    return (\r\n        <React.Fragment>\r\n            <input type={type2} className={`${classValue} ${className}`} checked={checked} name={name} value={value} onChange={handleChange} />\r\n            <label className=\"ui-radchk-label\">{label !== undefined ? label : capName(value)}</label>\r\n        </React.Fragment>\r\n\r\n    );\r\n}\r\n\r\n\r\nexport function UITable({ className, header = [], primaryKey = \"id\", capCase = false, subHeader = {}, body = [], onRowSelected }) {\r\n\r\n    let camelToSpace = (camel) => {\r\n\r\n        // finds if this column is substituted in the subHeader, if true it replaces it.\r\n        if (subHeader[camel] !== undefined) return subHeader[camel];\r\n\r\n        var spaced = \"\";\r\n        let regexp = /[A-Z]/;\r\n\r\n        if (camel.length > 0) {\r\n\r\n            camel.split(\"\").forEach((e, i) => {\r\n\r\n                if (i === 0) {\r\n                    spaced = e.toUpperCase();\r\n                } else {\r\n                    if (regexp.test(e)) {\r\n                        spaced += capCase === false ? \" \" + e.toLocaleLowerCase() : \" \" + e;\r\n                    } else {\r\n                        spaced += e;\r\n                    }\r\n                }\r\n\r\n            });\r\n\r\n            return spaced;\r\n        }\r\n        return \"\";\r\n    }\r\n    return (\r\n        <table className={`ui-table ${className}`}>\r\n            <thead>\r\n                <tr>\r\n                    {header.map((e, i) => (<th key={i}>{camelToSpace(e)}</th>))}\r\n                </tr>\r\n            </thead>\r\n            <tbody>\r\n                {body.map((e, i) => (<UITableRow e={e} i={i} pk={e[primaryKey]} onRowSelected={onRowSelected} keys={header} />))}\r\n            </tbody>\r\n        </table>\r\n    );\r\n}\r\n\r\nfunction UITableRow({ e, pk, i, onRowSelected, keys = [] }) {\r\n\r\n    const processRow = (obj) => {\r\n        let rows = [];\r\n        keys.forEach(e => rows.push(obj[e] === undefined ? \"\" : obj[e]));\r\n        return rows;\r\n    }\r\n\r\n    return (\r\n        <tr onClick={() => onRowSelected(pk, i)} style={{ cursor: \"pointer\" }}>\r\n            {processRow(e).map((e, i) => (<td key={i}>{e}</td>))}\r\n        </tr>\r\n    );\r\n}\r\n\r\n/**\r\n * \r\n * A window that renders over other windows. Visibility can be controlled by changing the state of the component through \r\n * the onShow prop and it has another prop-onClosed to update the visibility state within a preferred logic. \r\n * \r\n */\r\nexport function UIWindow({ onClosed, onShow = false, className = \"\", children, title, style={} }) {\r\n    let defStyle = \"ui-window-hide\";\r\n    let actStyle = \"ui-window-show\";\r\n\r\n    return (\r\n        <div className={`${className} ${onShow ? actStyle : defStyle} ui-window`} style={style}>\r\n            <div className=\"ui-window-close-wrapper\">\r\n                <h3>{title}</h3>\r\n                <span onClick={onClosed.bind(null, \"x\")}>&times;</span>\r\n            </div>\r\n            <div className=\"ui-window-body\">{children}</div>\r\n        </div>\r\n    );\r\n}","import './LabelView.css'\r\nimport { ReactElement } from 'react';\r\ninterface Props {\r\n    value: ReactElement | string | number;\r\n    label: string | ReactElement | number;\r\n}\r\n\r\nexport const LabelView = ({label, value}: Props) => {\r\n    return (\r\n        <div className='label-view'>\r\n            <div className='label-view-label' >{label}:</div>            \r\n            <div className='label-view-value' >{value}</div>            \r\n        </div>\r\n    )\r\n}\r\n","import { LabelView } from '../../../../dependencies/label/LabelView'\r\nimport './Vote.css';\r\nimport { KNT } from '../../../../dependencies/js/knt';\r\nimport { baseUrl, MSG } from '../../../service/Constant';\r\nimport { JHttp } from '../../../../dependencies/js/Jpc';\r\n\r\n\r\n\r\ninterface Props {\r\n    userId: string;\r\n    candidateInfo?: {\r\n        name: \"\",\r\n        firstName: \"\",\r\n        lastName: \"\",\r\n        gender: \"\",\r\n        level: \"\",\r\n        title: \"\",\r\n        image: \"\",\r\n        post: {\r\n            name: \"\", title: \"\", aim: \"\", objective: \"\", id: null\r\n        },\r\n        userId: \"\",\r\n        aim: \"\", \r\n        objective: \"\",\r\n    } | any;\r\n}\r\n\r\nexport const Vote = ({candidateInfo, userId}: Props) => {\r\n\r\n\r\n    const voteNow = () => {\r\n        const con = (msg: string): boolean => {return window.confirm(msg)};\r\n        if(candidateInfo){\r\n            const data = {\r\n                candidateId: candidateInfo.userId,\r\n                postId: candidateInfo.post.id,\r\n                userId: userId,\r\n                electionName: candidateInfo.name\r\n            };\r\n            if(con(MSG.vote(candidateInfo.lastName))){\r\n                console.log(data);\r\n                KNT.validateField.validate([data], (field: string) => alert(MSG.fieldRequiredMSG(field)), () => {\r\n                    JHttp.post(`${baseUrl}/vote/v`, data, (res: string) => alert(res), (err: any) => console.log(err) );\r\n                });\r\n            }\r\n\r\n            \r\n        }\r\n        \r\n    }\r\n    \r\n\r\n    return (\r\n        <div className=\"vote-pane\">\r\n            <div className='vote-label'>info</div>\r\n        {\r\n            candidateInfo && \r\n            \r\n            <div className='vote-frame'>\r\n                <div className='vote-frame-info'>\r\n                    <h3>Basic Info About {candidateInfo.lastName} </h3>\r\n                    <LabelView label={\"Title\"} value={candidateInfo.title} />\r\n                    <LabelView label={\"Name\"} value={candidateInfo.lastName+\" \"+candidateInfo.firstName} />\r\n                    <LabelView label={\"Gender\"} value={candidateInfo.gender} />\r\n                    <LabelView label={\"Aim\"} value={candidateInfo.aim} />\r\n                    <LabelView label={\"Objective\"} value={candidateInfo.objective} />\r\n\r\n                </div>\r\n                <div className='vote-frame-vote'>\r\n                    <div onClick={voteNow} >\r\n                        <div>\r\n                            <span>VOTE NOW</span>\r\n                            <span>CLICK HERE {\"✔️\"}</span>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n                <div className='vote-frame-image' ><img src={\"/image/UserProfile.png\"} alt='user-image' /></div>\r\n            </div>\r\n            }\r\n        </div>\r\n    )\r\n}\r\n\r\n\r\n\r\n\r\n\r\n\r\n","import { useState } from \"react\"\r\nimport { useSelector } from \"react-redux\"\r\nimport Table from \"../../dependencies/table/Table\"\r\nimport { UIWindow } from \"../../dependencies/views/Views\"\r\nimport { Vote } from \"../activities/election/vote/Vote\"\r\nimport { baseUrl } from \"../service/Constant\"\r\nimport { IReducersState, IUserData } from \"../service/Reducers\"\r\n\r\ninterface Props {\r\n    \r\n}\r\n\r\nexport const ContestantList = (props: Props) => {\r\n\r\n    const user: IUserData = useSelector<IReducersState>(state => state.userData) as IUserData;\r\n\r\n    const [show, setShow] = useState(false);\r\n\r\n    const [candidateIfo, setCandidateInfo] = useState({})\r\n\r\n\r\n\r\n    const actionOptions = () => {\r\n        return [\r\n            {value: \"vote\", title: \"Click to vote\", label: \"Vote Candidate\"}\r\n        ]\r\n    }\r\n    \r\n\r\n    const handleActionOptionClick = (val: string, data: any) => {\r\n        console.log(val, data);\r\n        if(val === \"vote\"){\r\n            setShow(true)\r\n            setCandidateInfo(data)\r\n        }\r\n    }\r\n\r\n    const onCostumeRendering = (val: any, key:any, item: any, rowIndex: number) => {\r\n        if(key === \"level\"){\r\n            \r\n            return  <p title={item[\"post\"][\"title\"]}>{`${val} ( ${item[\"post\"][\"name\"]} )`}</p>\r\n        }\r\n\r\n        return val\r\n    }\r\n\r\n    return (\r\n        <div className=\"container\">\r\n            <Table http={{url: `${baseUrl}/election/get/contestant`, type: \"GET\" }} onCostumeRendering={onCostumeRendering} onActionOptions={actionOptions()} onActionOptionClick={handleActionOptionClick} />\r\n            <UIWindow onShow={show} onClosed={() => setShow(false)} title=\"Vote Contestant\" >\r\n                <Vote userId={user.username} candidateInfo={candidateIfo} />\r\n            </UIWindow>\r\n        </div>\r\n    )\r\n}\r\n","import React from 'react'\r\nimport { Form } from '../../../dependencies/form/Form'\r\nimport { JHttp } from '../../../dependencies/js/Jpc';\r\nimport { KNT } from '../../../dependencies/js/knt';\r\nimport { baseUrl, MSG } from '../../service/Constant';\r\n\r\nfunction CreateElectionLevel() {\r\n    \r\n\r\n\r\n    const schema = [\r\n        {\r\n            name: \"name\",\r\n            type: \"input\",\r\n            control: {\r\n                type: \"text\",\r\n                label: \"Level Name\",\r\n                placeholder: \"Supply Election Level Name e.g State Election, Community or federal level\"\r\n            }\r\n        },\r\n        {\r\n            name: \"title\",\r\n            type: \"input\",\r\n            control: {\r\n                type: \"text\",\r\n                label: \"Title\",\r\n                placeholder: \"Supply Title\"\r\n            }\r\n        },\r\n        {\r\n            name: \"hierarchy\",\r\n            type: \"input\",\r\n            control: {\r\n                type: \"number\",\r\n                label: \"Hierarchy\",\r\n                placeholder: \"\"\r\n            }\r\n        },\r\n        {\r\n            name: \"description\",\r\n            type: \"input\",\r\n            control: {\r\n                type: \"text\",\r\n                label: \"Description\",\r\n                placeholder: \"Description\"\r\n            }\r\n        },\r\n    ];\r\n\r\n    const submit = (response) => {\r\n        const data = [response];\r\n\r\n        KNT.validateField.validate(data, (field) => alert(MSG.fieldRequiredMSG(field)),  () => {\r\n            if(window.confirm(MSG.confirmMSG)){\r\n                JHttp.post(`${baseUrl}/cat/create`, data, (res) => alert(res), (err) => console.log(err) );\r\n            }\r\n        })\r\n\r\n    };\r\n\r\n\r\n    return (\r\n        <div className='container'>\r\n            <Form schema={schema} label='Create Election Level' onSubmit={submit} />\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default CreateElectionLevel\r\n","import { useEffect, useState } from \"react\";\r\nimport { Form } from \"../../../dependencies/form/Form\";\r\nimport { JHttp } from \"../../../dependencies/js/Jpc\";\r\nimport { KNT } from \"../../../dependencies/js/knt\";\r\nimport { baseUrl, MSG } from '../../service/Constant';\r\n\r\ninterface Props {\r\n    \r\n}\r\n\r\nexport const CreatePosts = (props: Props) => {\r\n\r\n    const [level, setLevel] = useState(\"\")\r\n\r\n\r\n    const [data, setData] = useState([])\r\n\r\n    \r\n    useEffect(() => {\r\n        const getList = () => {\r\n            JHttp.get(`${baseUrl}/cat/get/list`, (data: any) => {\r\n                setData(data)\r\n            }, (err: any) => console.log(err))\r\n        }\r\n        getList();\r\n\r\n    }, [])\r\n\r\n\r\n\r\n    const makeInputSchema = (arr: string[]) => {\r\n        const res: { name: string; type: string; control: { type: string; label: string; placeholder: string; }; }[] = [];\r\n        arr.forEach(el => {\r\n            const label = KNT.string.titleCase(el);\r\n            res.push({\r\n                name: el,\r\n                type: \"input\",\r\n                control: {\r\n                    type: \"text\",\r\n                    label: label,\r\n                    placeholder: `Supply ${label}`\r\n                }\r\n            })\r\n        });\r\n\r\n        return res;\r\n    }\r\n\r\n    const schema = [\r\n        {\r\n            name: \"level\",\r\n            type: \"select\",\r\n            values: data,\r\n            control: {\r\n                type: \"select\",\r\n                renderKey: \"name\",\r\n                valueKey: \"name\",\r\n                label: \"Select Level\",\r\n                placeholder: \"Gender\"\r\n            }\r\n        },\r\n        ...makeInputSchema([\"name\",\"title\",\"aim\", \"objectives\", \"description\"])\r\n    ];\r\n\r\n\r\n    const submit = (response : object) => {\r\n        const formData = [\r\n            {\r\n                level: level,\r\n                posts: [response]\r\n            }\r\n        ];\r\n\r\n        KNT.validateField.validate([response], (field: string) => alert(MSG.fieldRequiredMSG(field)), () => {\r\n            if(window.confirm(MSG.confirmMSG)){\r\n                JHttp.post(`${baseUrl}/cat/create/posts`, formData, (res: string) => alert(res), (err: any) => console.log(err))\r\n            }\r\n        })\r\n\r\n    }\r\n    const change = (e: any) => {\r\n        const {name, value} = e.target;\r\n\r\n        if(name === \"level\"){\r\n            setLevel(value);\r\n        }\r\n    }\r\n\r\n    return (\r\n        <div className=\"container\">\r\n            <Form schema={schema} label=\"Create Post\" onChange={change} onSubmit={submit} />\r\n        </div>\r\n    )\r\n}\r\n","import  { useEffect, useState } from 'react'\r\nimport { JHttp } from '../../../dependencies/js/Jpc';\r\nimport { KNT } from '../../../dependencies/js/knt';\r\nimport { LabelView } from '../../../dependencies/label/LabelView';\r\nimport { baseUrl } from '../../service/Constant';\r\n\r\nfunction ProfileUpdate({userId}) {\r\n    const [state, setState] = useState({});\r\n\r\n    \r\n\r\n    useEffect(() => {\r\n        console.log(\"object \",userId);\r\n        JHttp.get(`${baseUrl}/user/profile?userId=${userId}`, (data) => {\r\n            if(data !== null && typeof data !== String){\r\n                setState(data);\r\n            }\r\n        }, (e) => console.log(e))\r\n    }, [])\r\n\r\n    return (\r\n        <div className='container'>\r\n            {\r\n                KNT.array.buildObjToNameAndValue([state]).map((x, i) => (\r\n                    <LabelView label={KNT.string.titleCase(x.name)} value={x.value} key={i} />\r\n                ))\r\n            }\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default ProfileUpdate\r\n","import React from 'react'\r\nimport { useSelector } from 'react-redux';\r\nimport { IReducersState, IUserData } from '../../service/Reducers';\r\nimport ProfileUpdate from './ProfileUpdate'\r\n\r\ninterface Props {\r\n    \r\n}\r\n\r\nexport const Profile = (props: Props) => {\r\n\r\n    \r\n    const user: IUserData = useSelector<IReducersState>(state => state.userData) as IUserData;\r\n\r\n\r\n    return (\r\n        <div className='container'>\r\n            <ProfileUpdate userId={user.username}/>\r\n        </div>\r\n    )\r\n}\r\n","import { useEffect, useState } from \"react\";\r\nimport { Form } from \"../../../dependencies/form/Form\";\r\nimport { JHttp } from \"../../../dependencies/js/Jpc\";\r\nimport { KNT } from \"../../../dependencies/js/knt\";\r\nimport Table from \"../../../dependencies/table/Table\";\r\nimport { baseUrl, MSG } from \"../../service/Constant\";\r\n\r\ninterface Props {\r\n    target?: string;\r\n}\r\n\r\n\r\nexport const CreatElection = (props: Props) => {\r\n\r\nconst [levels, setLevels] = useState([]);\r\nconst [posts, setPosts] = useState([]);\r\n\r\n\r\n    \r\nuseEffect(() => {\r\n    const getList = () => {\r\n        JHttp.get(`${baseUrl}/cat/get/list`, (data: any) => {\r\n            setLevels(data)\r\n        }, (err: any) => console.log(err))\r\n    }\r\n    getList();\r\n\r\n}, [])\r\n\r\n\r\nconst handleChange = (e: any) => {\r\n    const {name, value} = e.target;\r\n    if(name === \"level\"){\r\n        const main = KNT.array.extractByKeyValue(levels, \"name\", value)[0]\r\n        main && main[\"posts\"] && setPosts(main[\"posts\"])\r\n    }\r\n\r\n}\r\n\r\n\r\nconst schema = [\r\n        {\r\n            name: \"level\",\r\n            type: \"select\",\r\n            values: levels,\r\n            control: {\r\n                type: \"select\",\r\n                renderKey: \"name\",\r\n                valueKey: \"name\",\r\n                label: \"Election Level\",\r\n            }\r\n        },\r\n        {\r\n            name: \"postId\",\r\n            type: \"select\",\r\n            values: posts,\r\n            control: {\r\n                type: \"select\",\r\n                renderKey: \"name\",\r\n                valueKey: \"id\",\r\n                label: \"Post\",\r\n                placeholder: \"Gender\"\r\n            }\r\n        },\r\n        {\r\n            name: \"name\",\r\n            type: \"input\",\r\n            control: {\r\n                type: \"text\",\r\n                label: \"Election Name\",\r\n                placeholder: \"Enter Election name or title\"\r\n            }\r\n        },\r\n        {\r\n            name: \"description\",\r\n            type: \"input\",\r\n            control: {\r\n                type: \"text\",\r\n                label: \"Description\",\r\n                placeholder: \"description\"\r\n            }\r\n        },\r\n        {\r\n            name: \"startDate\",\r\n            type: \"input\",\r\n            control: {\r\n                type: \"date\",\r\n                label: \"Start Date\",\r\n                placeholder: \"\"\r\n            }\r\n        },\r\n        {\r\n            name: \"endDate\",\r\n            type: \"input\",\r\n            control: {\r\n                type: \"date\",\r\n                label: \"End Date\",\r\n                placeholder: \"\"\r\n            }\r\n        },\r\n    ];\r\n\r\n\r\nconst submit = (response: object) => {\r\n    const election: [{}] = [response];\r\n\r\n    KNT.validateField.validate(election, (field: string) => alert(MSG.fieldRequiredMSG(field)),  () => {\r\n        if(window.confirm(MSG.confirmMSG)){\r\n            JHttp.post(`${baseUrl}/election/create`, election, (res: any | string) => alert(res), (err: any) => console.log(err) );\r\n        }\r\n    })\r\n\r\n};\r\n\r\n    return props.target === \"form\"?\r\n    <Form schema={schema} label='Create Election' onSubmit={submit} onChange={handleChange} />\r\n    :<Table http={{url: `${baseUrl}/election/get/list`, type: \"GET\" }} />\r\n\r\n}\r\n\r\n\r\nexport default CreatElection;\r\n","import React from \"react\";\r\nimport { Chart } from \"react-google-charts\";\r\n\r\n// export const data = [\r\n//   [\"Candidate\", \"Vote\"],\r\n//   [\"2014\", 1000],\r\n//   [\"2015\", 1170],\r\n//   [\"2016\", 660],\r\n//   [\"2017\", 1030],\r\n// ];\r\n\r\nexport const options = (title, subTitle) => {\r\n    return {\r\n        chart: {\r\n          title: title,\r\n          subtitle: subTitle,\r\n        }\r\n\r\n    }\r\n};\r\n\r\nexport function BarChart({data, title = \"\", subTitle = \"\"}) {\r\n    console.log(data)\r\n  return (\r\n      data &&\r\n    <Chart\r\n      chartType=\"Bar\"\r\n      width=\"100%\"\r\n      height=\"400px\"\r\n      data={data}\r\n      options={options(title, subTitle)}\r\n    />\r\n  );\r\n}\r\n","import React from \"react\";\r\nimport { Chart } from \"react-google-charts\";\r\n\r\n// export const data = [\r\n//   [\"Task\", \"Hours per Day\"],\r\n//   [\"Work\", 11],\r\n//   [\"Eat\", 2],\r\n//   [\"Commute\", 2],\r\n//   [\"Watch TV\", 2],\r\n//   [\"Sleep\", 7],\r\n// ];\r\n\r\nexport const options = (title) => {\r\n    return {\r\n        title: title,\r\n        is3D: true\r\n    }\r\n};\r\n\r\nexport function PieChart({data, title}) {\r\n  return (\r\n      data &&\r\n    <Chart\r\n      chartType=\"PieChart\"\r\n      data={data}\r\n      options={options(title)}\r\n      width={\"100%\"}\r\n      height={\"400px\"}\r\n    />\r\n  );\r\n}","import React from 'react';\r\nimport './TitleLabel.css'\r\n\r\ninterface Props {\r\n    children?: React.ReactNode;\r\n    contents?: Array<React.ReactNode>;\r\n    title: string;\r\n    iconRight?: React.ReactNode | string;\r\n}\r\n\r\nexport const TitleLabel = ({title = \"\", iconRight}: Props) => {\r\n    return (\r\n        <div className=\"title-label\">\r\n            <span className=\"label-text\">{title}</span>\r\n            {iconRight && <span className=\"label-right-icon\">{iconRight}</span>}\r\n        </div>\r\n    )\r\n}\r\n","import React, { useEffect, useState } from 'react'\r\nimport { FiEye } from 'react-icons/fi'\r\nimport { BarChart } from '../../../../dependencies/chart/bar/BarChart'\r\nimport { PieChart } from '../../../../dependencies/chart/pie/PieChart'\r\nimport { JHttp } from '../../../../dependencies/js/Jpc'\r\nimport { KNT } from '../../../../dependencies/js/knt'\r\nimport Table from '../../../../dependencies/table/Table'\r\nimport { TitleLabel } from '../../../../dependencies/views/TitleLabel'\r\nimport { UIWindow } from '../../../../dependencies/views/Views'\r\nimport { baseUrl } from '../../../service/Constant'\r\nimport { Dashboard } from './Dashboard'\r\n\r\nfunction VotingList() {\r\n\r\n    const [show, setShow] = useState(false);\r\n    \r\n    \r\n    const [electionData, setElectionData] = useState([]);\r\n    \r\n   \r\n\r\n    const http = {url: `${baseUrl}/vote/list`, type: \"GET\"};\r\n\r\n\r\n    useEffect(() => {\r\n        const fetch = () => {\r\n            JHttp.get(`${baseUrl}/vote/list`, (data) => {\r\n                setElectionData(data);\r\n            }, (err) => console.log(err))\r\n        }\r\n        fetch()\r\n    }, [])\r\n\r\n  \r\n    const constructData = (data) => {\r\n\r\n       let temp = KNT.array.groupArrayObjectByKey(data, \"postName\", \"title\", \"contents\")\r\n       let res = {};\r\n\r\n       temp.forEach(el => {\r\n           const content = el.contents || [];\r\n           const title = el.title;\r\n           \r\n           const store = [[\"Candidate\", \"Vote\"]];\r\n           content.forEach(co => {\r\n               const vote = co.total;\r\n               const name = co.lastName+\" (\"+co.lastName+\")\";\r\n                store.push([name, vote]);\r\n           });\r\n\r\n           res[title] = store;\r\n           \r\n       });\r\n       return res;\r\n\r\n    }\r\n\r\n    \r\n\r\n\r\n    return (\r\n        <div style={{width: \"100%\"}}>\r\n            <TitleLabel title={\"Votes\"} iconRight={<FiEye onClick={() => setShow(true)} />} />\r\n            <Table unRenderColumns={[\"hierarchy\"]}  http={http}  /> \r\n            <UIWindow onShow={show} onClosed={() => setShow(false)}  title={\"Votes Stats\"}>\r\n                {\r\n                    electionData && Object.keys(constructData(electionData)).map(x => {\r\n                        const each = constructData(electionData)[x]\r\n                        return <div>\r\n                            <div style={{width: \"100%\"}}>\r\n                                <TitleLabel title={'Vote Bar Chart for '+x}/>\r\n                            {each && <BarChart title='Voting Result' data={each} />}\r\n                            </div>\r\n                            <div style={{width: \"100%\"}}>\r\n                                <TitleLabel title='Vote Pie Chart'/>\r\n                                {each && <PieChart title=\"Vote Pie Representation\" data={each}/>}\r\n                            </div>                            \r\n                        </div>\r\n                    })\r\n                }\r\n            </UIWindow>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default VotingList\r\n\r\n\r\n","import React from 'react'\r\nimport Table from '../../dependencies/table/Table'\r\nimport { baseUrl } from '../service/Constant'\r\n\r\ninterface Props {\r\n    \r\n}\r\n\r\nexport const RoleList = (props: Props) => {\r\n    return (\r\n        <div>\r\n            <Table http={{url: `${baseUrl}/role/get/list`, type: \"GET\"}} />\r\n        </div>\r\n    )\r\n}\r\n","import React from 'react'\r\nimport Button from '../../dependencies/button/Button'\r\nimport { JHttp } from '../../dependencies/js/Jpc'\r\nimport { baseUrl, defaultRoles, MSG } from '../service/Constant'\r\nimport { RoleList } from './RoleList'\r\n\r\nfunction CreateRole() {\r\n    const submit = () => {\r\n        if(window.confirm(MSG.confirmMSG)){\r\n            JHttp.post(`${baseUrl}/role/init`, defaultRoles, (res) => alert(res), (err) => console.log(err))\r\n        }\r\n    }\r\n    return (\r\n        <div className='container'>\r\n            <RoleList />\r\n            <div className='container' style={{float: \"right\"}} >\r\n                <Button onClick={submit}  \r\n                label='Initialize Default Roles' />        \r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default CreateRole\r\n\r\n\r\n\r\n","import React, { useEffect, useState } from 'react'\r\nimport Button from '../../dependencies/button/Button';\r\nimport { Form } from '../../dependencies/form/Form'\r\nimport { JHttp } from '../../dependencies/js/Jpc'\r\nimport { KNT } from '../../dependencies/js/knt';\r\nimport TileSelect from '../../dependencies/tileSelect/TileSelect';\r\nimport { baseUrl, MSG } from '../service/Constant'\r\n\r\nfunction AssignRole() {\r\n    const [users, setUsers] = useState([]);\r\n    const [roles, setRoles] = useState([]);\r\n    const [userTypes, setUserTypes] = useState([]);\r\n\r\n    const fetchUsers = () => {\r\n        JHttp.get(`${baseUrl}/user/get/list`, (data) => {\r\n            setUsers(data);\r\n        }, (err) => {console.log(err)})\r\n    }\r\n    const fetchUserTypes = () => {\r\n        JHttp.get(`${baseUrl}/user/list/type`, (data) => {\r\n            setUserTypes(data);\r\n        }, (err) => {console.log(err)})\r\n    }\r\n\r\n    const fetchRoles = () => {\r\n        JHttp.get(`${baseUrl}/role/get/list`, (data) => {\r\n            // const newData = KNT.array.removeByKeyValues(data, \"id\");\r\n            setRoles(data);\r\n\r\n        }, (err) => {console.log(err)})\r\n    }\r\n\r\n    useEffect(() => {\r\n        fetchUsers();\r\n        fetchRoles()\r\n        fetchUserTypes()\r\n    }, []);\r\n    \r\n    const schema = [\r\n        {\r\n            name: \"type\",\r\n            type: \"select\",\r\n            values: userTypes,\r\n            control: {\r\n                type: \"select\",\r\n                renderKey: \"name\",\r\n                valueKey: \"name\",\r\n                label: \"User Type\",\r\n            }\r\n        },\r\n        {\r\n            name: \"rolesId\",\r\n            type: \"select\",\r\n            values: roles,\r\n            control: {\r\n                type: \"tileSelect\",\r\n                renderKey: \"name\",\r\n                valueKey: \"id\",\r\n                label: \"Roles\",\r\n            }\r\n        }\r\n    ]\r\n\r\n    const handleSubmit = (data) => {\r\n        if(window.confirm(MSG.confirmMSG)){\r\n            JHttp.post(`${baseUrl}/role/create`, data, (res) => {alert(res)}, (err) => {console.log(err)})\r\n        }\r\n\r\n    }\r\n\r\n    const handleChange = () => {\r\n\r\n    }\r\n\r\n    const submitButton = (data) => {\r\n        const pro = data;\r\n        return <div style={{paddingTop: \"150px\"}} >\r\n                   <Button label='SAVE Now' onClick={() => handleSubmit(pro)} />\r\n                </div>\r\n    }\r\n    \r\n    return (\r\n        <div className='container'>\r\n            <Form schema={schema} onSubmit={handleSubmit} label=\"Submit Request\" userButton={(e) => submitButton(e)}  onChange={handleChange} />        \r\n        </div>\r\n    )\r\n}\r\n\r\nexport default AssignRole\r\n","\r\nexport const adminData = (key) => JSON.parse(localStorage.getItem(key));","import React from 'react'\r\nimport { Form } from '../../dependencies/form/Form'\r\nimport { JHttp } from '../../dependencies/js/Jpc'\r\nimport Table from '../../dependencies/table/Table'\r\nimport { baseUrl, MSG } from '../service/Constant'\r\n\r\ninterface Props {\r\n    \r\n}\r\n\r\nexport const User = (props: Props) => {\r\n    return (\r\n            <Table http={{url: `${baseUrl}/user/get/list`, type: \"GET\" }}  />\r\n    )\r\n}\r\n\r\n\r\nexport const AddUserType = (props: Props) => {\r\n\r\n    const checkFirstKey = (obj:  any): boolean => {\r\n        const f_key: string | number = Object.keys(obj)[0];\r\n        const val = obj[f_key];\r\n        return val === \"\" || val === null || val === undefined;\r\n    }\r\n    const handleSubmit = (data: any) => {\r\n        console.log(data);\r\n\r\n        if(window.confirm(MSG.confirmMSG)){\r\n            JHttp.post(`${baseUrl}/user/create/type`, [data], (res: string | any) => {alert(res)}, (err: any) => {console.log(err)})\r\n        }\r\n\r\n    }\r\n    return (\r\n            <Form \r\n            onSubmit={handleSubmit}\r\n            label=\"Save Type\"\r\n            schema={[\r\n                {\r\n                    name: \"name\",\r\n                    type: \"input\",\r\n                    control: {\r\n                        placeholder: \"Enter type\",\r\n                        renderKey: \"name\",\r\n                        valueKey: \"name\",\r\n                        label: \"User Type\",\r\n                    }\r\n                }\r\n            ]}  />\r\n    )\r\n}\r\n","import React, { useEffect, useState } from 'react'\r\nimport { ReactNode } from 'react';\r\nimport './TabPane.css';\r\n\r\ninterface Props {\r\n    tab: string[];\r\n    pane: ReactNode[];\r\n}\r\n\r\nexport const TabPane = (props: Props) => {\r\n    const [tabCount, setTabCount] = useState(-1);\r\n    useEffect(()=> {\r\n        (props.tab[0] !== undefined) && setTabCount(0); \r\n    },[])\r\n    return (\r\n        <div className='tab-pane'>\r\n            <div className='tab_container'>{props.tab.map((x, i) => <div className={'tab '+(tabCount === i? \"active \": \"\")} onClick={() => {setTabCount(i)}}>{x}</div>)}</div>\r\n            <div className='pane'>\r\n                {(tabCount !== -1) && props.pane[tabCount]}\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n","import { useState, useEffect } from 'react';\r\nimport { TiArrowRightOutline } from 'react-icons/ti';\r\nimport Button from '../../../dependencies/button/Button';\r\nimport { InputField } from '../../../dependencies/InputFIeld/InputField';\r\nimport './Register.css';\r\nimport './Login.css';\r\nimport { KNT } from '../../../dependencies/js/knt';\r\nimport { JHttp } from '../../../dependencies/js/Jpc';\r\nimport { baseUrl, MSG, connectionStatus } from '../../service/Constant';\r\nimport { IUserData } from '../../service/Reducers';\r\nimport { useDispatch } from 'react-redux';\r\nimport { useNavigate } from 'react-router-dom';\r\nimport { Form } from '../../../dependencies/form/Form';\r\n\r\ninterface Props {\r\n    onSwitch?: (re: string) => void;\r\n    inApp: boolean;\r\n}\r\n\r\nexport const Register = ({ onSwitch, inApp }: Props) => {\r\n\r\n    const [state, setState] = useState({});\r\n    const [userTypes, setUserTypes] = useState([]);\r\n\r\n\r\n\r\n    const dispatcher = useDispatch();\r\n\r\n    let navigate  = useNavigate();\r\n\r\n\r\n    const fetchUserTypes = () => {\r\n        JHttp.get(`${baseUrl}/user/list/type`, (data: any) => {\r\n            data && setUserTypes(data);\r\n        }, (err: any) => {console.log(err)})\r\n    }\r\n\r\n    useEffect(() => {\r\n        fetchUserTypes()\r\n    }, []);\r\n\r\n    \r\n  \r\n    const schema = [\r\n    \r\n        {\r\n            name: \"userType\",\r\n            type: \"select\",\r\n            values: userTypes,\r\n            control: {\r\n                type: \"select\",\r\n                renderKey: \"name\",\r\n                valueKey: \"name\",\r\n                label: \"User Type\",\r\n            }\r\n        },\r\n        {\r\n            name: \"firstName\",\r\n            type: \"input\",\r\n            control: {\r\n                type: \"text\",\r\n                label: \"First Name\",\r\n                placeholder: \"Enter First Name\"\r\n            }\r\n        },\r\n        {\r\n            name: \"lastName\",\r\n            type: \"input\",\r\n            control: {\r\n                type: \"text\",\r\n                label: \"Last Name\",\r\n                placeholder: \"Enter Last Name\"\r\n            }\r\n        },\r\n        {\r\n            name: \"gender\",\r\n            type: \"select\",\r\n            values: [\"Male\", \"Female\"],\r\n            control: {\r\n                type: \"checkbox\",\r\n                label: \"Gender\",\r\n                placeholder: \"Gender\"\r\n            }\r\n        },\r\n        {\r\n            name: \"email\",\r\n            type: \"input\",\r\n            control: {\r\n                type: \"text\",\r\n                label: \"Email\",\r\n                placeholder: \"Supply Email\",\r\n            }\r\n        },\r\n        {\r\n            name: \"phoneNumber\",\r\n            type: \"input\",\r\n            control: {\r\n                type: \"number\",\r\n                label: \"Phone Number\",\r\n                placeholder: \"Phone Number\"\r\n            }\r\n        },\r\n        {\r\n            name: \"addressOne\",\r\n            type: \"input\",\r\n            control: {\r\n                type: \"text\",\r\n                label: \"Address\",\r\n                placeholder: \"Address\"\r\n            }\r\n        },\r\n        {\r\n            name: \"password\",\r\n            type: \"password\",\r\n            control: {\r\n                type: \"input\",\r\n                label: \"Choose A Password\",\r\n                placeholder: \"Password\"\r\n            }\r\n        },\r\n    ]\r\n\r\n\r\n\r\n    const handleChange = (e: any) => {\r\n        e.preventDefault();\r\n        const { name, value } = e.target;\r\n        console.log(name, value, e.target);\r\n\r\n        setState(pr => ({ ...pr, [name]: value }))\r\n    }\r\n\r\n    const switchLogin = () => {\r\n        onSwitch && onSwitch(\"login\")\r\n    }\r\n\r\n    const handleRegister = (e: any) => {\r\n        e.preventDefault();\r\n        console.log(state);\r\n        const formData: [{}] = [state];\r\n        KNT.validateField.validate(formData, (res: string) => alert(MSG.fieldRequiredMSG(res)), () => {\r\n            if (window.confirm(MSG.confirmMSG)) {\r\n                JHttp.post(`${baseUrl}/user/reg`, state, (response: any | string) => {\r\n\r\n                    handleStatusConnection(response);\r\n\r\n                }, (err: any) => console.log(err));\r\n            }\r\n        })\r\n\r\n    }\r\n    const handleRegisterNow = (data: any) => {\r\n        console.log(data);\r\n        const formData: [{}] = [data];\r\n        KNT.validateField.validate(formData, (res: string) => alert(MSG.fieldRequiredMSG(res)), () => {\r\n            if (window.confirm(MSG.confirmMSG)) {\r\n                JHttp.post(`${baseUrl}/user/reg`, data, (response: any | string) => {\r\n\r\n                     handleStatusConnection(response);\r\n\r\n                }, (err: any) => console.log(err));\r\n            }\r\n        })\r\n\r\n    }\r\n\r\n\r\n    const handleStatusConnection = (response: IUserData): void => {\r\n        if(response !== null){\r\n            const status = response.status | 0;\r\n            console.log(status);\r\n            if(status === connectionStatus.connected){\r\n                if(!inApp){\r\n                    alert(\"connected\")\r\n                    dispatcher({type: \"setUserData\", data: response})\r\n                    \r\n                    sessionStorage.setItem(\"username\", response.username);\r\n                    sessionStorage.setItem(\"user_basic_data\", JSON.stringify(response));\r\n                    \r\n                    navigate('/app');\r\n                } else  alert(\"Saved!\");\r\n\r\n            } else\r\n            if(status === connectionStatus.blocked){\r\n                console.log(response.message);\r\n            } else\r\n            if(status === connectionStatus.failed){\r\n                console.log(response.message);\r\n            } else \r\n            if(status === connectionStatus.incorrect){\r\n                alert(response.message);\r\n            } else\r\n            if(status === connectionStatus.not_exist){\r\n                alert(response.message);\r\n            }\r\n        }\r\n    }\r\n\r\n\r\n    const submitButtonRender = (data: any) => {\r\n        return (\r\n            <div className=\"login-reg-btn-wrapper\">\r\n                <Button icon={<TiArrowRightOutline />} label=\"REGISTER\" onClick={() => handleRegisterNow(data)} />\r\n                {!inApp && <span onClick={switchLogin} className=\"clickable-btn-span\" >Already Have a login?</span>}\r\n            </div>\r\n        )\r\n    }\r\n\r\n\r\n    return (\r\n        <div className=\"reg-frame\">\r\n            <div>\r\n                <div className=\"reg-login-title\">Create An Account</div>\r\n                <Form schema={schema} onSubmit={handleRegister} label=\"Submit Request\" userButton={(e) => submitButtonRender(e)}  onChange={handleChange} />        \r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\n\r\n","import { ContestForm } from \"../../contestant/ContestForm\";\r\nimport { ContestantList } from '../../contestant/ContestantList';\r\nimport CreateElectionLevel from \"../../activities/election/CreateElectionLevel\";\r\nimport { CreatePosts } from '../../activities/election/CreatePosts';\r\nimport { Profile } from \"../../activities/profile/Profile\";\r\nimport CreatElection from \"../../activities/election/CreatElection\";\r\nimport VotingList from \"../../activities/election/vote/VotingList\";\r\nimport CreateRole from \"../../admin/CreateRole\";\r\nimport AssignRole from \"../../admin/AssignRole\";\r\nimport { AddUserType, User } from '../../user/User';\r\nimport { TabPane } from \"../../../dependencies/tabPane/TabPane\";\r\nimport { Register } from \"../../core/auth/Register\";\r\n\r\n\r\nconst SubLinks = [\r\n    {id: 1, name: \"Register As Contestant\", value: <ContestForm /> },\r\n    {id: 2, name: \"View All Contestant\", value: <ContestantList />},\r\n    {id: 3, name: \"Profile\", value: <Profile /> },\r\n    {id: 4, name: \"Create Election Level\", value: <CreateElectionLevel />},\r\n    {id: 5, name: \"Create Posts\", value: <CreatePosts />},\r\n    {id: 6, name: \"Election Form\", value: <CreatElection target=\"form\" />},\r\n    {id: 7, name: \"Election List\", value: <CreatElection />},\r\n    {id: 8, name: \"Voting List\", value: <VotingList />},\r\n    {id: 9, name: \"Roles List\", value: <CreateRole />},\r\n    {id: 10, name: \"Role Assign\", value: <TabPane pane={[ <AssignRole />, <AddUserType/>, <Register inApp={true} />]} tab={[\"Assign Role\", \"Add User Type\", \"Add new User\"]} />},\r\n    {id: 11, name: \"All User\", value: <User />},\r\n    {id: 13, name: \"No role Found\", value: \r\n    <div className=\"container\" style={{display: \"flex\", justifyContent: 'center', alignItems: \"center\", height: \"100vh\"}}>\r\n        No role yet\r\n        <br/>\r\n        <br/>\r\n        <i>or try login-out and login again! </i>\r\n    </div>\r\n    },\r\n];\r\nexport default SubLinks;\r\n\r\n\r\n\r\n","\r\n\r\n/**\r\n * \r\n */\r\n// const creatFeatures = ()\r\n\r\nimport { useSelector } from \"react-redux\";\r\nimport { KNT } from \"../../dependencies/js/knt\";\r\nimport SubLinks from \"../windows/SubLinks/SubLinks\";\r\nimport { adminData } from \"./ConstantData\";\r\nimport { IReducersState } from \"./Reducers\";\r\n\r\nexport const baseUrl = \"http://localhost:8080\";\r\n// export const baseUrl = \"http://localhost:99\";\r\n\r\nexport const connectionStatus = { connected: 1, blocked:  2, incorrect : 3, failed : 4, not_exist:  0 };\r\n\r\nexport const UserData = () => {\r\n\r\n\r\n    let temp = {\r\n        username: \"\",\r\n        gender: \"\",\r\n        image: \"\",\r\n        title: \"Mr\",\r\n        date: \"\",\r\n        lastName: \"\",\r\n        firstName: \"\",\r\n        dateOfBirth: \"\",\r\n        status: 0,\r\n        message: \"\"\r\n    }\r\n\r\n\r\n    const user = useSelector<IReducersState>(state => state.userData);\r\n    \r\n    // JSON.parse(localStorage.getItem('user_basic_info')\r\n    return temp || user;\r\n}\r\n\r\n\r\n\r\nexport const defaultRoles = KNT.array.extractByKeys(SubLinks, [\"id\", \"name\"]);\r\n\r\nexport const adminKey = \"bvhgghhvghvbvghhjghgffghghghhgfggfghfgxfgcfgghgcfgvghcfgvghgghghhggvghggcghbhgvghkhvtgbyugt\";\r\n\r\nexport const adminBasic = {\r\n    roles: KNT.array.getValuesArrayByKey(defaultRoles, \"id\").filter((val) => val !== 13) as number[],\r\n    ...adminData(adminKey)\r\n}\r\n\r\n\r\n\r\n\r\nexport const userBasicRoles = [3]\r\nexport const MSG = {\r\n    fieldRequiredMSG: (name: string) => `${name} is required!`,\r\n    confirmMSG: \"Save now ?\", \r\n    confirmLogoutMSG: \"About to logout?\", \r\n    vote: (name: string) => `Vote for ${name} ?`\r\n}\r\n\r\n\r\n\r\n","import { ReactNode, useEffect } from 'react'\r\nimport { FiUser } from 'react-icons/fi';\r\nimport { useSelector } from 'react-redux';\r\nimport { KNT } from '../../../dependencies/js/knt';\r\nimport { basic, basicJSX } from '../../core/configuration/config';\r\nimport { UserData } from '../../service/Constant';\r\nimport { IReducersState } from '../../service/Reducers';\r\n\r\nimport './LandingPage.css'\r\ninterface Props {\r\n    page: ReactNode,\r\n    title?: string,\r\n}\r\n\r\nexport const LandingPage = (props: Props) => {\r\n    const user = UserData();\r\n    const title: string = useSelector<IReducersState>(state => state.title) as string;\r\n\r\n    const username = sessionStorage.getItem(\"username\");\r\n  \r\n    \r\n    \r\n    // if(username === null || username === undefined){navigate(\"/\")}\r\n    return (\r\n        <div className=\"page-frame\">\r\n            <div className=\"header\">\r\n            <div className='header-logo'>\r\n                {basic.appLogo}\r\n            </div>\r\n            <div className='header-label'>\r\n                <h3>{KNT.string.titleCase(title)}</h3>\r\n            </div>\r\n            <div className='header-menu'>\r\n                {username && <span><FiUser/> {username}</span>}\r\n            </div>\r\n            </div>            \r\n            <div className=\"contents\">\r\n                {props.page}\r\n            </div>\r\n            {basicJSX.poweredBy}         \r\n            {basicJSX.footer}          \r\n        </div>\r\n    )\r\n}\r\n","import React, { useEffect, useState } from 'react';\r\nimport Button from '../../../dependencies/button/Button';\r\nimport './Login.css';\r\nimport {TiArrowRightOutline} from 'react-icons/ti'\r\nimport { useNavigate } from 'react-router-dom';\r\nimport { JHttp } from '../../../dependencies/js/Jpc';\r\nimport { KNT } from '../../../dependencies/js/knt';\r\nimport { Register } from './Register';\r\nimport { useDispatch } from 'react-redux';\r\nimport { adminKey, baseUrl, connectionStatus } from '../../service/Constant';\r\n// import { IReducersState } from '../../service/Reducers';\r\n\r\ninterface Props {\r\n    currentTitle?: (title: string) => void;\r\n}\r\n\r\nexport const Login = ({currentTitle}: Props) => {\r\n    \r\n    const dispatcher = useDispatch();\r\n    // const title: string = useSelector<IReducersState>(state => state.title) as string;\r\n\r\n    const [current, setCurrent] = useState(\"login\")\r\n    const [username, setUsername] = useState(\"\");\r\n    const [password, setPassword] = useState(\"\");\r\n\r\n    const [msg, setMsg] = useState(\"\");\r\n    const [errorAlert, setErrorAlert] = useState(false);\r\n\r\n    let navigate  = useNavigate();\r\n\r\n    \r\n    currentTitle && currentTitle(current);\r\n    \r\n    sessionStorage.setItem(\"username\", \"\");\r\n\r\n\r\n    const fetchAdminDetails = () => {\r\n        JHttp.get(`${baseUrl}/admin/get/details`, (data: any) => {\r\n            const temp = JSON.stringify(KNT.array.removeByKeys([data], [\"rolesId\"])[0]);\r\n            localStorage.setItem(adminKey, temp)\r\n        })\r\n    }\r\n\r\n    useEffect(() => {\r\n        fetchAdminDetails()\r\n    }, [])\r\n\r\n\r\n\r\n    const authLogin = (e?: React.MouseEvent<HTMLButtonElement, MouseEvent>) => {\r\n        e && e.preventDefault();\r\n        const formData = {username: username, passkey: password};\r\n        KNT.validateField.validate([formData], (keys: string) => {alert(KNT.string.titleCase(keys)+ \" is Required\")}, () => {\r\n            JHttp.post(`${baseUrl}/auth/login`, formData, (response: any) => {\r\n                if(response !== null){\r\n                    const status = response.status | 0;\r\n                    if(status === connectionStatus.connected){\r\n                        alert(\"connected\")\r\n\r\n                        dispatcher({type: \"setUserData\", data: response})\r\n\r\n                        sessionStorage.setItem(\"username\", response.username);\r\n                        sessionStorage.setItem(\"user_basic_data\", JSON.stringify(response));\r\n\r\n                        navigate('/app')\r\n                    } else\r\n                    if(status === connectionStatus.blocked){\r\n                        setMsg(response.message);\r\n                        setErrorAlert(true)\r\n                    } else\r\n                    if(status === connectionStatus.failed){\r\n                        setMsg(response.message);\r\n                        setErrorAlert(true)\r\n                    } else \r\n                    if(status === connectionStatus.incorrect){\r\n                        alert(response.message)\r\n                        setMsg(response.message);\r\n                        setErrorAlert(true)\r\n                    } else\r\n                    if(status === connectionStatus.not_exist){\r\n                        alert(response.message)\r\n                        setMsg(response.message);\r\n                        setErrorAlert(true)\r\n                    }\r\n                }\r\n                \r\n            }, (err: any) => {\r\n                console.error(err);\r\n            });\r\n        } );\r\n\r\n    }\r\n\r\n    const switchReg = (str: string) => {\r\n        setCurrent(str)\r\n        dispatcher({type: \"setTitle\", data: str});\r\n    }\r\n\r\n    window.onkeydown = (ev: KeyboardEvent) => {\r\n        if(ev.key === \"Enter\"){\r\n            KNT.validateField.validate([{userName: username, password: password}], undefined, () => {\r\n                authLogin()\r\n            })\r\n        }\r\n    }\r\n\r\n    return (\r\n        <div className=\"login-frame\">\r\n            {\r\n                current ===  \"login\"?\r\n                <div className=\"login\">\r\n                        <div className=\"reg-login-title\">Authentication</div>\r\n                        <div className={`login-input-frame ${errorAlert === true? \"login-input-frame-error\": \"\"}`}>\r\n                            <div className=\"login-input\">\r\n                                <input id=\"username\" name=\"username\" value={username} onChange={(e) => setUsername(e.target.value) } placeholder=\"Enter Username\" type=\"text\" />\r\n                            </div>\r\n                            <div className=\"login-input\">\r\n                                <input id=\"password\" name=\"password\" value={password} onChange={(e) => setPassword(e.target.value) } placeholder=\"Enter Password\"  type=\"password\" />\r\n                            </div>\r\n                            <span>{errorAlert && msg}</span>\r\n                        </div>\r\n                        <div className=\"login-reg-btn-wrapper\">\r\n                            <Button icon={<TiArrowRightOutline  />} label=\"LOGIN\"   onClick={authLogin} />\r\n                            <span onClick={() => switchReg(\"register\")} className=\"clickable-btn-span\" >Register</span>\r\n                        </div>\r\n                </div>\r\n                : \r\n                <Register inApp={false} onSwitch={(re) => switchReg(re)}  />\r\n        }\r\n         </div>\r\n    )\r\n}\r\n","import React, { ReactElement, useState } from 'react';\r\nimport { KNT } from '../js/knt';\r\nimport './Switcher.css';\r\nimport { useEffect } from 'react';\r\n\r\ntype TSubLink = {\r\n    name: string;\r\n    value: ReactElement;\r\n}\r\n\r\ninterface Props {\r\n    subLinks?: Array<TSubLink>;\r\n    onChange?: (e: any) => void;\r\n    onPageChange?: (e: any) => string;\r\n\r\n}\r\n\r\n\r\nexport const Switcher = ({subLinks = [{name: \"\", value: <></>}], onChange, onPageChange}: Props): ReactElement => {\r\n    \r\n    const [subLink, setSubLink] = useState(subLinks)\r\n    \r\n    const [current, setCurrent] = useState(subLinks[0].name)\r\n \r\n\r\n    useEffect(() => {\r\n        if(subLink !== subLinks){\r\n            setSubLink(subLinks);\r\n        } \r\n    }, [subLinks])\r\n\r\n\r\n    /**\r\n    useEffect(() => {\r\n        // alert(\"h\")\r\n        const action = () => {\r\n            const keys = KNT.array.getValuesArrayByKey(subLink, \"name\");\r\n            if(keys.includes(onPageChange) && current !== onPageChange){\r\n                onPageChange && setCurrent(onPageChange);\r\n            }\r\n        }\r\n        action();\r\n    }, [current])\r\n\r\n     **/\r\n\r\n\r\n\r\n    const currentView = (currentView: string) => {\r\n        if(current !== undefined){\r\n            const res = (subLink.length > 0) && (KNT.array.extractByKeyValue(subLink, \"name\", currentView)[0] && KNT.array.extractByKeyValue(subLink, \"name\", currentView)[0][\"value\"]) as ReactElement;\r\n            onChange && onChange(current)\r\n            return res;\r\n        } else return <div>ERROR {currentView}</div>\r\n    }\r\n\r\n    const activeBtn = (name: string) => {\r\n        if(current === name) return \"switcher-switch-btn-active\";\r\n        return \"\";\r\n    }\r\n\r\n\r\n\r\n    return (\r\n        <div className='switcher'> \r\n        {/* jjj{onPageChange? onPageChange: \"nothin\"} */}\r\n            <div className='switcher-contents'>\r\n                {currentView(current)}\r\n            </div>\r\n            <div className='switcher-btn-wrapper'>\r\n                {subLink.map((x, i) => x.name && <span className={'switcher-switch-btn '+activeBtn(x.name)} key={i} onClick={() => setCurrent(x.name)} >{KNT.string.titleCase(x.name)}</span>)}\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n","import React from 'react'\r\nimport { useNavigate } from 'react-router-dom';\r\nimport { MSG } from '../../service/Constant';\r\nimport {RiLogoutCircleRLine} from 'react-icons/ri'\r\n\r\ninterface Props {\r\n    \r\n}\r\n\r\nexport const Logout = (props: Props) => {\r\n    let navigate  = useNavigate();\r\n\r\n    const logoutFunc = () => {\r\n        if(window.confirm(MSG.confirmLogoutMSG)){\r\n            sessionStorage.clear();\r\n            localStorage.clear()\r\n            navigate('/');\r\n        }\r\n    }\r\n\r\n    return (\r\n            <RiLogoutCircleRLine title='logout' onClick={logoutFunc}  />\r\n    )\r\n}\r\n","export interface IReducersState {\r\n    title: string;\r\n    userData: IUserData;\r\n}\r\nexport interface IUserData {\r\n    username: \"\",\r\n    gender: \"\",\r\n    image: \"\",\r\n    title: \"Mr\",\r\n    date: \"\",\r\n    lastName: \"\",\r\n    firstName: \"\",\r\n    dateOfBirth: \"\",\r\n    status: 0,\r\n    message: \"\",\r\n    rolesId: number[]\r\n}\r\nconst initialState: IReducersState = {\r\n    title: \"Login\",\r\n    userData: {\r\n        username: \"\",\r\n        gender: \"\",\r\n        image: \"\",\r\n        title: \"Mr\",\r\n        date: \"\",\r\n        lastName: \"\",\r\n        firstName: \"\",\r\n        dateOfBirth: \"\",\r\n        status: 0,\r\n        message: \"\",\r\n        rolesId: []\r\n    }\r\n}\r\n\r\nexport const Reducers = (state = initialState, action: any): IReducersState => {\r\n    switch (action.type) {\r\n        case \"setTitle\":\r\n            return {...state, title: action.data}    \r\n        case \"setUserData\":\r\n            return {...state, userData: action.data}    \r\n        default:\r\n            return state;\r\n    }\r\n}\r\n\r\nexport const mapStateToProp = (state: IReducersState) => {\r\n    return state;\r\n}","import { ReactNode, useEffect, useState } from 'react'\r\nimport { FiUser } from 'react-icons/fi';\r\nimport { connect, useDispatch } from 'react-redux';\r\nimport { KNT } from '../../../dependencies/js/knt';\r\nimport { Switcher } from '../../../dependencies/switcher/Switcher';\r\nimport { Logout } from '../../core/auth/Logout';\r\nimport { basic, basicJSX } from '../../core/configuration/config';\r\nimport { adminBasic, userBasicRoles } from '../../service/Constant';\r\n// import { UserData } from '../../service/Constant.tsx';\r\nimport { IReducersState, mapStateToProp } from '../../service/Reducers';\r\nimport SubLinks from '../SubLinks/SubLinks';\r\n\r\nimport './SkinPage.css';\r\ninterface Props extends IReducersState {\r\n    page?: ReactNode,\r\n}\r\n\r\nconst SkinPage = ({userData, page}: Props) => {\r\n    // const user = UserData();\r\n    // const title: string = useSelector<IReducersState>(state => state.title) as string;\r\n    // const user: IUserData = useSelector<IReducersState>(state => state.userData) as IUserData;\r\n\r\n    const username = sessionStorage.getItem(\"username\");\r\n    const dispatcher = useDispatch();\r\n\r\n    const [header, setHeader] = useState(\"\");\r\n    const [view, setView] = useState(\"\");\r\n\r\n\r\n\r\n    const store = sessionStorage.getItem(\"user_basic_data\");\r\n\r\n    \r\n    useEffect(() => {\r\n        store && dispatcher({type: \"setUserData\", data: JSON.parse(store)});\r\n    }, []);\r\n        \r\n    // if(username === null || username === undefined){navigate(\"/\")}\r\n    const rolesIds = () => {\r\n        console.log(userData.username, adminBasic);\r\n        if(userData.username === adminBasic.username){\r\n            return adminBasic.roles;\r\n        } else if(userData.rolesId.length > 0 && userData.rolesId !== undefined && userData !== null){\r\n            return userData.rolesId;\r\n        } else {\r\n            return [13]\r\n        }\r\n    }\r\n\r\n    const subLi = KNT.array.extractByKeyValues(SubLinks, \"id\", rolesIds());\r\n    const handleControl = (text: string) => {\r\n        setHeader(text);\r\n    }\r\n    return (\r\n        <div className=\"skin-home\">\r\n            <div className=\"skin-page-frame\">\r\n            <div className=\"header\">\r\n                <div className='header-logo'>\r\n                    <div>{basic.appLogo}</div>\r\n                    {\r\n                        userData.firstName &&\r\n                    <div className='header-notification'>\r\n                        <i>Good {KNT.date.getGreetingTime()} {userData.firstName}</i>\r\n                    </div>\r\n                    }\r\n                </div>\r\n                <div className='header-label'>\r\n                <h3> {header} </h3>\r\n                </div>\r\n                <div className='header-menu'>\r\n                    <div onClick={() => setView(\"Profile\")}>\r\n                        <FiUser /> {username}\r\n                    </div>\r\n                    <div>\r\n                        <Logout/>\r\n                    </div>\r\n                </div>\r\n            </div>            \r\n            <div className=\"skin-contents\">\r\n                <Switcher onChange={(re) => {setHeader(re); setView(re)}}  subLinks={subLi} />\r\n            </div>     \r\n            {basicJSX.poweredBy}\r\n            {basicJSX.footer}       \r\n            {/* <div className=\"skin-footer\"><i>(c) kaynetpc 2021</i></div>            */}\r\n        </div>       \r\n        </div>\r\n    )\r\n}\r\nexport default (connect)(mapStateToProp)(SkinPage);","\nimport {\n  Routes,\n  Route} from 'react-router-dom'\nimport { LandingPage } from './components/windows/landingPage/LandingPage';\nimport { Login } from './components/core/auth/Login';\nimport SkinPage  from './components/windows/landingPage/SkinPage';\n\n\nfunction App() {  \n\n  return (\n      <Routes>\n        <Route path={\"/\"}  element={<LandingPage page={<Login />}  />}  />\n        <Route path={\"/*\"}  element={<LandingPage page={<Login />}  />}  />\n        <Route path=\"/app\"  element={<SkinPage  />} />\n      </Routes>\n  );\n}\n\nexport default App;\n","// import React from 'react';\n// import ReactDOM from 'react-dom';\n// import './index.css';\n// import App from './App';\n// import reportWebVitals from './reportWebVitals';\n\n// ReactDOM.render(\n//   <React.StrictMode>\n//     <App />\n//   </React.StrictMode>,\n//   document.getElementById('root')\n// );\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\n// reportWebVitals();\n\n\nimport { render } from \"react-dom\";\nimport {\n  BrowserRouter,\n} from \"react-router-dom\";\nimport App from \"./App\";\nimport './main.css'\nimport { Provider } from \"react-redux\";\nimport { createStore } from \"redux\";\nimport { Reducers } from \"./components/service/Reducers\";\n\nconst rootElement = document.getElementById(\"root\");\nconst store = createStore(Reducers);\nrender(\n  <BrowserRouter>\n    <Provider store={store}>\n      <App />\n    </Provider>\n  </BrowserRouter>,\n  rootElement\n)\n"],"sourceRoot":""}